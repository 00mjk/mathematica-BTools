(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     21509,        495]
NotebookOptionsPosition[      9490,        219]
NotebookOutlinePosition[     21609,        497]
CellTagsIndexPosition[     21566,        494]
WindowTitle->Documentation Search
WindowFrame->ModelessDialog*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 TagBox[
  InterpretationBox[Cell[BoxData[
    DynamicModuleBox[{MyTools`Private`symbolName$$ = "", 
     MyTools`Private`context$$ = "", MyTools`Private`option$$ = "", 
     MyTools`Private`optionUpdate$$, MyTools`Private`symbolUpdate$$ = 
     0.5345563035938137, MyTools`Private`viewing$$ = False, 
     MyTools`Private`autocomplete$$ = True}, 
     DynamicBox[ToBoxes[
      MyTools`Private`viewing$$; MyTools`Private`context$$; 
       If[False === DockedCells, Column[{
           Button[
            RawBoxes[
             FrontEndResource["FEBitmaps", 
              If[
              MyTools`Private`viewing$$, "SquareMinusIconSmall", 
               "SquarePlusIconSmall"]]], MyTools`Private`viewing$$ = 
            Not[MyTools`Private`viewing$$], Appearance -> "Frameless"], 
           Row[{
             Spacer[25], 
             If[MyTools`Private`viewing$$, 
              Column[#], 
              Button[
               Style["Search Documentation", Italic, Gray], 
               MyTools`Private`viewing$$ = True, Appearance -> 
               "Frameless"]]}]}]& , Column][{
          Column[{
            TextCell[
            "Context", "Text", FontSize -> 
             If[False === DockedCells, 12, Automatic]], 
            TextCell[
             InputField[
              Dynamic[MyTools`Private`context$$, (If[
                 Or[
                  MemberQ[
                   Map[StringLength, {#, MyTools`Private`context$$}], 0], 
                  Not[
                   Or[
                    StringMatchQ[#, 
                    StringJoin[MyTools`Private`context$$, "*"]], 
                    StringMatchQ[MyTools`Private`context$$, 
                    StringJoin[#, "*"]]]]], MyTools`Private`symbolName$$ = ""; 
                 MyTools`Private`option$$ = ""]; 
               MyTools`Private`context$$ = #)& ], String], "Input"]}], 
          Grid[{{
             TextCell[
             "Symbol", "Text", FontSize -> 
              If[False === DockedCells, 12, Automatic]], 
             TextCell[
             "Option", "Text", FontSize -> 
              If[False === DockedCells, 12, Automatic]]}, {
             TextCell[
              InputField[
               Dynamic[
               MyTools`Private`symbolName$$, (
                MyTools`Private`symbolName$$ = #; 
                MyTools`Private`symbolUpdate$$ = RandomReal[]; Null)& ], 
               String, FieldSize -> Automatic], "Input"], 
             TextCell[
              InputField[
               Dynamic[
               MyTools`Private`option$$, If[
                MyTools`Private`symbolName$$ =!= "", 
                 MyTools`Private`option$$ = #; 
                 MyTools`Private`optionUpdate$$ = RandomReal[]; Null]& ], 
               String, FieldSize -> Automatic], "Input"]}, 
            
            With[{MyTools`Private`conf$ = {
               FrameStyle -> GrayLevel[0.8], Framed -> True, Background -> 
                White, ImageSize -> {290, {Automatic, 250}}}}, {
              Dynamic[
              MyTools`Private`symbolName$$; 
               If[StringLength[MyTools`Private`symbolName$$] > 1, 
                 If[DownValues[MyTools`DocFind] == {}, 
                   Needs["MyTools`"]]; 
                 MyTools`DocFind[
                  MyTools`Private`symbolName$$, Context -> 
                   If[MyTools`Private`context$$ == "", "*", 
                    MyTools`Private`context$$], 
                   Apply[Sequence, MyTools`Private`conf$]], ""], 
               TrackedSymbols :> {MyTools`Private`symbolName$$}], 
              Dynamic[
              MyTools`Private`option$$; If[MyTools`Private`option$$ =!= "", 
                 MyTools`OpsFind[
                  ToExpression[
                   If[
                   MyTools`Private`context$$ == "", 
                    MyTools`Private`symbolName$$, 
                    StringJoin[
                    MyTools`Private`context$$, "`", 
                    MyTools`Private`symbolName$$]], StandardForm, 
                   Unevaluated], MyTools`Private`option$$, ButtonFunction -> 
                  Hyperlink, 
                  Apply[Sequence, MyTools`Private`conf$]], ""], 
               TrackedSymbols :> {MyTools`Private`option$$}]}]}, Dividers -> 
           None, Alignment -> {Left, Top}]}], StandardForm],
      ImageSizeCache->{587., {55.14208984375, 61.85791015625}},
      TrackedSymbols:>{MyTools`Private`viewing$$, MyTools`Private`context$$}],
     
     DynamicModuleValues:>{}]],
    FontFamily->"ArialBlack",ExpressionUUID->
    "718e1e7b-3fb5-47d7-af59-ee1e5fe91f8f"],
   TextCell[
    DynamicModule[{
     MyTools`Private`symbolName = "", MyTools`Private`context = "", 
      MyTools`Private`option = "", MyTools`Private`optionUpdate, 
      MyTools`Private`symbolUpdate, MyTools`Private`viewing = False, 
      MyTools`Private`autocomplete = True}, 
     Dynamic[
     MyTools`Private`viewing; MyTools`Private`context; 
      If[False === DockedCells, Column[{
          Button[
           RawBoxes[
            FrontEndResource["FEBitmaps", 
             If[
             MyTools`Private`viewing, "SquareMinusIconSmall", 
              "SquarePlusIconSmall"]]], MyTools`Private`viewing = 
           Not[MyTools`Private`viewing], Appearance -> "Frameless"], 
          Row[{
            Spacer[25], 
            If[MyTools`Private`viewing, 
             Column[#], 
             Button[
              Style["Search Documentation", Italic, Gray], 
              MyTools`Private`viewing = True, Appearance -> 
              "Frameless"]]}]}]& , Column][{
         Column[{
           TextCell[
           "Context", "Text", FontSize -> 
            If[False === DockedCells, 12, Automatic]], 
           TextCell[
            InputField[
             Dynamic[MyTools`Private`context, (If[
                Or[
                 MemberQ[
                  Map[StringLength, {#, MyTools`Private`context}], 0], 
                 Not[
                  Or[
                   StringMatchQ[#, 
                    StringJoin[MyTools`Private`context, "*"]], 
                   StringMatchQ[MyTools`Private`context, 
                    StringJoin[#, "*"]]]]], MyTools`Private`symbolName = ""; 
                MyTools`Private`option = ""]; MyTools`Private`context = #)& ],
              String], "Input"]}], 
         Grid[{{
            TextCell[
            "Symbol", "Text", FontSize -> 
             If[False === DockedCells, 12, Automatic]], 
            TextCell[
            "Option", "Text", FontSize -> 
             If[False === DockedCells, 12, Automatic]]}, {
            TextCell[
             InputField[
              Dynamic[
              MyTools`Private`symbolName, (MyTools`Private`symbolName = #; 
               MyTools`Private`symbolUpdate = RandomReal[]; Null)& ], String, 
              FieldSize -> Automatic], "Input"], 
            TextCell[
             InputField[
              Dynamic[
              MyTools`Private`option, If[
               MyTools`Private`symbolName =!= "", MyTools`Private`option = #; 
                MyTools`Private`optionUpdate = RandomReal[]; Null]& ], String,
               FieldSize -> Automatic], "Input"]}, 
           
           With[{MyTools`Private`conf$ = {
              FrameStyle -> GrayLevel[0.8], Framed -> True, Background -> 
               White, ImageSize -> {290, {Automatic, 250}}}}, {
             Dynamic[
             MyTools`Private`symbolName; 
              If[StringLength[MyTools`Private`symbolName] > 1, 
                If[DownValues[MyTools`DocFind] == {}, 
                  Needs["MyTools`"]]; 
                MyTools`DocFind[
                 MyTools`Private`symbolName, Context -> 
                  If[MyTools`Private`context == "", "*", 
                    MyTools`Private`context], 
                  Apply[Sequence, MyTools`Private`conf$]], ""], 
              TrackedSymbols :> {MyTools`Private`symbolName}], 
             Dynamic[MyTools`Private`option; If[MyTools`Private`option =!= "", 
                MyTools`OpsFind[
                 ToExpression[
                  If[
                  MyTools`Private`context == "", MyTools`Private`symbolName, 
                   StringJoin[
                   MyTools`Private`context, "`", MyTools`Private`symbolName]],
                   StandardForm, Unevaluated], MyTools`Private`option, 
                 ButtonFunction -> Hyperlink, 
                 Apply[Sequence, MyTools`Private`conf$]], ""], 
              TrackedSymbols :> {MyTools`Private`option}]}]}, Dividers -> 
          None, Alignment -> {Left, Top}]}], 
      TrackedSymbols :> {MyTools`Private`viewing, MyTools`Private`context}], 
     DynamicModuleValues :> {}], FontFamily -> "ArialBlack"]],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellMargins->{{10, 10}, {0, 
  5}},ExpressionUUID->"50ddc6ba-d503-45dd-83d7-3b056b2fbe1b"]
},
Saveable->False,
NotebookEventActions->{"ReturnKeyDown" :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {"MenuCommand", "EvaluateCells"} :> 
  FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {
   "MenuCommand", "HandleShiftReturn"} :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {
   "MenuCommand", "EvaluateNextCell"} :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], "EscapeKeyDown" :> (FE`Evaluate[
     FEPrivate`FindAndClickCancelButton[]]; DialogReturn[$Failed]), 
  "WindowClose" :> (FE`Evaluate[
     FEPrivate`FindAndClickCancelButton[]]; DialogReturn[$Failed])},
NotebookDynamicExpression:>Needs["MyTools`"],
Selectable->False,
WindowSize->All,
WindowMargins->{{Automatic, 177}, {Automatic, 0}},
WindowFrame->"ModelessDialog",
WindowFloating->True,
WindowClickSelect->True,
WindowTitle->"Documentation Search",
DockedCells->{
  Cell[
   BoxData[
    PanelBox[
     StyleBox[
      TemplateBox[{
        StyleBox[
         GraphicsBox[{}, ImageSize -> {9, 0}, BaselinePosition -> Baseline], 
         "CacheGraphics" -> False], 
        TemplateBox[{
          StyleBox[
           GraphicsBox[{}, ImageSize -> {2, 0}, BaselinePosition -> Baseline],
            "CacheGraphics" -> False], 
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {13, 0}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          TooltipBox[
           ButtonBox[
            PaneSelectorBox[{True -> DynamicBox[
                FEPrivate`ImportImage[
                 
                 FrontEnd`FileName[{"Toolbars", "DocCenter"}, 
                  "HomeIconHot.png"]]], False -> DynamicBox[
                FEPrivate`ImportImage[
                 
                 FrontEnd`FileName[{"Toolbars", "DocCenter"}, 
                  "HomeIcon.png"]]]}, 
             Dynamic[
              CurrentValue["MouseOver"]]], ButtonFunction :> 
            Documentation`HelpLookup[
              CurrentValue[HomePage], 
              FrontEnd`ButtonNotebook[], 
              CurrentValue[Language]], Appearance -> None, Evaluator -> 
            Automatic, Method -> "Preemptive"], 
           DynamicBox[
            FEPrivate`FrontEndResource["HelpToolbarText", "TooltipHome"]]]}, 
         "RowDefault"], 
        StyleBox[
         GraphicsBox[{}, ImageSize -> {39, 0}, BaselinePosition -> Baseline], 
         "CacheGraphics" -> False], 
        FrameBox[
         StyleBox[
          
          DynamicModuleBox[{$CellContext`oldPacletURI$$ = 
            "", $CellContext`function$$ = ""}, 
           RowBox[{
             DynamicWrapperBox[
              TagBox[
               TagBox[
                InputFieldBox[
                 Dynamic[$CellContext`function$$], String, BoxID -> 
                 "HelpViewerSearchField", BaseStyle -> "ControlStyle", 
                 BaselinePosition -> 
                 FEPrivate`Switch[
                  FEPrivate`$OperatingSystem, "MacOSX", Scaled[0.6] -> 
                   Scaled[0.5], "Windows", Scaled[0.68] -> Scaled[0.5], 
                   Blank[], Scaled[0.65] -> Scaled[0.5]], ContinuousAction -> 
                 True, FieldSize -> {
                   DirectedInfinity[1], 1}, ImageSize -> Dynamic[{Inherited, 
                    FEPrivate`If[
                    FEPrivate`SameQ[FEPrivate`$OperatingSystem, "MacOSX"], 20,
                     21]}]], 
                
                EventHandlerTag[{
                 "ReturnKeyDown" :> 
                  Documentation`HelpLookup[$CellContext`function$$, None, 
                    Documentation`CompletionFunction -> (
                    FrontEndTokenExecute[#, "MoveNext"]& )], EvaluationOrder -> 
                  After, PassEventsDown -> True, PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]], 
               
               EventHandlerTag[{{"MenuCommand", "HandleShiftReturn"} :> 
                 Documentation`HelpLookup[$CellContext`function$$, None, 
                   Documentation`CompletionFunction -> (
                    FrontEndTokenExecute[#, "MoveNext"]& )], {
                  "MenuCommand", "EvaluateCells"} :> 
                 Documentation`HelpLookup[$CellContext`function$$, None, 
                   Documentation`CompletionFunction -> (
                    FrontEndTokenExecute[#, "MoveNext"]& )], {
                  "MenuCommand", "SimilarCellBelow"} :> 
                 Documentation`HelpLookup[$CellContext`function$$, None, 
                   Documentation`CompletionFunction -> (
                    FrontEndTokenExecute[#, "MoveNext"]& )], EvaluationOrder -> 
                 After, PassEventsDown -> False, PassEventsDown -> Automatic, 
                 PassEventsUp -> True}]], FEPrivate`If[
                FEPrivate`UnsameQ[$CellContext`oldPacletURI$$, 
                 FEPrivate`CurrentPacletURI[]], 
                FEPrivate`Set[$CellContext`oldPacletURI$$, 
                 FEPrivate`Set[$CellContext`function$$, 
                  FEPrivate`CurrentPacletURI[]]]]; FEPrivate`If[
                
                FEPrivate`SameQ[$CellContext`oldPacletURI$$, 
                 "guide/WolframRoot"], 
                FEPrivate`Set[$CellContext`function$$, ""]], 
              ImageSizeCache -> {12., {10., 12.}}], " ", 
             StyleBox[
              
              GraphicsBox[{}, BaselinePosition -> Baseline, 
               ImageSize -> {2, 0}], CacheGraphics -> False], " ", 
             FrameBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{True -> DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`FileName[{"Toolbars", "DocCenter"}, 
                    "GoIconHot.png"]], ImageSizeCache -> {26., {10., 15.}}], 
                  False -> DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`FileName[{"Toolbars", "DocCenter"}, 
                    "GoIcon.png"]], ImageSizeCache -> {26., {10., 15.}}]}, 
                 Dynamic[
                  CurrentValue["MouseOver"]]], Appearance -> None, 
                ButtonFunction :> 
                Documentation`HelpLookup[$CellContext`function$$, None, 
                  Documentation`CompletionFunction -> (
                   FrontEndTokenExecute[#, "MoveNext"]& )], Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               DynamicBox[
                FEPrivate`FrontEndResource["HelpToolbarText", "TooltipGo"]]], 
              FrameMargins -> {{0, 0}, {0, 4}}, FrameStyle -> None]}], 
           DynamicModuleValues :> {}], 
          InputFieldBoxOptions -> {
           ImageSize -> Dynamic[AbsoluteCurrentValue[{WindowSize, 1}] - 220], 
            FrameMargins -> 
            FEPrivate`Switch[
             FEPrivate`$OperatingSystem, "MacOSX", {{3, 3}, {0, -1}}, 
              "Windows", {{0, 2}, {0, 2}}, 
              Blank[], {{2, 2}, {0, 0}}]}], FrameStyle -> None, 
         FrameMargins -> {{0, 0}, {4, 0}}], 
        StyleBox[
         GraphicsBox[{}, ImageSize -> {12, 0}, BaselinePosition -> Baseline], 
         "CacheGraphics" -> False], 
        GraphicsBox[{}, ImageSize -> {1000, 0}, BaselinePosition -> 
         Baseline]}, "RowDefault"], CacheGraphics -> False, 
      ButtonBoxOptions -> {BaselinePosition -> (Baseline -> Baseline)}], 
     Alignment -> {Left, Center}, Appearance -> Image[CompressedData["
1:eJztyDkKAkEUhOFGE0OvIHgIU0PTEQ8ww7SDSQs9gnhXl3HBfbmC7Q0qeWDw
f1CPqtcr5tm05ZyrO+lk+XIYY74ad9OYhHpWBV+OwsJXPg6Kdnr2U8qUX/8A
AAAA+HtvyF6AgSdg4AHZHbIbYOAKGLhAdobsBBg4QnaAbA9ZAxjYAQa2gIEN
ZGvIvp8pRMU=
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
     ImageSize -> {
       Scaled[1], Full}]], "DockedCell", CellFrame -> 0, 
   CellMargins -> {{0, -10}, {-2, -1}}, 
   CellFrameMargins -> {{0, 0}, {0, 0}}, $CellContext`ShowCodeAssist -> False,
    Background -> None], 
  Cell[
   BoxData[
    DynamicBox[
     FEPrivate`If[FrontEnd`CurrentValue[
        FrontEnd`EvaluationNotebook[], {TaggingRules, "SearchTextTranslated"},
         ""] === "", "", 
      StyleBox[
       RowBox[{
         ButtonBox[
          DynamicBox[
           DynamicBox[
            FEPrivate`ImportImage[
             
             FrontEnd`FileName[{"Toolbars", "DocCenter"}, 
              "SearchIcon.png"]]]], ButtonData :> FEPrivate`StringJoin[
            FrontEnd`CurrentValue[
             FrontEnd`EvaluationNotebook[], {
             TaggingRules, "SearchTextTranslated"}, ""], " start:1"], 
          BaseStyle -> {
           "Link", FontWeight -> "Bold", 
            FontVariations -> {"Underline" -> True}}, ButtonNote -> ""], 
         "   ", 
         DynamicBox[
          FEPrivate`FrontEndResource["HelpToolbarText", "SearchString1"]], 
         "\[InvisibleSpace]", 
         ButtonBox[
          DynamicBox[
           FrontEnd`CurrentValue[
            FrontEnd`EvaluationNotebook[], {
            TaggingRules, "SearchTextTranslated"}, ""]], ButtonData :> 
          FEPrivate`StringJoin[
            FrontEnd`CurrentValue[
             FrontEnd`EvaluationNotebook[], {
             TaggingRules, "SearchTextTranslated"}, ""], " start:1"], 
          BaseStyle -> {
           "Link", FontWeight -> "Bold", 
            FontVariations -> {"Underline" -> True}}, ButtonNote -> ""], 
         "\[InvisibleSpace]", 
         DynamicBox[
          FEPrivate`FrontEndResource["HelpToolbarText", "SearchString2"]]}], 
       FontSize -> 11]], ImageSizeCache -> {4., {0., 0.}}]], "DockedCell", 
   "ControlStyle", CellFrame -> Dynamic[
     FEPrivate`If[
      FEPrivate`UnsameQ[
       FrontEnd`CurrentValue[
        FrontEnd`EvaluationNotebook[], {TaggingRules, "LinkTrails"}, ""], 
       ""], {{0, 0}, {3, 0}}, {{0, 0}, {0, 0}}]], 
   CellMargins -> {{0, -10}, {0, -1}}, CellOpen -> 
   Dynamic[FrontEnd`CurrentValue[
       FrontEnd`EvaluationNotebook[], {TaggingRules, "SearchTextTranslated"}, 
       ""] =!= ""], CellFrameMargins -> {{146, 5}, {3, 0}}, CellFrameColor -> 
   Dynamic[
     FEPrivate`If[
      FEPrivate`SameQ[
       FrontEnd`CurrentValue[
        FrontEnd`EvaluationNotebook[], {TaggingRules, "LinkTrails"}, ""], ""], 
      CurrentValue["ToolbarBackground"], 
      FEPrivate`Switch[
       FrontEnd`CurrentValue[
        FrontEnd`EvaluationNotebook[], {TaggingRules, "ColorType"}], 
       "SymbolColor", 
       RGBColor[0.481193, 0.528023, 0.813489], "GuideColor", 
       RGBColor[1, 0.6, 0], "TutorialColor", 
       RGBColor[0.641154, 0.223011, 0.0623026], "RootColor", 
       RGBColor[1, 0, 0], 
       Blank[], 
       GrayLevel[0.8]]]], $CellContext`ShowCodeAssist -> False, LineIndent -> 
   0, LinebreakAdjustments -> {1, 10, 0, 100, 0}, Background -> 
   GrayLevel[0.8627450980392157]], 
  Cell[
   BoxData[
    DynamicBox[
     FrontEnd`CurrentValue[
      FrontEnd`EvaluationNotebook[], {TaggingRules, "LinkTrails"}, ""], 
     ImageSizeCache -> {4., {0., 0.}}]], "DockedLinkTrail", CellOpen -> 
   Dynamic[FrontEnd`CurrentValue[
       FrontEnd`EvaluationNotebook[], {TaggingRules, "LinkTrails"}, ""] =!= 
     ""], CellFrameColor -> Dynamic[
     FEPrivate`If[
      FEPrivate`UnsameQ[
       FrontEnd`CurrentValue[
        FrontEnd`EvaluationNotebook[], {TaggingRules, "LinkTrails"}, ""], ""], 
      GrayLevel[0.8], 
      FEPrivate`Switch[
       FrontEnd`CurrentValue[
        FrontEnd`EvaluationNotebook[], {TaggingRules, "ColorType"}], 
       "SymbolColor", 
       RGBColor[0.481193, 0.528023, 0.813489], "GuideColor", 
       RGBColor[1, 0.6, 0], "TutorialColor", 
       RGBColor[0.641154, 0.223011, 0.0623026], "RootColor", 
       RGBColor[1, 0, 0], 
       Blank[], 
       GrayLevel[0.8]]]], $CellContext`ShowCodeAssist -> False]},
TaggingRules->{"LinkTrails" -> "", "SearchTextTranslated" -> ""},
CellContext->"Global`",
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (January 28, \
2017)",
StyleDefinitions->"Dialog.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[600, 21, 8886, 196, 126, "Output"]
}
]
*)


(* ::Package:: *)

(* ::Title:: *)
(*$Name`*)


(* ::Text::GrayLevel[0.5]:: *)
(* Autogenerated $Name loader file *)


BeginPackage["$Name`"];


(* ::Subsubsection::Closed:: *)
(*$ContextPath*)


$ContextPath=
	Join[$ContextPath,
		"$Name`"<>
			StringReplace[
				FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
				$PathnameSeparator->"`"
				]&/@
			Select[
				DirectoryQ@#&&
					StringMatchQ[
						StringReplace[
							FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
							$PathnameSeparator->"`"
							],
						("$"|WordCharacter)..
						]
				&]@
			FileNames["*",
				FileNameJoin@{
					DirectoryName@$InputFileName,
					"Packages"
					},
				Infinity
				]
		]


(* ::Section:: *)
(* Package Functions *)


Unprotect["`Private`Package`*"];
Begin["`Private`Package`"];


$InitCode


(* ::Subsection:: *)
(*Post-Processing*)


(* ::Subsubsection::Closed:: *)
(*PrepFileName*)


PackagePostProcessFileNamePrep[fn_]:=
		Replace[
			FileNameSplit@
				FileNameDrop[fn,
					FileNameDepth@
						PackageFilePath["Packages"]
					],{
			{f_}:>
				f|fn|StringTrim[f,".m"|".wl"],
			{p__,f_}:>
				FileNameJoin@{p,f}|fn|{p,StringTrim[f,".m"|".wl"]}
			}]


(* ::Subsubsection::Closed:: *)
(*PrepSpecs*)


PackagePostProcessPrepSpecs[]:=
	(
		Unprotect[
			$PackagePreloadedPackages,
			$PackageHiddenPackages,
			$PackageHiddenContexts,
			$PackageExposedContexts,
			$PackageDecontextedPackages
			];
		If[FileExistsQ@PackageFilePath["Config","LoadInfo.m"],
			Replace[
				Quiet[
					Import@PackageFilePath["Config","LoadInfo.m"],
					Import::nffil
					],
				specs:{__Rule}|_Association:>
					CompoundExpression[
						$PackagePreloadedPackages=
							Replace[
								Lookup[specs,"PreLoad"],
								Except[{__String}]->{}
								],
						$PackageHiddenPackages=
							Replace[
								Lookup[specs,"FEHidden"],
								Except[{__String}]->{}
								],
						$PackageDecontextedPackages=
							Replace[
								Lookup[specs,"PackageScope"],
								Except[{__String}]->{}
								],
						$PackageExposedContexts=
							Replace[
								Lookup[specs,"ExposedContexts"],
								Except[{__String}]->{}
								]
						]
				]
			]
		);


(* ::Subsubsection::Closed:: *)
(*ExposePackages*)


PackagePostProcessExposePackages[]:=
	(
		PackageAppGet/@
			$PackagePreloadedPackages;
		With[{
			syms=
				If[
					!MemberQ[$PackageHiddenPackages,
						PackagePostProcessFileNamePrep[#]
						],
					$DeclaredPackages[#],
					{}
					]&/@Keys@$DeclaredPackages//Flatten
			},
			Replace[
				Thread[
					If[ListQ@$PackageFEHiddenSymbols,
						DeleteCases[syms,
							Alternatives@@
								(Verbatim[HoldPattern]/@Flatten@$PackageFEHiddenSymbols)
							],
						syms
						],
					HoldPattern],
				Verbatim[HoldPattern][{s__}]:>
					PackageFEUnhideSymbols[s]
				]
			]
		)


(* ::Subsubsection::Closed:: *)
(*Rehide Packages*)


PackagePostProcessRehidePackages[]:=
	If[
		MemberQ[$PackageHiddenPackages,
			PackagePostProcessFileNamePrep[#]
			],
		PackageFERehidePackage@#
		]&/@Keys@$DeclaredPackages


(* ::Subsubsection::Closed:: *)
(*Decontext*)


PackagePostProcessDecontextPackages[]:=
	(
		If[
			MemberQ[$PackageDecontextedPackages,
				PackagePostProcessFileNamePrep[#]
				],
			PackageFERehidePackage@#;
			PackageDecontext@#
			]&/@Keys@$DeclaredPackages;
		If[ListQ@$PackageScopedSymbols,
			KeyValueMap[
				With[{newcont=#},
					Replace[Join@@#2,
						HoldComplete[s__]:>
							(
								PackageFERehideSymbols[s];
								Map[
									Function[Null,
										Quiet[
											Check[
												Set[Context[#],newcont],
												Remove[#],
												Context::cxdup
												],
											Context::cxdup
											],
										HoldAllComplete
										],
									HoldComplete[s]
									]//ReleaseHold;
								)
						]
					]&,
				GroupBy[Flatten@$PackageScopedSymbols,First->Last]
				];
			]
		)


(* ::Subsubsection::Closed:: *)
(*ContextPathReassign*)


PackagePostProcessContextPathReassign[]:=
(
	$ContextPath=
		Join[
			Replace[
				Flatten@{$PackageExposedContexts},
				Except[_String?(StringEndsQ["`"])]->Nothing,
				1
				]
			(*DeleteCases[
				Alternatives@@
					Join[
						Replace[
							Flatten@{$PackageHiddenContexts},
							Except[_String?(StringEndsQ["`"])]->Nothing,
							1
							],
						$ContextPath
						]
					]@
					Select[
						$PackageContexts,
						Not@*StringContainsQ["Private"]
						]*),
			$ContextPath
			];
	FrontEnd`Private`GetUpdatedSymbolContexts[];
	)


(* ::Subsection:: *)
(* End[] *)


End[];


(* ::Section:: *)
(* Load *)


Internal`SymbolList[False];


(* ::Subsubsection:: *)
(*Basic Load*)


`Private`Package`$loadAbort=False;
CheckAbort[
	`Private`Package`PackageAppLoad[];
	`Private`Package`$PackageFEHideExprSymbols=True;
	`Private`Package`$PackageFEHideEvalExpr=True;
	`Private`Package`$PackageScopeBlockEvalExpr=True;
	`Private`Package`$PackageDeclared=True;,
	`Private`Package`$loadAbort=True;
	EndPackage[];
	];
Protect["`Private`Package`*"];
Unprotect[`Private`Package`$loadAbort];


(* ::Subsubsection:: *)
(*Post-Process*)


If[!`Private`Package`$loadAbort,
	`Private`Package`PackagePostProcessPrepSpecs[];
	`Private`Package`PackagePostProcessExposePackages[];
	`Private`Package`PackagePostProcessRehidePackages[];
	`Private`Package`PackagePostProcessDecontextPackages[];
	]


Unprotect[`Private`Package`$PackageFEHiddenSymbols];
Clear[`Private`Package`$PackageFEHiddenSymbols];
Unprotect[`Private`Package`$PackageScopedSymbols];
Clear[`Private`Package`$PackageScopedSymbols];


(* ::Subsubsection:: *)
(*Preempt Shadowing*)


(* Hide `Private`Package` shadowing *)


Replace[
	Hold[{`Private`Package`m___}]:>
		Off[`Private`Package`m]
		]@
Thread[
	ToExpression[
		Map[#<>"$"&,Names["`Private`Package`*"]
		],
		StandardForm,
		Function[Null, 
			Hold[MessageName[#, "shdw"]],
			HoldAllComplete
			]
		],
	Hold
	]


(* ::Subsubsection:: *)
(*EndPackage / Reset $ContextPath*)


EndPackage[];


If[(Clear@$Name`Private`Package`$loadAbort;!#)&@$Name`Private`Package`$loadAbort,
	$Name`Private`Package`PackagePostProcessContextPathReassign[]
	]

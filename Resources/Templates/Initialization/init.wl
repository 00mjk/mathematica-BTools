(* ::Package:: *)

(* ::Title:: *)
(*$Name`*)


(* ::Text::GrayLevel[0.5]:: *)
(* Autogenerated $Name loader file *)


Unprotect[$Name`PackageScope`Private`$TopLevelLoad];
$Name`PackageScope`Private`$TopLevelLoad=
	MemberQ[$ContextPath, "Global`"];


BeginPackage["$Name`"];


$Name::usage=
	"$Name is an inert head for the $Name package";


(* ::Subsubsection::Closed:: *)
(*$ContextPath*)


$ContextPath=
	Join[$ContextPath,
		"$Name`"<>
			StringReplace[
				FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
				$PathnameSeparator->"`"
				]&/@
			Select[
				DirectoryQ@#&&
					StringMatchQ[
						StringReplace[
							FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
							$PathnameSeparator->"`"
							],
						("$"|WordCharacter)..
						]
				&]@
			FileNames["*",
				FileNameJoin@{
					DirectoryName@$InputFileName,
					"Packages"
					},
				Infinity
				]
		]


(* ::Section:: *)
(* Package Functions *)


Unprotect["`PackageScope`Private`*"];
Begin["`PackageScope`Private`"];


$InitCode


(* ::Subsection:: *)
(*Post-Processing*)


(* ::Subsubsection::Closed:: *)
(*PrepFileName*)


PackagePostProcessFileNamePrep[fn_]:=
		Replace[
			FileNameSplit@
				FileNameDrop[fn,
					FileNameDepth@
						PackageFilePath["Packages"]
					],{
			{f_}:>
				f|fn|StringTrim[f,".m"|".wl"],
			{p__,f_}:>
				FileNameJoin@{p,f}|fn|{p,StringTrim[f,".m"|".wl"]}
			}]


(* ::Subsubsection::Closed:: *)
(*PrepSpecs*)


PackagePostProcessPrepSpecs[]:=
	(
		Unprotect[
			$PackagePreloadedPackages,
			$PackageHiddenPackages,
			$PackageHiddenContexts,
			$PackageExposedContexts,
			$PackageDecontextedPackages
			];
		If[FileExistsQ@PackageFilePath["Config","LoadInfo.m"],
			Replace[
				$PackageLoadSpecs,
				specs:{__Rule}|_Association:>
					CompoundExpression[
						$PackagePreloadedPackages=
							Replace[
								Lookup[specs,"PreLoad"],
								Except[{__String}]->{}
								],
						$PackageHiddenPackages=
							Replace[
								Lookup[specs,"FEHidden"],
								Except[{__String}]->{}
								],
						$PackageDecontextedPackages=
							Replace[
								Lookup[specs,"PackageScope"],
								Except[{__String}]->{}
								],
						$PackageExposedContexts=
							Replace[
								Lookup[specs,"ExposedContexts"],
								Except[{__String}]->{}
								]
						]
				]
			]
		);


(* ::Subsubsection::Closed:: *)
(*ExposePackages*)


PackagePostProcessExposePackages[]/;TrueQ[$AllowPackageRecoloring]:=
	(
		PackageAppGet/@
			$PackagePreloadedPackages;
		With[{
			syms=
				If[
					!MemberQ[$PackageHiddenPackages,
						PackagePostProcessFileNamePrep[#]
						],
					$DeclaredPackages[#],
					{}
					]&/@Keys@$DeclaredPackages//Flatten
			},
			Replace[
				Thread[
					If[ListQ@$PackageFEHiddenSymbols,
						DeleteCases[syms,
							Alternatives@@
								(Verbatim[HoldPattern]/@Flatten@$PackageFEHiddenSymbols)
							],
						syms
						],
					HoldPattern],
				Verbatim[HoldPattern][{s__}]:>
					PackageFEUnhideSymbols[s]
				]
			]
		)




(* ::Subsubsection::Closed:: *)
(*Rehide Packages*)


PackagePostProcessRehidePackages[]/;TrueQ[$AllowPackageRecoloring]:=
	If[
		MemberQ[$PackageHiddenPackages,
			PackagePostProcessFileNamePrep[#]
			],
		PackageFERehidePackage@#
		]&/@Keys@$DeclaredPackages


(* ::Subsubsection::Closed:: *)
(*Decontext*)


PackagePostProcessDecontextPackages[]/;TrueQ[$AllowPackageRecoloring]:=
	(
		If[
			MemberQ[$PackageDecontextedPackages,
				PackagePostProcessFileNamePrep[#]
				],
			PackageFERehidePackage@#;
			PackageDecontext@#
			]&/@Keys@$DeclaredPackages;
		If[ListQ@$PackageScopedSymbols,
			KeyValueMap[
				With[{newcont=#},
					Replace[Join@@#2,
						HoldComplete[s__]:>
							(
								PackageFERehideSymbols[s];
								Map[
									Function[Null,
										Quiet[
											Check[
												Set[Context[#],newcont],
												Remove[#],
												Context::cxdup
												],
											Context::cxdup
											],
										HoldAllComplete
										],
									HoldComplete[s]
									]//ReleaseHold;
								)
						]
					]&,
				GroupBy[Flatten@$PackageScopedSymbols,First->Last]
				];
			]
		)




(* ::Subsubsection::Closed:: *)
(*ContextPathReassign*)


PackagePostProcessContextPathReassign[]:=
	With[{cp=$ContextPath},
		If[MemberQ[cp],
			"$Name`",
			$ContextPath=
				Join[
					Replace[
						Flatten@{$PackageExposedContexts},
						Except[_String?(StringEndsQ["`"])]->Nothing,
						1
						],
					$ContextPath
					];
			If[TrueQ[$AllowPackageRecoloring], 
				FrontEnd`Private`GetUpdatedSymbolContexts[]
				];
			]
		]


(* ::Subsection:: *)
(*End*)


End[];


(* ::Section:: *)
(* Load *)


If[`PackageScope`Private`$AllowPackageRecoloring,
	Internal`SymbolList[False]
	];


(* ::Subsubsection:: *)
(*Basic Load*)


`PackageScope`Private`$loadAbort=False;
CheckAbort[
	`PackageScope`Private`PackageAppLoad[];
	`PackageScope`Private`$PackageFEHideExprSymbols=True;
	`PackageScope`Private`$PackageFEHideEvalExpr=True;
	`PackageScope`Private`$PackageScopeBlockEvalExpr=True;
	`PackageScope`Private`$PackageDeclared=True;,
	`PackageScope`Private`$loadAbort=True;
	EndPackage[];
	];
Protect["`PackageScope`Private`*"];
Unprotect[`PackageScope`Private`$loadAbort];


(* ::Subsubsection:: *)
(*Post-Process*)


If[!`PackageScope`Private`$loadAbort,
	`PackageScope`Private`PackagePostProcessPrepSpecs[];
	`PackageScope`Private`PackagePostProcessExposePackages[];
	`PackageScope`Private`PackagePostProcessRehidePackages[];
	`PackageScope`Private`PackagePostProcessDecontextPackages[];
	]


Unprotect[`PackageScope`Private`$PackageFEHiddenSymbols];
Clear[`PackageScope`Private`$PackageFEHiddenSymbols];
Unprotect[`PackageScope`Private`$PackageScopedSymbols];
Clear[`PackageScope`Private`$PackageScopedSymbols];


(* ::Subsubsection:: *)
(*Preempt Shadowing*)


(* Hide `PackageScope`Private` shadowing *)


Replace[
	Hold[{`PackageScope`Private`m___}]:>
		Off[`PackageScope`Private`m]
		]@
Thread[
	ToExpression[
		Map[#<>"$"&, Names["`PackageScope`Private`*"]
		],
		StandardForm,
		Function[Null, 
			Hold[MessageName[#, "shdw"]],
			HoldAllComplete
			]
		],
	Hold
	]


(* ::Subsubsection:: *)
(*EndPackage / Reset $ContextPath*)


EndPackage[];


If[(Clear@$Name`PackageScope`Private`$loadAbort;!#)&@$Name`PackageScope`Private`$loadAbort,
	$Name`PackageScope`Private`PackagePostProcessContextPathReassign[]
	]

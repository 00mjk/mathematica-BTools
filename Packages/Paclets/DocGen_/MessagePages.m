(* ::Package:: *)


(* ::Title:: *)
(*DataFramework Package*)

(* ::Text::GrayLevel[.5]:: *)
(*Autogenerated ChemTools package*)

(* ::Subsubsection::Closed:: *)
(*AnchorBar*)



(*iGenerateMessageAnchorBar[sym_,seeAlso_,relatedGuides_]:=
	anchorBarCell[
		{
			"MESSAGE",
			docTypeColor["MESSAGE"]
			},
			Replace[generateSymRefs[seeAlso],{
				l:{__}:>
					{"See Also",l,"SeeAlso"},
				_\[RuleDelayed]Sequence@@{}
				}],
			Replace[generateGuideRefs[relatedGuides],{
				l:{__}:>
					{
						"Related Guides",
						l,
						"MoreAbout"
						},
				_\[RuleDelayed]Sequence@@{}
				}],
			Replace[generateUrlRefs[sym],{
				l:{__}:>
					{ "URL",l,"URLMenu"},
				_\[RuleDelayed]Sequence@@{}
				}]
		];
iGenerateMessageAnchorBar~SetAttributes~HoldAll*)


(* ::Subsubsection::Closed:: *)
(*TitleCell*)



(*iGenerateMessageTitleCell[sym_]:=
	Cell[
		docSymbolNameToString[sym],
		"ObjectName"
		];
iGenerateMessageTitleCell~SetAttributes~HoldFirst;*)


(* ::Subsubsection::Closed:: *)
(*Details*)



(*iGenerateMessageDetails[
	sym:HoldPattern[MessageName[msgHead_,msgName_]],
	details:{___}
	]:=
	With[{c=
		generateDetailsSection/@details
		},
		openerCellGroup[
			{
				Cell[TextData@"Details","NotesFrameText"],
				"NotesSection"
				},
			Cell[
				BoxData[
					TemplateBox[
						Flatten@{
							msgHead,msgName,
							ToExpression[sym],
							 "\"`1` called with `2` arguments; 1 argument is expected.\"",
							 2,0,0,0,
							 "Local"
							},
						 "MessageTemplate"
						 ]
					], 
				"Message", "MSG",
				CellMargins->{{-20 + Inherited, Inherited}, {Inherited, Inherited}}
				],
			c
			]
		];
iGenerateMessageDetails~SetAttributes~HoldAllComplete*)


(* ::Subsubsection::Closed:: *)
(*Footers*)



(*iGenerateMessageFooter[seeAlso_,guides_,tutorials_,links_,note_]:=
	iGenerateFooter[seeAlso,guides,tutorials,links,note];
iGenerateMessageFooter~SetAttributes~HoldFirst;*)


(* ::Subsubsection::Closed:: *)
(*Metadata*)



(*iGenerateMessageMetadata[msg:HoldPattern[MessageName[msgHead_,_],ops___]:=
	With[{s=ToString@Unevaluated[msg]},
		docMetadata@
			DeleteDuplicatesBy[First]@{
				ops,
				"Context"\[Rule]DocLinkBase[msgHead],
				"Keywords"\[Rule]StringSplit[s,"::"],
				"Label"\[Rule]"Message",
				"Summary"\[Rule]s,
				"Title"\[Rule]s,
				"WindowTitle"\[Rule]s,
				"Type"\[Rule]"MESSAGE",
				"URI"\[Rule]StringTrim[pacletLinkBuild[s],"paclet:"]
				}
		];
iGenerateMessageMetadata~SetAttributes~HoldFirst*)


(* ::Subsubsection::Closed:: *)
(*iGenerateMessagePages*)



(*iGenerateMessagePages[
	msg:HoldPattern[MessageName[msgHead_,msgName_]],
	details_,examples_,
	seeAlso_,relatedGuides_,
	relatedTutorials_,relatedLinks_,
	footer_]:=
	Block[{cid=1},
		docGenBlock@
			With[{
				cells=
					{
						iGenerateMessageAnchorBar[msg,seeAlso,relatedGuides],
						iGenerateMessageTitleCell[msg],
						iGenerateMessageDetails[msg,details],
						iGenerateMessageExamples[msg,examples],
						iGenerateMessageFooter[
							seeAlso,relatedGuides,
							relatedTutorials,relatedLinks,
							footer
							]
						}
				},
				Notebook[cells//.Cell[e__,l:Except[CellID\[Rule]_]]\[RuleDelayed]
					RuleCondition[
						With[{cnew=(cid++)},
							Cell[e,l,CellID\[Rule]cnew]
							],
						True
						],
					StyleDefinitions\[Rule]
						Notebook[{
							Cell[
								StyleData[
									StyleDefinitions->
										FrontEnd`FileName[{"Wolfram"},
											"Reference.nb",CharacterEncoding\[Rule]"UTF-8"]
									]
								],
							Cell[StyleData["Notebook"],
								DockedCells\[Rule]
									{
										First@
											FrontEndResource["FEExpressions","HelpViewerToolbar"],
										Cell["",
											CellSize\[Rule]{1,1},
											CellOpen\[Rule]False,
											CellFrame\[Rule]{{0,0},{2,0}},
											CellFrameColor\[Rule]docTypeColor["MESSAGE"]
											]
										}
								],
							Cell[StyleData["DockedCell"],
								CellFrame\[Rule]{{0,0},{1,0}},
								CellFrameColor\[Rule]docTypeColor["MESSAGE"]
								]
							}],
						TaggingRules\[Rule]{
							"ColorType"\[Rule]"SymbolColor",
							"ModificationHighlight"\[Rule]False,
							"LinkTrails"\[Rule]"",
							"HasOptions"\[Rule]
								(Not@FreeQ[cells,Cell["Options","ExampleSection"]]),
							"SearchTextTranslated" -> "",
							"Metadata"->
								iGenerateMessageMetadata[msg],
							"NewStyles"\[Rule]True,
							"Openers"\[Rule]
								Replace[
									(First@First@#\[Rule]Map[Last@First@#\[Rule]Last@#&,Last@#]&)/@
										Normal[
											DeleteDuplicates/@GroupBy[
												Cases[cells,
													HoldPattern[
														CurrentValue[_,{TaggingRules,"Openers",data__},___]
														]:>
														RuleCondition[
															With[{d={data}},
																d->
																	If[
																		MatchQ[d,
																			{"PrimaryExamplesSection"}|
																			{"ExampleSection","0"}
																			],
																		Open,
																		Closed
																		]
																],
															True
															],
													\[Infinity]
													],
												First]
											],
									(c_\[Rule]{c_\[Rule]s_})\[RuleDelayed](c\[Rule]s),
									1
									]
							},
						Saveable\[Rule]False
						]
					]
		];
iGenerateMessagePages~SetAttributes~HoldAll;*)


(* ::Subsubsection::Closed:: *)
(*MessagePageNotebook*)



(*Options[MessageNotebook]={
	"Details"\[Rule]Automatic,
	"Examples"\[Rule]None,
	"SeeAlso"\[Rule]Automatic,
	"RelatedGuides"\[Rule]{},
	"RelatedTutorials"\[Rule]{},
	"RelatedLinks"\[Rule]{},
	"Footer":>
		Replace[$DocFooter,
			Except[_String|_TextData]:>
				"Auto-Generated Documentation"
			]
	};
SymbolPageNotebook[s_Symbol,ops:OptionsPattern[]]:=
	With[{
		seeAlso=
			Replace[OptionValue@"SeeAlso",
				Automatic:>
					ToExpression[relatedFunctionNames[s],StandardForm,Hold]
				],
		guides=OptionValue@"RelatedGuides",
		tutorials=OptionValue@"RelatedTutorials",
		links=OptionValue@"RelatedLinks",
		details=
			Replace[OptionValue@"Details",
				Automatic:>
					scrapeDetails@AutoGenerateDetails[s]
				],
		examples=
			Replace[OptionValue@"Examples",{
				Automatic\[RuleDelayed]
					scrapeExamples@AutoGenerateExamples[s],
				Defer:>
					scrapeExamples@AutoGenerateExamples[s,True]
				}],
		usage=
			Replace[OptionValue@"Usage",
				Automatic\[RuleDelayed]
					scrapeUsages@AutoGenerateUsage[s]
				],
		footer=OptionValue@"Footer"
		},
		iGenerateSymbolPages[s,usage,details,examples,
			seeAlso,guides,tutorials,links,footer]
		];
SymbolPageNotebook[s_String,ops:OptionsPattern[]]:=
	With[{ns=Names[s]},
		If[Length@ns===0||Length@ns>1,
			DocContextTemplate@s,
			ToExpression[s,StandardForm,
				GeneralUtilities`HoldFunction[
					SymbolPageNotebook[#,ops]
					]
				]
			]
		]
SymbolPageNotebook~SetAttributes~HoldFirst;*)


(* ::Subsubsection::Closed:: *)
(*AutoGenerateMessageExamples*)



(*AutoGenerateMessageExamples[msg_]:=

AutoGenerateMessageExamples[
	e:Except[_Symbol]?(MatchQ[#,_Symbol]&)
	]:=
	AutoGenerateMessageExamples[System`Evaluate@e];
AutoGenerateMessageExamples~SetAttributes~HoldFirst*)


(* ::Subsubsection::Closed:: *)
(*AutoGenerateMessageDetails*)



(*AutoGenerateMessageDetails[message_]:=

AutoGenerateMessageDetails[s:Except[_Symbol]?(MatchQ[#,_Symbol]&)]:=
	AutoGenerateMessageDetails@System`Evaluate@s;
AutoGenerateMessageDetails~SetAttributes~HoldFirst;*)


(* ::Subsubsection::Closed:: *)
(*scrapeMessageDetails*)



(*scrapeMessageDetails[details_]:=
	With[{baseData=
		Replace[#,
			{
				Cell[bd_,"DetailsItem",___]:>
					bd,
				Cell[bd_,"DetailsRow",___]:>
					"Row"\[Rule]bd,
				Cell[bd_,"DetailsColumn",___]:>
					"Col"\[Rule]bd
				},
			1]&@
		Replace[parseRefText[details],
			{
				td_TextData:>
					RawBoxes@Cell[td,"InlineFormula"]
				}]
		},
			Replace[SplitBy[baseData,Head],{
				r:{__Rule}:>
					Map[Last]/@SequenceCases[r,{"Row"\[Rule]_,("Col"\[Rule]_)...}],
				items:{__}:>
					Sequence@@items
				},
				1]
		];*)


(* ::Subsubsection::Closed:: *)
(*scrapeExamples*)



(*scrapeMessageExamples[examples_]:=
	Replace[
		DeleteCases[{"- BreakPoint -"..}]@
		SplitBy[
			Replace[
				DeleteCases[{"- ExampleBreak -"..}]@
				SplitBy[
					Replace[NotebookTools`FlattenCellGroups@examples,{
						Cell[n_,"ExampleSection",___]:>
							Sequence@@{"- BreakPoint -",n\[Rule]n},
						Cell[t_,"ExampleText",___]\[RuleDelayed]
							parseRefText[t],
						Cell["Delimiter"|"----"|""|BoxData["Delimiter"],___]|
							Cell[_,"ExampleDelimiter",___]:>
							Delimiter,
						c:Cell[_,"ExamplesInput",___]:>
							Sequence@@{"- ExampleBreak -",c},
						c:Cell[_,"ExamplesOutput",___]:>
							Sequence@@{c,"- ExampleBreak -"}
						},
						1],
					MatchQ["- ExampleBreak -"]
					],
				{
					e:Except[
						{Cell[_,"ExamplesInput",___]}|
						{Cell[_,"ExamplesOutput",___]}|
						{Cell[_,"ExamplesInput",___],Cell[_,"ExamplesOutput",___]}
						]:>
						Sequence@@Flatten@{e}
					},
				1],
			MatchQ["- BreakPoint -"]
			],{
		{n_\[Rule]_,e__}:>
			n\[Rule]
				Replace[{e},
					{
						{Cell[ex_,"ExamplesInput",r___]}|
							Cell[ex_,"ExamplesInput",r___]\[RuleDelayed]
							Cell[ex,"Input",r],
						{Cell[e2_,"ExamplesOutput",r2___]}|
							Cell[e2_,"ExamplesOutput",r2___]:>
							Cell[e2,"Output",r2],
						{Cell[e1_,"ExamplesInput",r1___],Cell[e2_,"ExamplesOutput",r2___]}:>
							Sequence@@
								{
									Cell[e1,"Input",r1],
									Cell[e2,"Output",r2]
									}
						},
					1],
		e:{__}:>
			"Basic Examples"\[Rule]
				Replace[e,
					{
						{Cell[ex_,"ExamplesInput",r___]}|
							Cell[ex_,"ExamplesInput",r___]\[RuleDelayed]
							Cell[ex,"Input",r],
						{Cell[e2_,"ExamplesOutput",r2___]}|
							Cell[e2_,"ExamplesOutput",r2___]:>
							Cell[e2,"Output",r2],
						{
							Cell[e1_,"ExamplesInput",r1___],
							Cell[e2_,"ExamplesOutput",r2___]
							}:>
							Sequence@@
								{
									Cell[e1,"Input",r1],
									Cell[e2,"Output",r2]
									}
						},
					1]
		},
		1]*)


(* ::Subsubsection::Closed:: *)
(*scrapeMessagePageTemplate*)



scrapeMessagePageChunk[c:{__Cell}]:=
	docGenBlock@
		With[{
			msg=FirstCase[c,Cell[m_,___,"DocSection",___]:>m],
			details=
				Cases[c,
					Cell[__,
						"DetailsItem"|"DetailsRow"|"DetailsColumn",
						___]
					],
			examples=
				Cases[c,
					Cell[__,
						"ExampleSection"|"ExampleSubsection"|
						"ExampleText"|"ExamplesInput"|"ExampleDelimiter"|
						"ExamplesOutput",
						___]
					],
			guides=
				Cases[c,Cell[__,"RelatedGuide",___]],
			tutorials=
				Cases[c,Cell[__,"RelatedTutorial",___]],
			links=
				Cases[c,Cell[__,"RelatedLink",___]],
			seeAlso=Cases[c,Cell[__,"SeeAlso",___]]
			},
			{
				"Message"->msg,
				"Details"->
					scrapeMessageDetails@details,
				"Examples"->
					scrapeMessageExamples@examples,
				"RelatedGuides"->
					Replace[First/@guides,{
						s_String:>
							Replace[StringSplit[s," | "],{
								{str_}:>
									str->str,
								{l_,g_}:>
									l->g
								}],
						_->Nothing
						},
						1],
				"RelatedTutorials"->
					Replace[First/@tutorials,{
						s_String:>
							Replace[StringSplit[s," | "],{
								{str_}:>
									str->str,
								{l_,g_}:>
									l->g
								}],
						_->Nothing
						},
						1],
				"RelatedLinks"->
					Replace[First/@links,{
						s_String:>
							Replace[StringSplit[s," | "],{
								{str_}:>
									str->str,
								{l_,g_}:>
									l->g
								}],
						_->Nothing
						},
						1],
				"SeeAlso"->
					Replace[First/@seeAlso,{
						s_String?(StringMatchQ["* -> *"]):>
							Rule@@StringSplit[s," -> "],
						s_String?docSymStringPat:>
							ToExpression[s,StandardForm,Hold],
						_->Nothing
						},
						1],
				"Footer"->
					Replace[$DocFooter,
						Except[_String|_TextData]:>
							("Generated on  "<>DateString[])
						],
				WindowTitle->Last@StringSplit[sym,"`"]
				}
			];


scrapeMessagePageTemplate[c:{__Cell}]:=
	With[{cells=NotebookTools`FlattenCellGroups@c},
		scrapeMessagePageChunk@cells[[#]]&/@
			Replace[
				Flatten@Position[cells,Cell[__,"DocSection",___]],{
					i:{__}:>
						Span@@@Partition[Riffle[i,Append[Rest@i-1,-1]],2]
				}]
		]


scrapeMessagePageTemplate[cells:{__CellObject}]:=
	scrapeMessagePageTemplate[NotebookRead/@cells];
scrapeMessagePageTemplate[nb_NotebookObject]:=
	scrapeMessagePageTemplate@
		Replace[NotebookRead@nb,{
			c_Cell:>
				{c},
			c:{__Cell}:>
				c,
			_:>
				Cells@nb
			}];


(* ::Subsubsection::Closed:: *)
(*GenerateMessagePages*)



Options[GenerateMessagePages]=
	Join[
		Options[MessagePageNotebook],
		Options[CreateDocument],{
			"PostFunction"->None,
			Monitor->False
		}
		];
GenerateMessagePages[s_Symbol,ops:OptionsPattern[]]:=
	Block[{
		$Context=$docGen,
		$ContextPath=
			Join[$ContextPath,
				{Context@s,$Context}
				],
		makeRefOverrides=
			Join[
				makeRefOverrides,{
				ToString@Unevaluated@s,
				SymbolName@Unevaluated@s
				}],
		postFunc=
			OptionValue["PostFunction"]
		},
		If[MatchQ[OwnValues[s],{_:>(_PackageLoadPackage)}],
			s
			];
		CheckAbort[
			$DocGenLine=1;
			If[postFunc=!=None,
				postFunc,
				Identity
				]@
			CreateDocument[
				MessagePageNotebook[s,
					FilterRules[{ops},Options@MessagePageNotebook]
					],
				FilterRules[{ops},Options@CreateDocument],
				WindowTitle->(
					Last@
						StringSplit[
							ToString@Unevaluated[s],
							"`"
							]<>" - Documentation"),
				System`ClosingSaveDialog->False
				],
			If[$Context==$docGen,End[]]
			]
		];
GenerateMessagePages[namePattern_String,ops:OptionsPattern[]]:=
	Block[{
		$DocActive=
			If[StringMatchQ[namePattern,"*`"],
				StringTrim[namePattern,"`"],
				$DocActive
				],
		makeRefOverrides=
			contextNames[namePattern]
		},
		Block[{docGenCounter=0,nms=contextNames[namePattern<>"*"]},
			If[Length@nms>5,
				Monitor[
					ToExpression[
						nms,
						StandardForm,
						GeneralUtilities`HoldFunction[
							docGenCounter++;
							GenerateSymbolPages[#,ops]
							]
						],
					Internal`LoadingPanel@
						TemplateApply[
							"Generating page `` of ``",
							{docGenCounter,Length@nms}
							]
					],
				ToExpression[
					nms,
					StandardForm,
					GeneralUtilities`HoldFunction[
						GenerateSymbolPages[#,ops]
						]
					]
				]
			]
		];
GenerateMessagePages~SetAttributes~HoldFirst;


GenerateMessagePages[nb_NotebookObject,
	ops:OptionsPattern[]
	]:=
	Block[{
		monit=TrueQ@OptionValue[Monitor],
		sym,
		scrape
		},
		With[{
			data=scrapeMessagePageTemplate@nb
			},
			If[Length@data>0,
				sym=Lookup[First@data,"Symbol"]
				];
			If[monit,
				Function[Null,
					Monitor[#,
						If[StringQ@sym,
							Internal`LoadingPanel[
								TemplateApply[
									"Generating page for ``",
									sym
									]
								],
							""
							]
						],
					HoldFirst
					],
				Identity
				][
				Map[
					Function[
						sym=Lookup[#,"Symbol"];
						scrape=#;
						ToExpression[sym,StandardForm,
							Function[Null,
								Block[{$DocGenLine=0},
									GenerateMessagePages[#,
										DeleteCases[scrape,"Symbol"->_],
										ops
										]
									],
								HoldFirst
								]
							]
						],
					data
					]
				]
			]
		];
GenerateMessagePages[
	nb:
		_EvaluationNotebook|_InputNotebook|_CreateDocument:
		EvaluationNotebook[],
	ops:OptionsPattern[]
	]:=
	GenerateMessagePages[Evaluate@nb,ops];


(* ::Subsubsection::Closed:: *)
(*SaveMessagePages*)



(*Options[SaveSymbolPages]=
	Options[GenerateSymbolPages];
SaveSymbolPages[
	doc:_String|_Symbol|{__String}|
		_NotebookObject|{__NotebookObject}|
		_EvaluationNotebook|_InputNotebook|_ButtonNotebook,
	dir_String?DirectoryQ,
	extension:True|False:True,
	ops:OptionsPattern[]
	]:=
	GenerateSymbolPages[doc,
		FilterRules[{
			Visible\[Rule]False,
			ops,
			"PostFunction"\[Rule]
				(
					(
						saveSymbolPages[#,dir,extension,ops];
						NotebookClose[#]
						)&
					)
			},
			Options@GenerateSymbolPages
			]
		];
saveSymbolPages[
	nb:_NotebookObject|{__NotebookObject}|
		_EvaluationNotebook|_InputNotebook|_ButtonNotebook,
	dir_String?DirectoryQ,
	extension:True|False:True,
	ops:OptionsPattern[]
	]:=
	(
		Quiet@CreateDirectory[
			FileNameJoin@{
				dir,
				If[extension,
					Sequence@@{
						"ReferencePages",
						"Symbols"
						},
					Nothing
					]
				},
			CreateIntermediateDirectories\[Rule]True
			];
		Map[
			Replace[
				CurrentValue[
					#,
					{TaggingRules,"Metadata","uri"}
					],
				s_String:>
					{
						Export[
							FileNameJoin@{
								dir,
								If[extension,
									Sequence@@{
										"ReferencePages",
										"Messages"
										},
									Nothing
									],
								Last@URLParse[s,"Path"]<>".nb"
								},
							DeleteCases[NotebookGet@#,Visible\[Rule]_]
							]
						}
				]&,
			Flatten@{nb}
		]
		);
SaveSymbolPages[
	doc_?(MatchQ[#,String|_Symbol|{__String}]&),
	dir_String?DirectoryQ,
	extension:True|False:True,
	ops:OptionsPattern[]
	]:=
	SaveSymbolPages[Evaluate@doc,dir,extension,ops];
SaveSymbolPages~SetAttributes~HoldFirst*)




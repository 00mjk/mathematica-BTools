(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Text:: *)
(*Layer on top of lower-level clumsier implementation*)



$PacletExecuteSettings::usage=
	"Settings for PacletExecute and PacletTools";
PacletExecute::usage=
	"Wrapper for all paclet actions";


PackageScopeBlock[
	PacletExecuteSettingsLookup::usage=
		"Lookup on the $PacletExecuteSettings"
	]


Begin["`Private`"];


PacletExecuteSettingsLookup[key_]:=
	Lookup[$PacletExecuteSettings, key];
PacletExecuteSettingsLookup[key_, default_]:=
	Lookup[$PacletExecuteSettings, key, default];


(* ::Subsubsection::Closed:: *)
(*Settings*)



If[!AssociationQ@$PacletExecuteSettings,
	$PacletExecuteSettings=
		<|
			"BuildRoot"->
				$TemporaryDirectory,
			"BuildExtension"->
				"_paclets",
			"ServerDefaults":>
				<|
					"ServerBase"->
						$WebSiteDirectory,
					"ServerExtension"->
						Nothing,
					"ServerName"->
						"PacletServer",
					Permissions->
						"Public",
					CloudConnect->
						"PacletsAccount"
					|>,
			"ServerBase"->CloudObject,
			"UseKeychain"->False,
			"FormatPaclets"->False,
			"FilePattern"->
				(_String|_URL|_File|_PacletManager`Paclet)|
				(
					(_String|_PacletManager`Paclet)->
						(_String|_URL|_File|_PacletManager`Paclet)
					),
			"UploadPattern"->
				(_String|_URL|_File|{_String,_String}|_PacletManager`Paclet)|
					Rule[
						_String|_PacletManager`Paclet,
						(_String|_URL|_File|{_String,_String}|_PacletManager`Paclet)
						],
			"RemovePattern"->
				{_String,_String}|PacletManager`Paclet|_String
			|>
		]


If[$pacletConfigLoaded//TrueQ//Not,
	Replace[
		SelectFirst[
			PackageFilePath["Private", "Config", "PacletConfig."<>#]&/@{"m","wl"},
			FileExistsQ
			],
			f_String:>Get@f
		]
	];
$pacletConfigLoaded=True


(* ::Subsubsection::Closed:: *)
(*PacletExecute*)



$PacletExecuteExpressionMethods=
	<|
		"Paclet"->
			PacletInfo,
		"Association"->
			PacletInfoAssociation,
		"GeneratePacletInfo"->
			PacletInfoExpression,
		"AutoGeneratePaclet"->
			PacletAutoPaclet,
		"Bundle"->
			PacletBundle,
		"Lookup"->
			PacletLookup,
		"Open"->
			PacletOpen,
		"SetFormatting"->
			SetPacletFormatting
		|>;


$PacletExecuteSiteMethods=
	<|
		"PacletSite"->
			PacletSiteInfo,
		"URL"->
			PacletSiteURL,
		"SiteDataset"->
			PacletSiteInfoDataset,
		"SiteBundle"->
			PacletSiteBundle
		|>;


$PacletExecuteUploadMethods=
	<|
		"Upload"->
			PacletUpload,
		"Remove"->
			PacletRemove,
		"SiteUpload"->
			PacletSiteUpload,
		"APIUpload"->
			PacletAPIUpload,
		"Install"->
			PacletInstallPaclet,
		"FindPacletFile"->
			builtPacletFileFind
		|>;


$PacletExecuteMethods=
	Join[
		$PacletExecuteExpressionMethods,
		$PacletExecuteSiteMethods,
		$PacletExecuteUploadMethods
		]


(* ::Text:: *)
(*
	This is handles the discovery stuff
*)



PacletExecute[
	method_?(KeyExistsQ[$PacletExecuteMethods, #]&),
	Optional["Function", "Function"]
	]:=
	$PacletExecuteMethods[method];
PacletExecute[
	method_?(KeyExistsQ[$PacletExecuteMethods, #]&),
	"Options"
	]:=
	Options@Evaluate@$PacletExecuteMethods[method];


(* ::Text:: *)
(*
	This is the interface for all the basic stuff
*)



PacletExecute[
	method_?(KeyExistsQ[$PacletExecuteExpressionMethods, #]&),
	pac:_String|{_String, _String}|_PacletManager`Paclet|{__PacletManager`Paclet},
	args___
	]:=
	With[{fn=$PacletExecuteExpressionMethods[method]},
		With[{res=fn[pac, args]},
			res/;Head[res]=!=fn
			]
		];


(* ::Text:: *)
(*
	This is the interface for all the site stuff
*)



$PacletFilePatterns:=
	PacletExecuteSettingsLookup[
		"FilePattern",
		(_String|_URL|_File|_PacletManager`Paclet)|
		(
			(_String|_PacletManager`Paclet)->
				(_String|_URL|_File|_PacletManager`Paclet)
			)
		];
PacletExecute[
	method_?(KeyExistsQ[$PacletExecuteSiteMethods, #]&),
	pac:$PacletFilePatterns|None:None,
	args___?OptionQ
	]:=
	With[{fn=$PacletExecuteSiteMethods[method]},
		With[{res=fn[If[pac===None, Sequence@@{}, pac], args]},
			res/;Head[res]=!=fn
			]/;pac=!=None||Length@{args}>0
		];


(* ::Text:: *)
(*
	This does the upload stuff
*)



$PacletSpecPattern:=
	PacletExecuteSettingsLookup[
		"UploadPattern",
		(_String|_URL|_File|{_String,_String}|_PacletManager`Paclet)|
			Rule[
				_String|_PacletManager`Paclet,
				(_String|_URL|_File|{_String,_String}|_PacletManager`Paclet)
				]
		];
$PacletUploadPatterns:=
	$PacletSpecPattern|{$PacletSpecPattern..}
PacletExecute[
	method_?(KeyExistsQ[$PacletExecuteUploadMethods, #]&),
	pac:$PacletUploadPatterns,
	args___
	]:=
	With[{fn=$PacletExecuteUploadMethods[method]},
		With[{res=fn[pac, args]},
			res/;Head[res]=!=fn
			]
		];


PackageAddAutocompletions[
	"PacletExecute",
	{
		Keys@$PacletExecuteMethods,
		Join[
			{"Function", "Options"},
			AppNames[]
			]
		}
	]


End[];




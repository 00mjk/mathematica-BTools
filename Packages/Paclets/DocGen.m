(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Text:: *)
(*Layer on top of lower-level clumsier implementation*)



$DocGenSettings::usage=
	"Settings for documentation generation";
DocGen::usage=
	"Generates various types of documentation";


Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*Settings*)



If[!TrueQ@$docGenInitialized,
	$DocGenBuildPermanent=
		False;
	If[FileExistsQ@PackageFilePath["Private", "DocGenConfig.wl"],
		Get@PackageFilePath["Private", "DocGenConfig.wl"]
		];
	$docGenInitialized=False
	];


If[!AssociationQ@$DocGenSettings,
	$DocGenSettings=
		<|
			Default->
				<|
					"PacletsDirectory"->
						If[$DocGenBuildPermanent//TrueQ,
							FileNameJoin@{
								$UserBaseDirectory,
								"ApplicationData",
								"DocGen",
								"Paclets"
								},
							FileNameJoin@{$TemporaryDirectory, "doc_paclets"}
							],
					"WebDirectory"->
						If[$DocGenBuildPermanent//TrueQ,
							FileNameJoin@{
								$UserBaseDirectory,
								"ApplicationData",
								"DocGen",
								"Web"
								},
							FileNameJoin@{$TemporaryDirectory, "web_docs"}
							],
					"NameColoring"->
						{
							"BUILT-IN SYMBOL"->RGBColor[0.023529, 0.427451, 0.729412],
							"GUIDE"->RGBColor[0.8, 0.4, 0],
							"TUTORIAL"->RGBColor[0.641154, 0.223011, 0.0623026],
							"MESSAGE"->RGBColor[0.86667, 0.06667, 0.],
							"PACKAGE"->Hue[0.6, 0.3, 0.7],
							"IMPORT/EXPORT FORMAT"->GrayLevel[0.541176],
							_?(Evaluate@StringStartsQ[$PackageName])->Hue[0.5754716981132075, 0.654320987654321, 0.6328125],
							"Global":>
								CurrentValue[
									$FrontEndSession,
									{AutoStyleOptions, "UndefinedSymbolStyle", FontColor},
									RGBColor[0., 0.173, 0.765]
									]
							},
					"LinkStyle"->
						{
							"System"->
								"RefLink",
							"Global"->
								"RefLink",
							_->
								"PackageLink"
							},
					"LinkBase"->
						{
							"System"->
								Nothing
							},
					"Footer"->Automatic
					|>
			|>
	];


(* ::Subsubsection::Closed:: *)
(*DocGen*)



$DocGenMethodRouter=
	<|
		"SymbolPage"->
			<|
				Automatic->
					DocGenGenerateSymbolPages,
				"Save"->
					DocGenSaveSymbolPages,
				"Template"->
					SymbolPageTemplate,
				"Notebook"->
					SymbolPageNotebook
				|>,
		"Guide"->
			<|
				Automatic->
					DocGenGenerateGuide,
				"Save"->
					DocGenSaveGuide,
				"Template"->
					GuideTemplate,
				"Notebook"->
					GuideNotebook
				|>,
		"Tutorial"->
			<|
				Automatic->
					DocGenGenerateTutorial,
				"Save"->
					DocGenGenerateTutorial,
				"Template"->
					TutorialTemplate,
				"Notebook"->
					TutorialNotebook
				|>,
		"Paclet"->
			DocGenGenerateDocumentation,
		"HTML"->
			DocGenGenerateHTMLDocumentation,
		"Index"->
			DocGenIndexDocumentation
		|>;


DocGen//Clear
Options[DocGen]=
	{Method->Automatic};
DocGen::badmeth=
	"Method `` for documentation type `` unknown. Acceptable methods are ``.";
DocGen::nogen=
	"Couldn't generate documentation of type `` for object ``";
DocGen[
	type:_?(KeyExistsQ[$DocGenMethodRouter, #]&):"SymbolPage",
	docObj:Except[_Rule|_RuleDelayed|{(_Rule|_RuleDelayed), ___}],
	ops:OptionsPattern[]
	]:=
	Module[
		{
			meth=Lookup[{ops}, Method, Automatic],
			methOps={},
			fun,
			res
			},
		If[ListQ@meth, 
			methOps=Select[meth, OptionQ];
			meth=SelectFirst[meth, Not@*OptionQ]
			];
		fun=$DocGenMethodRouter[type];
		If[AssociationQ@fun,
			fun=fun[meth]
			];
		If[MissingQ@fun,
			Message[DocGen::badmeth,
				meth,
				type,
				Keys@$DocGenMethodRouter[type]
				];
			res=fun["Sad sad sad"],
			res=
				Which[
					type==="Paclet",
						fun[docObj, 
							Lookup[methOps, 
								Directory,
								Automatic
								],
							Lookup[methOps,
							 "OpenOnBuild",
							 True
							 ],
							Evaluate@FilterRules[{ops}, Options@fun]
							],
					type==="HTML",
						fun[
							Lookup[methOps, 
								Directory,
								Automatic
								],
							docObj,
							Evaluate@FilterRules[{ops}, Options@fun]
							],
					meth==="Save",
						fun[docObj, 
							Lookup[methOps, 
								Directory,
								$DocGenDirectory
								],
							Lookup[methOps,
							 Extension,
							 True
							 ],
							Evaluate@FilterRules[{ops}, Options@fun]
							],
					True,
						fun[docObj, Evaluate@FilterRules[{ops}, Options@fun]]
					];
			If[Head[res]===fun, 
				Message[DocGen::nogen,
					type,
					HoldForm[docObj]
					]
				];
			];
		res/;Head[res]=!=fun
		];
DocGen~SetAttributes~HoldRest


PackageAddAutocompletions[
	"DocGen",
	{Keys@$DocGenMethodRouter}
	]


End[];




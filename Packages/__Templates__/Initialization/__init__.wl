(* ::Package:: *)

(* ::Title:: *)
(*$Name`*)


(* ::Text::GrayLevel[0.5]:: *)
(* Autogenerated $Name loader file *)


BeginPackage["$Name`"];


(* ::Subsubsection::Closed:: *)
(*$ContextPath*)


$ContextPath=
	Join[$ContextPath,
		"$Name`"<>
			StringReplace[
				FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
				$PathnameSeparator->"`"
				]&/@
			Select[
				DirectoryQ@#&&
					StringMatchQ[
						StringReplace[
							FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
							$PathnameSeparator->"`"
							],
						("$"|WordCharacter)..
						]
				&]@
			FileNames["*",
				FileNameJoin@{
					DirectoryName@$InputFileName,
					"Packages"
					},
				Infinity
				]
		]


(* ::Section:: *)
(* Package Functions *)


Unprotect["`Private`Package`*"];
Begin["`Private`Package`"];


$InitCode


(* ::Subsection::Closed:: *)
(* End[] *)


End[];


(* ::Section:: *)
(* Load *)


(* ::Subsubsection::Closed:: *)
(*Basic Load*)


`Private`Package`$loadAbort=False;
CheckAbort[
	`Private`Package`PackageFEHiddenBlock[
		`Private`Package`PackageAppLoad[]
		],
	`Private`Package`$loadAbort=True;
	EndPackage[]
	];
Protect["`Private`Package`*"];
Unprotect[`Private`Package`$loadAbort];


(* ::Subsubsection::Closed:: *)
(*Exposed Packages*)


Unprotect[
	`Private`Package`$PackagePreloadedPackages,
	`Private`Package`$PackageHiddenPackages,
	`Private`Package`$PackageHiddenContexts
	];
If[(Clear@`Private`Package`$loadAbort;!#)&@`Private`Package`$loadAbort,
	If[$Notebooks,
		If[FileExistsQ@`Private`Package`PackageFilePath["LoadInfo.m"],
			Replace[
				Quiet[
					Import@`Private`Package`PackageFilePath["LoadInfo.m"],
					Import::nffil
					],
				`Private`Package`specs:{__Rule}|_Association:>
					CompoundExpression[
						`Private`Package`$PackagePreloadedPackages=
							Replace[
								Lookup[`Private`Package`specs,"PreLoad"],
								Except[{__String}]->{}
								],
						`Private`Package`$PackageHiddenPackages=
							Replace[
								Lookup[`Private`Package`specs,"Hidden"],
								Except[{__String}]->{}
								],
						`Private`Package`$PackageHiddenContexts=
							Replace[
								Lookup[`Private`Package`specs,"PreLoad"],
								Except[{__String}]->{}
								],
						`Private`Package`PackageAppGet/@
							`Private`Package`$PackagePreloadedPackages;
						If[
							!MemberQ[`Private`Package`$PackageHiddenPackages,
								Replace[
									FileNameSplit@
										FileNameDrop[#,
											FileNameDepth@
												`Private`Package`PackageFilePath["Packages"]
											],{
									{`Private`Package`f_}:>{
										StringTrim[`Private`Package`f,".m"|".wl"]}|
										StringTrim[`Private`Package`f,".m"|".wl"],
									{`Private`Package`p__,`Private`Package`f_}:>
										{`Private`Package`p,
											StringTrim[`Private`Package`f,".m"|".wl"]}
									}]
								],
							`Private`Package`PackageFEUnhidePackage@#
							]&/@Keys@`Private`Package`$DeclaredPackages
						]
				],
			`Private`Package`PackageFEUnhidePackage/@
				Keys@`Private`Package`$DeclaredPackages
			];
		];
	EndPackage[];
	];


(* ::Subsubsection::Closed:: *)
(*Rehide Packages*)


If[
MemberQ[$Name`Private`Package`$PackageHiddenPackages,
		Replace[
			FileNameSplit@
				FileNameDrop[#,
					FileNameDepth@
						$Name`Private`Package`PackageFilePath["Packages"]
					],{
			{$Name`Private`Package`f_}:>{
				StringTrim[$Name`Private`Package`f,".m"|".wl"]}|
				StringTrim[$Name`Private`Package`f,".m"|".wl"],
			{$Name`Private`Package`p__,$Name`Private`Package`f_}:>
				{$Name`Private`Package`p,
					StringTrim[$Name`Private`Package`f,".m"|".wl"]}
			}]
		],
	$Name`Private`Package`PackageFERehidePackage@#
	]&/@Keys@$Name`Private`Package`$DeclaredPackages


(* ::Subsubsection::Closed:: *)
(*Exposed Contexts*)


$ContextPath=
	Join[
		DeleteCases[
			Alternatives@@
				Join[
					Replace[
						Flatten@{$Name`Private`Package`$HiddenContexts},
						Except[_String?(StringEndsQ["`"])]->Nothing,
						1
						],
					$ContextPath
					]
				]@
				Delete[$Name`Private`Package`$PackageContexts,{{2},{3}}],
		$ContextPath
		];
FrontEnd`Private`GetUpdatedSymbolContexts[];

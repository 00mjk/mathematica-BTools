(* ::Package:: *)

$packageHeader

CuratedDataExport::usage=
	"Exports an EntityStore as a CuratedData function backed by DataPaclets";


Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*Constants*)



dataPacletIndexNumber[padLength_,num_Integer]:=
	StringPadLeft[ToString@num,padLength,"0"];
dataPacletIndexNumber[padLength_,{num_Integer}]:=
	dataPacletIndexNumber[padLength,num];
dataPacletIndexNumber[num_]:=
	dataPacletIndexNumber[$dataPacletPartitionNumber,num];


$dataPacletVersionNumber="1.0.0";


(* ::Subsubsection::Closed:: *)
(*IndexPaclet*)



dataPacletIndexFile[
	dir:_String?DirectoryQ|Automatic:Automatic,
	dataType_String,
	entityStore:_Association|{__Association}
	]:=
	With[{
		index=
			{
				"Sources"->
					{
						"Data"->
							If[AssociationQ@entityStore,
								{
								"Part01"->
									Keys@
										entityStore["Entities"]
										},
								MapIndexed[
									"Part"<>dataPacletIndexNumber[#2]->
										Keys@#["Entities"]&,
									entityStore
									]
								]
						},
				"Properties"->
					{
						"Data"->
							Thread@List@
								DeleteCases["Label"]@
									Keys@
										If[AssociationQ@entityStore,
											entityStore,
											First@entityStore
											]["Properties"]
						}
				}
		},
		Export[
			FileNameJoin@{
				Replace[dir,
					Automatic:>
						$TemporaryDirectory
					],
				dataType<>"Data_Index",
				"Data",
				"Index.wdx"
				},
			index,
			"DataIndex"
			]
		];


dataPacletNamesIndexFile[
	dir_,
	dataType_String,
	entityStore_Association
	]:=
	With[{
		names=
			Normal@
				AssociationMap[
					{#,First@StringSplit[#,"::"]}&,
					Flatten@{
						Keys@entityStore["Entities"],
						Lookup[
							Values@entityStore["Entities"],
							"AlternateNames",
							{}
							]
						}
					]
		},
		Export[
			FileNameJoin@{
				Replace[dir,
					Automatic:>
						$TemporaryDirectory
					],
				dataType<>"Data_Index",
				"Data",
				"Names.wdx"
				},
			names
			]
		];


dataPacletEntitiesIndexFile[
	dir_,
	dataType_String,
	entityStore_Association
	]:=
	Export[
		FileNameJoin@{
			Replace[dir,
				Automatic:>
					$TemporaryDirectory
				],
			dataType<>"Data_Index",
			"Data",
			"Entities.wdx"
			},
		Compress@
			Map[
				Hash[#,"Adler32"]->#&,
				Keys@entityStore["Entities"]
				]
		];


dataPacletPropertiesIndexFile[
	dir_,
	dataType_String,
	entityStore_Association
	]:=
	With[{
		properties=
			Thread@List@
				DeleteCases["Label"]@
					Keys@entityStore["Properties"]
		},
		Export[
			FileNameJoin@{
				Replace[dir,
					Automatic:>
						$TemporaryDirectory
					],
				dataType<>"Data_Index",
				"Data",
				"Properties.wdx"
				},
			Compress@{"Data"->properties}
			];
		]


dataPacletFunctionsIndexFile[
	dir_,
	dataType_String,
	entityStore_Association
	]:=
	With[{
		functions=
			With[{computeFunction=
				Symbol@Evaluate["DataPaclets`"<>dataType<>"DataDump`ComputeFunction"]
				},
			Normal@
				ReplacePart[#,
					"Helpers":>
						(
							Normal@GroupBy[First->Last]@Flatten@#["Helpers"]
							)
					]&@
			Join[
				<|
					"Primary"->{},
					"Helpers"->{}
					|>,
				GroupBy[First->Last]@
					Replace[
						Lookup[entityStore,"Functions",{}],{
							(Verbatim[HoldPattern][p___]:>f_):>
								"Primary"->
									(
										HoldPattern[computeFunction[p]]:>f
											),
							s_Symbol:>
								With[{key=
									SymbolName@Unevaluated@s
									},
									"Helpers"->
										{
											"OwnValues"->
												(key->OwnValues[s]),
											"DownValues"->
												(key->DownValues[s]),
											"UpValues"->
												(key->UpValues[s]),
											"SubValues"->
												(key->SubValues[s])
											}
									]
						}]
				]
			]
		},
		Export[
			FileNameJoin@{
				Replace[dir,
					Automatic:>
						$TemporaryDirectory
					],
				dataType<>"Data_Index",
				"Data",
				"Functions.wdx"
				},
			Compress@functions
			];
		]


dataPacletGroupsIndexFile[
	dir_,
	dataType_String,
	entityStore_Association
	]:=
	With[{
		groups=
			Replace[entityStore["EntityClasses"],{
				l_List:>
					Normal[Keys/@l],
				_->{}
				}]
		},
		Export[
			FileNameJoin@{
				Replace[dir,
					Automatic:>
						$TemporaryDirectory
					],
				dataType<>"Data_Index",
				"Data",
				"Groups.wdx"
				},
			Compress@groups
			];
		]


dataPacletPrivateGroupsIndexFile[
	dir_,
	dataType_String,
	entityStore_Association
	]:=
	Export[
		FileNameJoin@{
			Replace[dir,
				Automatic:>
					$TemporaryDirectory
				],
			dataType<>"Data_Index",
			"Data",
			"PrivateGroups.wdx"
			},
		Compress@{}
		];


dataPacletDataFile[
	n:_Integer:1,
	dir_,
	dataType_String,
	entityStore_Association
	]:=
	With[{
		ents=
			{
				"Keys"->
					Keys@entityStore["Entities"],
				"Properties"->
					Thread@List@
						DeleteCases["Label"]@
							Keys@entityStore["Properties"],
				"Data"->
					Map[
						Replace[
							Lookup[#,
								DeleteCases["Label"]@
									Keys@entityStore["Properties"]
								],
							_Missing->Missing["NotAvailable"],
							1]&,
						entityStore["Entities"]
						],
				"Attributes"->
					{
						"CreationDate"->DateList[],
						"Signature"->228610809693471781814095222429607185306
						}
				}
		},
		Export[
			FileNameJoin@{
				Replace[dir,
					Automatic:>
						$TemporaryDirectory
					],
				dataType<>"Data_Part"<>StringPadLeft[ToString@n,2,"0"],
				"Data",
				"Part"<>dataPacletIndexNumber[n]<>".wdx"
				},
			ents,
			"DataTable"
			];
		];


CuratedDataIndexPaclet[
	dir:_String?DirectoryQ|Automatic:Automatic,
	dataType_String,
	entityStore_Association,
	pack:True|False:True
	]:=
	CompoundExpression[
		Begin["DataPaclets`CuratedDataFormattingDump`"],
		(End[];#)&@
		CheckAbort[
			Block[{
				partitions=
					Map[
						ReplacePart[entityStore,
							"Entities"->
								Association@#
							]&
						]@
						Partition[
							Normal@entityStore["Entities"],
							UpTo[
									Floor[Length@entityStore["Entities"]/
									Ceiling[ByteCount[entityStore["Entities"]]/(5*10^7)]]
									]
							],
				$dataPacletPartitionNumber
				},
				parts=
				$dataPacletPartitionNumber=
					Length@IntegerDigits@Length@partitions;
				(* ------- Prep Directories  ------- *)
				Quiet@
					CreateDirectory[
						FileNameJoin@{
							Replace[dir,	
								Automatic:>
									$TemporaryDirectory
								],
							dataType<>"Data_Index",
							"Data"
							},
						CreateIntermediateDirectories->True
						];
				(* ------- Indices -------*)
				dataPacletIndexFile[
					dir,
					dataType,
					partitions
					];
				dataPacletNamesIndexFile[dir,dataType,entityStore];
				dataPacletEntitiesIndexFile[dir,dataType,entityStore];
				dataPacletPropertiesIndexFile[dir,dataType,entityStore];
				dataPacletFunctionsIndexFile[dir,dataType,entityStore];
				dataPacletGroupsIndexFile[dir,dataType,entityStore];
				dataPacletPrivateGroupsIndexFile[dir,dataType,entityStore];
				(* ------- Data ------- *)
				MapIndexed[
					Function[
						Quiet@
							CreateDirectory[
								FileNameJoin@{
									Replace[dir,	
										Automatic:>
											$TemporaryDirectory
										],
									dataType<>
										"Data_Part"<>
											dataPacletIndexNumber[#2],
									"Data"
									},
								CreateIntermediateDirectories->True
								];
						dataPacletDataFile[First@#2,
							dir,
							dataType,
							#
							]
						],
					partitions
					];
				(* ------- Paclets  ------- *)
				If[pack,
					Quiet@
						PacletExpressionBundle[
							FileNameJoin@{
								Replace[dir,
									Automatic:>
										$TemporaryDirectory
									],
								dataType<>"Data_Index"
								},
							"Version"->$dataPacletVersionNumber
							];
					Map[
						Quiet@
							PacletExpressionBundle[
								FileNameJoin@{
									Replace[dir,
										Automatic:>
											$TemporaryDirectory
										],
									dataType<>"Data_Part"<>
										dataPacletIndexNumber[#]
									},
								"Version"->
									$dataPacletVersionNumber
								]&,
						Range[Length@partitions]
						];
					AssociationMap[
						PacletBundle@
							FileNameJoin@{
								Replace[dir,
									Automatic:>
										$TemporaryDirectory
									],
								dataType<>"Data_"<>#
								}&,
						Flatten@{
							"Index",
							Map[
								"Part"<>dataPacletIndexNumber[#]&,
								Range[Length@partitions]
								]
							}],
					<|
						"Index"->
							FileNameJoin@{
								Replace[dir,
									Automatic:>
										$TemporaryDirectory
									],
								dataType<>"Data_Index"
								},
						"Data"->
							Map[
								FileNameJoin@{
									Replace[dir,
										Automatic:>
											$TemporaryDirectory
										],
									dataType<>"Data_Part"<>dataPacletIndexNumber[#]
									}&,
								Range[Length@partitions]
								]
						|>
					]
				],
			End[]
			]
		];


(* ::Subsubsection::Closed:: *)
(*Package*)



$CuratedDataPackageTemplate:=
	Import[
		`Package`appPath[
			"Packages",
			"__Templates__",
			"$CuratedData.m"],
		"Text"
		];


CuratedDataPaclet[
	dir:_String?DirectoryQ|Automatic:Automatic,
	dataType_String,
	entityStore_Association,
	pack:True|False:True,
	ops:(_String->_String)...
	]:=
	With[{
		file=
			With[{d=
				FileNameJoin@{
					Replace[dir,
						Automatic:>
							$TemporaryDirectory
						],
					dataType<>"Data"
					}
				},
				Quiet@
					CreateDirectory[
						FileNameJoin@{d,"AutoCompletionData"},
						CreateIntermediateDirectories->True
						];
				FileNameJoin@{
					d,
					dataType<>"Data.m"
					}
				]
		},
			(* --------- Package --------- *)
			With[{fob=OpenWrite@file},
				(WriteString[fob,#];Close@fob)&@
					StringReplace[$CuratedDataPackageTemplate,{
						ops,
						"$CuratedDataProperties"->
							ToString[
								DeleteCases["Label"]@
									Keys@entityStore["Properties"],
								InputForm
								],
						"$CuratedDataLabelFunction"->
							ToString[
								Replace[
									Lookup[
										Lookup[
											entityStore["Properties"],
											"Label",
											<||>
											],
										"DefaultFunction"
										],{
									_Missing|CommonName->CanonicalName
									}],
								InputForm
								],
						"$CuratedDataDefaultProperty"->
							ToString[
								Lookup[
									entityStore,
									"DefaultProperty",
									"Entity"
									],
								InputForm
								],
						"$CuratedDataType"->dataType,
						"$CuratedData"->dataType<>"Data"
						}
					]
				];
				
			(* --------- Autocompletions --------- *)
			Export[
				FileNameJoin@{
					Replace[dir,
						Automatic:>
							$TemporaryDirectory
						],
					dataType<>"Data",
					"AutoCompletionData",
					"specialArgFunctions.tr"
					},
				StringReplace[
					Import[
						`Package`appPath[
							"Packages",
							"__Templates__",
							"$CuratedDataCompletions.tr"
							],
						"Text"
						],
					{
						"$CuratedDataEntities"->
							ToString[
								Function[
									DeleteDuplicates@
										Join[
											Map[First@StringSplit[#,"::"]&,#],
											#]
									]@
									SortBy[
										Keys@entityStore["Entities"],
										StringLength
										],
								InputForm
								],
						"$CuratedDataProperties"->
							ToString[
								SortBy[
									DeleteCases["Label"]@
										Keys@entityStore["Properties"],
									StringLength
									],
								InputForm
								],
						"$CuratedData"->dataType<>"Data"
						}],
				"Text"
				];
			If[pack,
				(
					PacletExpressionBundle[#,"Version"->$dataPacletVersionNumber];
					PacletBundle[#]
					)&@
					FileNameJoin@{
						Replace[dir,
							Automatic:>
								$TemporaryDirectory
							],
						dataType<>"Data"
						},
				FileNameJoin@{
						Replace[dir,
							Automatic:>
								$TemporaryDirectory
							],
						dataType<>"Data"
						}
				]
		]


(* ::Subsubsection::Closed:: *)
(*Export*)



CuratedDataExport[
	dir:_String?DirectoryQ|Automatic:Automatic,
	dataType_String,
	entityStore_Association,
	pack:True|False:True
	]:=
	 Prepend[
	 	"Package"->
	 		CuratedDataPaclet[dir,
	 			dataType,
	 			entityStore,
	 			pack,
	 			"$CuratedDataDefaultProperty"->
	 				Lookup[entityStore,
	 					"DefaultProperty",
	 					(*First@DeleteCases["Label"]@
	 						Keys@entityStore["Properties"]*)
	 					"Entity"
	 					]
	 			]
	 		]@
		 	CuratedDataIndexPaclet[dir,
		 		dataType,
		 		entityStore,
		 		pack
		 		];
CuratedDataExport[
	dir:_String?DirectoryQ|Automatic:Automatic,
	entityStore_EntityStore,
	pack:True|False:True
	]:=
	Association@
		KeyValueMap[
			#->
				CuratedDataExport[dir,#,#2,pack]&,
			entityStore[[1,"Types"]]
			]


End[];




(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



JSONTree::usage="Formats a JSON object as a tree";


JSONLookup::usage="Looks up attributes in a JSON object or object set";


JSONObject::usage=
	"Mutable JSON object for eason of manipulation. Can be renormalized out to plain JSON.";


SSHKeys::usage=
	"Lists the available SSH keys";
SSHKnownHosts::usage=
	"Lists the available known_hosts";
SSHAddHost::usage=
	"Adds a host to a host file";
SSHKeyCreate::usage=
	"Configures an SSH key pair in a given directory";
SSHConfigure::usage=
	"Configures an SSH tunnel to a given server";


XMLGenerate::usage=
	"Generates an XMLObject from data";
XMLDeploy::usage=
	"CloudExports an XMLObject";
XMLExport::usage=
	"Exports an XMLObject";
$CSStylesheets::usage=
	"A cache of named stylesheets";
MarkdownGenerate::usage=
	"Generates an XMLObject from a markdown string";


HTMLTemplateBar::usage=
	"The bar used as the DockedCell";
HTMLDockedCellStyles::usage=
	"The styles used in building the docked cell";
HTMLTemplateStyles::usage=
	"The styles scraped to build an HTML page";
HTMLStyleSpecification::usage=
	"the basic specification for styles";


HTMLScrapePages::usage=
	"scrapes HTML data from the given notebook/cell group";
HTMLScrapeStyles::usage=
	"scrapes the style info from a given notebook / cell group";
HTMLBuildPages::usage=
	"builds HTML pages from the given spec";


XMLToCells::usage=
	"turns an XMLElement into a cell group";
HTMLNotebook::usage=
	"converts an XML spec into a notebook";


HTMLTemplateNotebook::usage=
	"Generates a template notebook to fill out";


Begin["`Private`"];


(*JSONTree[json_]:=;*)


JSONLookup[json:{__Rule}|{{__Rule}..},
	fields:(_String|_Integer|_List|_Symbol|_Map|_Select)..]:=
	Fold[
		Switch[#2,
			_Map|_Select,
				#2@#,
			_Integer|All|{__Integer},
				#[[#2]],
			_,
				Lookup[#,#2]
			]&,json,{fields}
		];
JSONLookup[
	fields:(_String|_Integer|_List|_Symbol|_Map|_Select)..][
		json:{__Rule}|{{__Rule}..}]:=
	JSONLookup[json,fields];


$SSHDirectory=
	Switch[$OperatingSystem,
		"Windows",
			"???",
		_,
			FileNameJoin@{$HomeDirectory,".ssh"}
		];


RSAImportChunks[rsa_String]:=
	StringCases[rsa,
		"-----"~~Except["\n"]..~~"-----\n"~~
			block:Shortest[__]~~
			"-----"~~Except["\n"]..~~("\n"|EndOfString):>
		block
		];


RSAParseBlock[block_]:=
	If[Length@#>1,
		<|
			"Header"->
				StringJoin@Riffle[First@#,"\n"],
			"Key"->
				StringJoin@Riffle[Last@#,"\n"]
			|>,
		<|
			"Key"->
			StringJoin@Riffle[First@#,"\n"]
			|>
		]&@
		With[{lines=StringSplit[block,"\n"]},
			With[{pos=
				FirstPosition[lines,_String?(StringLength[#]==64&),None,{1}]
				},
				If[pos=!=None,
					{
						Take[lines,{1,First@pos-1}],
						Take[lines,{First@pos,-1}]
						},
					{{}}
					]
				]
			];


RSAImportString[rsa_String]:=
	Replace[RSAParseBlock/@RSAImportChunks[rsa],
		{b_}:>
			b
		];
RSAImport[f_String?(FileExistsQ)]:=
	RSAImportString[Import[f,"Text"]]


SSHKeys[dir_String?DirectoryQ]:=
	AssociationMap[
		<|
			"Private"->
				RSAImport@FileNameJoin@{dir,#},
			"Public"->
				StringSplit[Import[FileNameJoin@{dir,#<>".pub"},"Text"]][[2]]
			|>&,
		FileNameTake/@FileNames["*_rsa",dir]
		];
SSHKeys[Optional[Automatic,Automatic]]:=
	SSHKeys@$SSHDirectory;


SSHKnownHostImportString[hostString_]:=
	If[Length@#==3,
		<|
			"HostName"->None,
			"HostIPAddress"->#[[1]],
			"HostKey"->#[[3]]
			|>,
		<|
			"HostName"->#[[1]],
			"HostIPAddress"->#[[2]],
			"HostKey"->#[[4]]
			|>
		]&@StringSplit[hostString,Whitespace|",",4]


SSHKnownHostImport[hostFile_]:=
	SSHKnownHostImportString/@
		StringSplit[
			Import[hostFile,"Text"],
			"\n"
			];


SSHKnownHosts[dir_String?DirectoryQ]:=
	Flatten[
		SSHKnownHostImport/@
			FileNames["known_hosts",dir]
		];
SSHKnownHosts[Optional[Automatic,Automatic]]:=
	SSHKnownHosts@$SSHDirectory;


SSHHostString::noip=
	"No \"HostIPAddress\" provided";
SSHHostString::nokey=
	"No \"HostKey\" provided";
Options[SSHHostString]={
	"HostName"->None,
	"HostIPAddress"->None,
	"HostKey"->None
	};
SSHHostString[ops:OptionsPattern[]]:=
	With[{
		name=
			Replace[OptionValue["HostName"],
				Except[_String]->Nothing
				],
		ip=
			Replace[OptionValue["HostIPAddress"],
				Except[_String]->
					(Message[SSHHostString::noip];$Failed)
				],
		key=
			Replace[OptionValue["HostKey"],
				Except[_String]->
					(Message[SSHHostString::nokey];$Failed)
				]
		},
		If[AllTrue[{name,ip,key},StringQ],
			StringRiffle@{name,ip,key}<>"\n",
			$Failed]
		];


Options[SSHAddHost]=
	Options@SSHHostString;
SSHAddHost[hostList:{__Association},ops:OptionsPattern[]]:=
	With[{
		name=OptionValue["HostName"],
		ip=OptionValue["HostIPAddress"],
		key=OptionValue["HostKey"]
		},
		If[AllTrue[{ip,key},StringQ],
			With[{hosts=
				#[[{"HostName","HostIPAddress"}]]->#[["HostKey"]]&/@
					hostList},
				Prepend[hosts,
					<|
						"HostName"->name,
						"HostIPAddress"->ip
						|>->key
						]
				],
			$Failed
			]
		];
SSHAddHost[hostFile_String?FileExistsQ,ops:OptionsPattern[]]:=
	SSHAddHost[HSSHKnownHostImport@hostFile]
SSHAddHost[Optional[Automatic,Automatic],ops:OptionsPattern[]]:=
	SSHAddHost[First@FileNames["known_hosts",$SSHDirectory]]


xmlObjectTemplate=
	TemplateObject[
		XMLObject["Document"][
			{XMLObject["Declaration"]["Version"->"1.0","Standalone"->"yes"]},
			XMLElement["html",
				{
					"version"->
						"-//W3C//DTD HTML 4.01 Transitional//EN","lang"->"en",
					{"http://www.w3.org/2000/xmlns/","xmlns"}->
						"http://www.w3.org/1999/xhtml"
					},
				{
					TemplateSlot["header"],
					TemplateSlot["body"]
					}
				],
			{}
			]
		];


cssPropRules=
	{
		FontColor->"color",
		FrameStyle->"border",
		FrameMargins->"margin",
		TextAlignment->"text-align",
		TabSpacings->"tab-size",
		SourceLink->"src",
		ButtonFunction->
			"onclick",
		Annotation->"alt",
		Hyperlink->"href",
		RoundingRadius->"border-radius",
		LineSpacing->"line-height",
		ImageSize->{"width","height"},
		e_:>
			ToLowerCase[
				StringJoin@{
					StringTake[#,1],
					StringReplace[StringDrop[#,1],
						l:LetterCharacter?(Not@*LowerCaseQ):>"-"<>l]
					}&@ToString[e]
				]
		};


cssValRules:=
	cssValRules=
		Join[
			Map[
				Replace[#,
					Hold[c_]:>
						(c->ToLowerCase@ToString[Unevaluated[c]])
					]&,
				Thread@Hold@{
					Red,White,Blue,Black,Yellow,
					Green,Orange,Purple,Pink,Gray,
					LightBlue,LightRed,LightGray,LightYellow,
					LightGreen,LightOrange,LightPurple,LightPink,
					Thick,Dotted,Thin,Dashed
					}],{
			c_?ColorQ:>
				"#"<>Map[
					StringPadLeft[
						IntegerString[#,16],
						2,
						"0"
						]&,
					Floor[255*Apply[List,ColorConvert[c,RGBColor]]]
					],
			i_Integer:>
				ToString[i]<>"px",
			q_Quantity:>
				StringReplace[
					ToString[q],
					" "->""
					],
			Scaled[i_]:>
				ToString@Floor[i*100]<>"%",
			r_Rule:>
				(cssGenerate[r]),
			{l__}|Directive[l__]:>
				StringRiffle@Map[#/.cssValRules&,{l}],
			i_:>ToLowerCase@ToString[i]
			}
		];


cssTypeRules={
	"Title"->"h1",
	"Subtitle"->"h2",
	"Section"->"h3",
	"Subsection"->"h4",
	"Subsubsection"->"h5",
	"Subsubsubsection"->"h6",
	"Hyperlink"->"a",
	"Graphics"->"img",
	"Text"->"p",
	s_String:>(ToLowerCase[s])
	};


cssThreadedOptions[propBase_,propOps_,vals_]:=
	MapThread[
		If[!MatchQ[#2,Inherited|None],
			If[StringContainsQ[propBase,"-"],
				StringReplace[propBase,{
					"-"->("-"<>#<>"-")
					}]->(#2/.cssValRules),
				StringJoin[propBase,"-"<>#]->(#2/.cssValRules)
				],
			Nothing
			]&,{
		propOps,
		vals
		}]


cssGenerate//Clear;
cssGenerate[
	prop_->val:Except[{__Rule}],
	joinFunction_:Automatic]:=
	With[{
		propBase=
			prop/.cssPropRules
		},
		If[Not@ListQ@propBase,
			Sequence@@
				Map[
					Replace[joinFunction,
						Automatic->(StringJoin@{First@#,": ",Last@#,";"}&)
						],
					Replace[val,{
						{{l_,r_},{b_,h_}}:>
							If[StringContainsQ[propBase,"radius"],
								cssThreadedOptions[
									propBase,
									{"left-bottom","right-bottom","left-top","right-top"},
									{l,r,b,h}
									],
								cssThreadedOptions[
									propBase,
									{"left","right","bottom","top"},
									{l,r,b,h}
									]
								],
						{l_,r_}:>
							cssThreadedOptions[
								propBase,
								{"left","right"},
								{l,r}
								],
						v_:>
							{propBase->(v/.cssValRules)}
						}]
					],
			If[ListQ@val,
				Sequence@@cssGenerate[Thread[propBase->val],joinFunction],
				cssGenerate[First@propBase->val,joinFunction]
				]
			]
		];
cssGenerate[
	type:_String|_Symbol->spec:{__Rule},
	joinFunction_:Automatic]:=
	TemplateApply["`type` {\n\t`rules`\n\t}",
		<|
			"type"->(ToString[type]/.cssTypeRules),
			"rules"->
				StringRiffle[cssGenerate[#,joinFunction]&/@spec,
					"\n\t"]
			|>
		];
cssGenerate[
	r:{__Rule},
	joinFunction_:Automatic]:=
	Replace[joinFunction,{
		Automatic:>
			Flatten@{
				"\n",
				Riffle[cssGenerate/@r,"\n\n"],
				"\n"
				},
		j_:>
			(cssGenerate[#,j]&/@r)
		}];
cssGenerate[a_Association]:=
	KeyValueMap[cssGenerate,a];
cssGenerate[{},Optional[_,_]]:={};


xmlOptionsConvert[o_]:=
	Replace[o,{
		(k_->r:{__Rule}):>
			(k/.cssPropRules)->
				StringJoin@
					ReplaceAll[xmlOptionsConvert@r,
						(op_->val_):>
							op<>":"<>val<>";"
						],
		r_Rule:>
			cssGenerate[r,Identity]
		},
		1]


$xmlObjectRecursiveConversion=
	xmlObjectConvert;


Clear@xmlObjectConvert;
xmlObjectConvert[x_XMLObject]:=
	x;
xmlObjectConvert[XMLElement[a_,m_,e_]]:=
	XMLElement[a,m,$xmlObjectRecursiveConversion/@e];
xmlObjectConvert[type_->r_]:=
	XMLElement[type,{},$xmlObjectRecursiveConversion@r];


xmlObjectConvert[Hyperlink[a_,b:Except[_Rule]:None,o___]]:=
	XMLElement["a",
		Join[
			{"href"->Replace[b,Except[_String]->a]},
			xmlOptionsConvert@{o}
			],
		{a}]
xmlObjectConvert[Hyperlink[a_,b:Except[_Rule]:None,___]]:=
	XMLElement["a",
		{"href"->Replace[b,Except[_String]->a]},
		{a}];


xmlObjectConvert[Button[e_,b:Except[_Rule]:None,o___]]:=
	XMLElement["button",
		xmlOptionsConvert@{
			ButtonFunction->Function[b](*,
			o*)
			},
		{$xmlObjectRecursiveConversion@e}
		];


xmlObjectConvert[
	Column[e_,
		riffle:Except[_Rule]:"\n",
		o___]]:=
	XMLElement["div",
		cssGenerate[{o},Identity],
		$xmlObjectRecursiveConversion/@Riffle[e,riffle]
		];


xmlObjectConvert[
	Row[s_,
		riffle:Except[_Rule]:Nothing,
		o___]]:=
	XMLElement["span",
		cssGenerate[{o},Identity],
		$xmlObjectRecursiveConversion/@Riffle[s,riffle]
		];


xmlObjectConvert[Graphics[s_String,___]]:=
	XMLElement["img",
		{"src"->s,"alt"->""},
		{}
		];


xmlObjectConvert[g:Graphics[_,o___]]:=
	XMLElement["img",
		xmlOptionsConvert@{
			SourceLink->
			If[$xmlAutoExport,
				First@CloudExport[Rasterize@g,"GIF",Permissions->"Public"],
				""
				],
			Annotation->""
			},
		{}
		];
xmlObjectConvert[EmbeddedHTML[src_,ops___]]:=
	XMLElement["iframe",
		xmlOptionsConvert@{
			SourceLink->src,
			ops
			},
		{}
		];


xmlObjectConvert[Grid[g_,o___]]:=
	XMLElement["table",
		cssGenerate[{o},Identity],
		XMLElement["tr",
			{},
			$xmlObjectRecursiveConversion@
				Thread["td"->#]&/@g
			]
		];


xmlObjectConvert[Panel[e_,o___]]:=
	XMLElement["div",
		With[{
			classes=Cases[{o},Except[_Rule]],
			props=Cases[{o},_Rule]
			},
			cssGenerate[
				Join[
					If[Length@classes>0,
						Thread["Class"->classes],
						classes
						],
					props
					],
				Identity
				]
			],
		{$xmlObjectRecursiveConversion@e}
		];


xmlBuildStyles//Clear;
xmlBuildStyles[e_,Italic|(FontSlant->Italic)]:=
	XMLElement["i",{},{e}];
xmlBuildStyles[e_,"Underline"|(FontVariations->{"Underline"->True})]:=
	XMLElement["u",{},{e}];
xmlBuildStyles[e_,Bold|(FontWeight->Bold)]:=
	XMLElement["b",{},{e}];
xmlBuildStyles[e_,"StrikeThrough"|(FontVariations->{"StrikeThrough"->True})]:=
	XMLElement["s",{},{e}];
xmlBuildStyles[e_,o:{__}]:=
	Fold[xmlBuildStyles,e,o];
xmlBuildStyles[e_,_]:=
	e;


xmlObjectConvert["\n"]:=
	XMLElement["br",{},{}];
xmlObjectConvert[Style[e_,s:_String:"span",o___]]:=
	xmlBuildStyles[
		XMLElement[s/.cssTypeRules,
			xmlOptionsConvert@Cases[{o},_Rule],
			Flatten@{$xmlObjectRecursiveConversion@e}
			],
		Cases[{o},Except[_Rule]]
		];


xmlObjectConvert[l_List]:=
	$xmlObjectRecursiveConversion/@l;
xmlObjectConvert[e_]:=
	ToString[e];


Options[xmlGenerateHeader]={
	"Title"->"Web Page",
	"Meta"->{"charset"->"utf8"},
	"Style"->{}
	};
xmlGenerateHeader[ops:OptionsPattern[]]:=
	With[{
		t=
			OptionValue["Title"],
		m=
			OptionValue["Meta"],
		s=
			Replace[OptionValue["Style"],{
				css_String:>
					If[KeyMemberQ[$CSStylesheets,css],
						$CSStylesheets[css],
						css
						],
				r:Except[{(_String->_List)..}]:>
					"body"->r
				}]
		},
		XMLElement["head",{},
			{
				XMLElement["title",{},{t}],
				XMLElement["meta",m,{}],
				Replace[s,{
					f_String:>
						XMLElement["style",{},{"\n@import url(",f,")"}],
					_:>
						Replace[cssGenerate@s,{
							l:{__}:>
								XMLElement["style",{},l],
							s_String:>
								XMLElement["style",{},{s}],
							_->Nothing
							}]
					}]
				}]
		]


xmlGenerateBody[data_]:=
	XMLElement["body",{},
		Replace[xmlObjectConvert@data,
			e:Except[_List]:>{e}
			]
		];


Options[XMLGenerate]=
	Options[xmlGenerateHeader];
XMLGenerate[expr_,ops:OptionsPattern[]]:=
	TemplateApply[xmlObjectTemplate,
		<|
			"body"->xmlGenerateBody[expr],
			"header"->xmlGenerateHeader[ops]
			|>]


Options[XMLDeploy]:=
	Join[
		Options@CloudExport,
		Options@XMLGenerate
		];
XMLDeploy[xml:XMLObject[___][___]|_XMLElement|_XMLObject,
	uri:_String|Automatic:Automatic,
	ops:OptionsPattern[]]:=
	If[uri===Automatic,
		CloudExport[ExportString[xml,"XML"],"HTML",
			FilterRules[{ops},Options@CloudExport]
			],
		CloudExport[ExportString[xml,"XML"],"HTML",uri,
			FilterRules[{ops},Options@CloudExport]
			]
		];
XMLDeploy[expr_,
	uri:_String|Automatic:Automatic,
	ops:OptionsPattern[]
	]:=
	XMLDeploy[
		XMLGenerate[expr,
			FilterRules[{ops},Options@XMLGenerate]],
		uri,
		ops
		]


Options[XMLExport]:=
	Join[
		Options@XMLGenerate
		];
XMLExport[
	xml:XMLObject[___][___]|_XMLElement|_XMLObject,
	filePath_String,
	ops___]:=
	Export[
		filePath,
		ExportString[xml,"XML"],
		"Text",
		ops
		];


$CSStylesheets=<|
	"Markdown"->
		{
			"body"->{
				Background->Lighter[LightBlue,.9],
				FontFamily->"Arial"
				},
			".markdown-content"->{
				Background->White,
				FrameStyle->{
					{Directive[1,"solid",LightGray],Directive[1,"solid",LightGray]},
					{Directive[1,"solid",LightGray],Directive[65,"solid",GrayLevel[.65]]}
					},
				RoundingRadius->5,
				Padding->{
					{50,50},
					{0,0}
					},
				"MinHeight"->Scaled[.9]
				},
			"Title"->{
				FrameStyle->{
					{Inherited,Inherited},
					{Directive[1,"solid",LightGray],Inherited}
					}
				},
			"Subtitle"->{
				FontColor->GrayLevel[.3]
				},
			"Section"->{
				FontColor->GrayLevel[.3]
				},
			"Subsection"->{
				FontColor->GrayLevel[.4]
				},
			"Subsubsection"->{
				FontColor->GrayLevel[.4]
				},
			"Subsubsubsection"->{
				FontColor->GrayLevel[.5]
				},
			"Code"->{
				Background->GrayLevel[.95],
				FontWeight->Bold,
				FontSize->12,
				RoundingRadius->5,
				Padding->3
				},
			"Text"->{
				LineSpacing->1.2
				}
			},
	"Wolfram"->
		{
			"Title"->{
				Background->None,
				FontColor->RGBColor[0.8, 0.043, 0.008],
				FontSize->44,
				FrameStyle->False,
				FrameMargins->{{27,Inherited},{10,30}},
				Padding->8
				},
			"Subtitle"->{
				Background->None,
				FontColor->GrayLevel[0.3],
				FontSize->24,
				FrameStyle->False,
				FrameMargins->{{27,Inherited},{20,2}},
				Padding->8
				},
			"Section"->{
				Background->None,
				FontColor->RGBColor[0.7612268253604944, 0.29576562142366675`, 0.08555733577477684],
				FontSize->28,
				FrameStyle->{{0,0},{0,1}},
				FrameMargins->{{27,Inherited},{8,18}},
				Padding->4
				},
			"Subsection"->{
				Background->None,
				FontColor->RGBColor[0.778286411841001, 0.4230563820859083, 0.16115053025101092`],
				FontSize->20,
				FrameStyle->False,
				FrameMargins->{{50.34765625`,3.`},{8.`,12.`}},
				Padding->8
				},
			"Subsubsection"->{
				Background->None,
				FontColor->RGBColor[0.7143816281376364, 0.21776150148775464`, 0.03341725795376516],
				FontSize->19,
				FrameStyle->False,
				FrameMargins->{{66,Inherited},{2,10}},
				Padding->8
				},
			"Subsubsubsection"->{
				Background->None,
				FontColor->RGBColor[0.778286411841001, 0.4230563820859083, 0.16115053025101092`],
				FontSize->14,
				FrameStyle->False,
				FrameMargins->{{66,Inherited},{2,10}},
				Padding->8
				},
			"Input"->{
				Background->None,
				FontColor->Automatic,
				FontSize->13,
				FontWeight->"Bold",
				FrameStyle->False
				},
			"Code"->{
				FontColor->Automatic,
				FontSize->12,
				FontWeight->"Bold",
				FrameStyle->False,
				Background->GrayLevel[.95],
				RoundingRadius->5,
				Padding->3
				},
			"Output"->{
				Background->None,
				FontColor->Automatic,
				FontSize->13,
				FrameStyle->False,
				FrameMargins->{{66,10},{10,5}},
				Padding->8
				},
			"Text"->{
				Background->None,
				FontColor->Automatic,
				FontSize->12,
				FrameStyle->False,
				FrameMargins->{{66,10},{0,7}},
				Padding->8
				}
			}
		(*Map[
			With[{s=#},
				s\[Rule]
					Map[
						If[Length@#>0,Last@#,#]\[Rule]
							AbsoluteCurrentValue[EvaluationNotebook[],
								{StyleDefinitions,s,
									If[Length@#>0,First@#,#]}]&,{
						Background,
						FontColor,
						FontSize,
						FontWeight,
						CellFrame->FrameStyle,
						CellMargins\[Rule]FrameMargins,
						CellFrameMargins\[Rule]Padding
						}]
				]&,{
			"Title","Subtitle","Section",
			"Subsection","Subsubsection","Subsubsubsection",
			"Input","Code","Output"
			}]//Map[First@#\[Rule]NewlineateCode@Last@#&]//NewlineateCode*)
	|>;


markdownFormatHeaders[par_]:=
	StringReplace[par,{
		l:(StartOfLine~~"#"~~Except["\n"]..):>
			Style[
				StringTrim[l,("#"|Whitespace)..],
				Replace[StringLength@StringTrim[l,Except["#"]..],{
					1->"Title",
					2->"Subtitle",
					3->"Section",
					4->"Subsection",
					5->"Subsubsection",
					6->"Subsubsubsection"
					}]
				]
		}];
markdownFormatLinks[par_]:=
	StringReplace[par,
		"["~~lab:Except["]"]..~~"]"~~"("~~link:Except[")"]..~~")":>
			Hyperlink[lab,link]
		];
markdownFormatTicks[par_]:=
	StringReplace[par,
		("```"~~t:Shortest[__]..~~"```"):>
			XMLElement["code",{},{t}]
		];
markdownFormatHTML[par_]:=
	StringReplace[par,{
		xml:
			("<"~~Except["/"|">"]..~~">"~~
				Except["<"]..~~"</"~~Except[">"]..~~">")|
			("<"~~Except[">"]~~"/>"):>
			Replace[ImportString[xml,"XML"],{
				XMLObject[_][_,x_,___]:>x,
				$Failed:>xml
				}]
		}];
markdownFormat[par_,parStyle_:"p"]:=
	Replace[markdownFormatHeaders[par],{
		s_String:>
			Replace[markdownFormatLinks[s],{
				html_String:>
					Replace[markdownFormatHTML[html],{
						ticks_String:>
							Replace[markdownFormatTicks[ticks],{
								StringExpression[e__]:>
									Row@
										Replace[{e},
											p_String:>
												markdownFormat[p,"span"],
											1]
								}],
						StringExpression[e__]:>
							Row@
								Replace[{e},
									p_String:>
										markdownFormat[p,"span"],
									1]
						}],
				StringExpression[e__]:>
					Style[
						Row@
							Replace[{e},
								p_String:>
									markdownFormat[p,"span"],
								1],
						"p"
						]
				}],
		StringExpression[e__]:>
			Column@
				Replace[{e},
					s_String:>
						markdownFormat[s,parStyle],
					1]
		}]


Options[MarkdownGenerate]:=
	Options@XMLGenerate;
MarkdownGenerate[
	md_String?(Not@*FileExistsQ),
	css:_String|{___Rule}|Automatic:Automatic,
	ops:OptionsPattern[]]:=
	With[{pars=StringSplit[md,"\n\n"]},
		XMLGenerate[
			Panel[
				Column[Map[Style[markdownFormat[#],"Text"]&,pars],Nothing],
				"markdown-content"
				],
			"Style"->
				Replace[css,
					Automatic->"Markdown"],
			ops
			]
		];
MarkdownGenerate[
	f_String?FileExistsQ,
	css:_String|{___Rule}|Automatic:Automatic,
	ops:OptionsPattern[]
	]:=
	MarkdownGenerate[Import[f,"Text"],css,ops]


htmlNullTags={
	"DOCTYPE",
	"html"
	};
htmlMainTags={
	"head",
	"body"
	};


htmlBuildTags=
	Join[{
		"PageNames",
		"DeployTo",
		"ResourceFiles",
		"ResourcePermissions"
		},
		ToString@*First/@Options@CloudDeploy
		];


htmlFakeTags=
	{
		"plaintext",
		"inlinetext",
		"style class"
		};


htmlStdTags=
	{
		"a","abbr","acronym",
		"address","applet","area",
		"article","aside","audio",
		"b","base","basefont",
		"bdi","bdo","big",
		"blockquote","br","button",
		"buildto",
		"canvas","caption","center",
		"cite","code","col",
		"colgroup",
		"data","datalist",
		"dd","del","details",
		"dfn","dialog","dir",
		"div","dl","dt",
		"em","embed",
		"fieldset","figcaption","figure",
		"font","footer","form",
		"frame","frameset",
		"header","hr",
		"h1","h2","h3",
		"h4","h5","h6",
		"i","iframe","img",
		"inputcell",
		"input","ins",
		"kbd","keygen",
		"label","legend","li",
		"link",
		"main","map","mark",
		"menu","menuitem",
		"meta","meter",
		"nav","noframes",
		"noscript",
		"object","ol",
		"optgroup","option",
		"output",
		"p","param",
		"picture","pre",
		"progress",
		"q",
		"rp","rt","ruby",
		"s","samp","script",
		"section","select","small",
		"source","span","strike",
		"strong","style","sub",
		"summary","sup",
		"table","tbody","td",
		"textarea","tfoot","th",
		"thead","time","title",
		"tr","track","tt",
		"u","ul",
		"var","video",
		"wbr"
		};


cssStdProps=
	{
		"align-content","align-items","align-self",
		"all","animation","animation-delay",
		"animation-direction","animation-duration","animation-fill-mode",
		"animation-iteration-count","animation-name","animation-play-state",
		"animation-timing-function","backface-visibility","background",
		"background-attachment","background-blend-mode","background-clip",
		"background-color","background-image","background-origin",
		"background-position","background-repeat","background-size",
		"border","border-bottom","border-bottom-color",
		"border-bottom-left-radius","border-bottom-right-radius","border-bottom-style",
		"border-bottom-width","border-collapse","border-color",
		"border-image","border-image-outset","border-image-repeat",
		"border-image-slice","border-image-source","border-image-width",
		"border-left","border-left-color","border-left-style",
		"border-left-width","border-radius","border-right",
		"border-right-color","border-right-style","border-right-width",
		"border-spacing","border-style","border-top",
		"border-top-color","border-top-left-radius","border-top-right-radius",
		"border-top-style","border-top-width","border-width",
		"bottom","box-shadow","box-sizing",
		"caption-side","clear","clip",
		"color","column-count","column-fill",
		"column-gap","column-rule","column-rule-color",
		"column-rule-style","column-rule-width","column-span",
		"column-width","columns","content",
		"counter-increment","counter-reset","cursor",
		"direction","display","empty-cells",
		"filter","flex","flex-basis",
		"flex-direction","flex-flow","flex-grow",
		"flex-shrink","flex-wrap","float",
		"font","@font-face","font-family",
		"font-size","font-size-adjust","font-stretch",
		"font-style","font-variant","font-weight",
		"hanging-punctuation","height","justify-content",
		"@keyframes","left","letter-spacing",
		"line-height","list-style","list-style-image",
		"list-style-position","list-style-type","margin",
		"margin-bottom","margin-left","margin-right",
		"margin-top","max-height","max-width",
		"@media","min-height","min-width",
		"nav-down","nav-index","nav-left",
		"nav-right","nav-up","opacity",
		"order","outline","outline-color",
		"outline-offset","outline-style","outline-width",
		"overflow","overflow-x","overflow-y",
		"padding","padding-bottom","padding-left",
		"padding-right","padding-top","page-break-after",
		"page-break-before","page-break-inside","perspective",
		"perspective-origin","position","quotes",
		"resize","right","tab-size",
		"table-layout","text-align","text-align-last",
		"text-decoration","text-decoration-color","text-decoration-line",
		"text-decoration-style","text-indent","text-justify",
		"text-overflow","text-shadow","text-transform",
		"top","transform","transform-origin",
		"transform-style","transition","transition-delay",
		"transition-duration","transition-property","transition-timing-function",
		"unicode-bidi","user-select","vertical-align",
		"visibility","white-space","width",
		"word-break","word-spacing","word-wrap",
		"z-index","color","opacity",
		"background","background-attachment","background-blend-mode",
		"background-color","background-image","background-position",
		"background-repeat","background-clip","background-origin",
		"background-size","border","border-bottom",
		"border-bottom-color","border-bottom-left-radius","border-bottom-right-radius",
		"border-bottom-style","border-bottom-width","border-color",
		"border-image","border-image-outset","border-image-repeat",
		"border-image-slice","border-image-source","border-image-width",
		"border-left","border-left-color","border-left-style",
		"border-left-width","border-radius","border-right",
		"border-right-color","border-right-style","border-right-width",
		"border-style","border-top","border-top-color",
		"border-top-left-radius","border-top-right-radius","border-top-style",
		"border-top-width","border-width","box-shadow",
		"bottom","clear","clip",
		"display","float","height",
		"left","margin","margin-bottom",
		"margin-left","margin-right","margin-top",
		"max-height","max-width","min-height",
		"min-width","overflow","overflow-x",
		"overflow-y","padding","padding-bottom",
		"padding-left","padding-right","padding-top",
		"position","right","top",
		"visibility","width","vertical-align",
		"z-index","align-content","align-items",
		"align-self","flex","flex-basis",
		"flex-direction","flex-flow","flex-grow",
		"flex-shrink","flex-wrap","justify-content",
		"order","hanging-punctuation","letter-spacing",
		"line-height","tab-size","text-align",
		"text-align-last","text-indent","text-justify",
		"text-transform","white-space","word-break",
		"word-spacing","word-wrap","text-decoration",
		"text-decoration-color","text-decoration-line","text-decoration-style",
		"text-shadow","@font-face","font",
		"font-family","font-size","font-size-adjust",
		"font-stretch","font-style","font-variant",
		"font-weight","direction","unicode-bidi",
		"direction","user-select","border-collapse",
		"border-spacing","caption-side","empty-cells",
		"table-layout","counter-increment","counter-reset",
		"list-style","list-style-image","list-style-position",
		"list-style-type","@keyframes","animation",
		"animation-delay","animation-direction","animation-duration",
		"animation-fill-mode","animation-iteration-count","animation-name",
		"animation-play-state","animation-timing-function","backface-visibility",
		"perspective","perspective-origin","transform",
		"transform-origin","transform-style","transition",
		"transition-property","transition-duration","transition-timing-function",
		"transition-delay","box-sizing","content",
		"cursor","nav-down","nav-index",
		"nav-left","nav-right","nav-up",
		"outline","outline-color","outline-offset",
		"outline-style","outline-width","resize",
		"text-overflow","column-count","column-fill",
		"column-gap","column-rule","column-rule-color",
		"column-rule-style","column-rule-width","column-span",
		"column-width","columns","page-break-after",
		"page-break-before","page-break-inside","quotes",
		"filter"
		};


htmlFakeProps=
	{
		"buildto"
		};


htmlStdProps=
	DeleteDuplicates@Sort@
		Join[
			cssStdProps,{
				"version",
				"language"
			},
			{
				"abbr","accept","accept-charset",
				"accesskey","action","align",
				"alink","alt","async","autocomplete",
				"autofocus","autoplay","axis",
				"background","bgcolor","border",
				"cellpadding","cellspacing","char",
				"charoff","charset","checked",
				"cite","class","color",
				"cols","colspan","compact",
				"content","contenteditable","contextmenu",
				"controls","coords",
				"data","data-*","datetime",
				"default","defer","dir",
				"dirname","disabled","download",
				"draggable","dropzone",
				"enctype",
				"face","for","form",
				"formaction","formenctype",
				"formmethod","formnovalidate",
				"formtarget","frame",
				"frameborder",
				"headers","height","hidden",
				"high","href","hreflang",
				"hspace","http-equiv",
				"icon","id","ismap",
				"keytype","kind",
				"label","lang","link",
				"list","longdesc","loop",
				"low",
				"manifest","marginheight","marginwidth",
				"max","maxlength","media",
				"method","min","multiple",
				"muted",
				"name","nohref","noresize",
				"noshade","novalidate","nowrap",
				"onafterprint","onbeforeprint",
				"onbeforeunload","onblur",
				"onchange","onclick",
				"oncontextmenu","oncopy",
				"oncut","ondblclick",
				"ondrag","ondragend",
				"ondragenter","ondragleave",
				"ondragover","ondragstart",
				"ondrop","onerror","onfocus",
				"onhashchange","oninput",
				"oninvalid","onkeydown",
				"onkeypress","onkeyup",
				"onload",
				"onmousedown","onmousemove",
				"onmouseout","onmouseover",
				"onmouseup","onoffline","ononline",
				"onpageshow","onpaste",
				"onreset","onresize","onscroll",
				"onsearch","onselect","onshow",
				"onsubmit","ontoggle",
				"onunload","onwheel",
				"open","optimum",
				"pattern","placeholder",
				"poster","preload",
				"radiogroup","readonly",
				"rel","required",
				"rev","reversed",
				"rows","rowspan",
				"rules",
				"sandbox","scheme",
				"scope","scoped",
				"scrolling","selected",
				"shape","size","sizes",
				"span","spellcheck","src",
				"srcdoc","srclang","srcset",
				"start","step","style",
				"summary",
				"tabindex","target","text",
				"title","translate","type",
				"usemap",
				"valign","value",
				"vlink","vspace",
				"width","wrap",
				"xmlns"
				}
		];


htmlHighPriorityTags={
	"div"->14,
	"div 2"->12,
	"div 3"->10,
	"div 4"->8,
	"div 5"->6,
	"div 6"->4,
	"div 7"->2,
	"div 8"->0,
	"form"->6,
	"ul"->4,
	"ol"->4,
	"li"->2
	};
htmlLowPriorityTags={
	"span"->4,
	"b"->6,
	"i"->6,
	"s"->6,
	"area"->2,
	"br"->2,
	"inlinetext"->2,
	"style class"->2
	};


htmlHeaderCell[spec_,type_:None]:=
	Cell[TextData[{spec,Cell[BoxData@ToBoxes@Spacer[10]]}],
		If[type===None,Sequence@@{},type],
		Background->None,
		FontFamily->"Helvetica",
		FontWeight->Plain,
		FontSize->12,
		CellFrame->None,
		CellFrameColor->None,
		CellFrameMargins->{{0,10},{0,0}},
		CellElementSpacings->{
			"CellMinHeight"->1
			}
		];


HTMLTemplateStyles=
	Join[
		{
			{"PAGE","Section"},
			{"MAIN","Subsection",
				CellFrameColor->Gray,
				CellFrame->{{0,0},{1,1}},
				Background->
					GrayLevel[.95],
				WholeCellGroupOpener->True,
				CellSize->{Automatic,10},
				CellElementSpacings->{
					"CellMinHeight"->10
					},
				DefaultNewCellStyle->"TAGInterpreter"
				},
			{"NULL","Text",
				CellGroupingRules->
					{"GroupTogetherGrouping",40}},
			{"TAG","Subsubsubsection",
				CellFrameColor->Gray,
				FontWeight->Plain,
				CellFrame->{{0,0},{1,0}},
				CellGroupingRules->{"SectionGrouping",55+2*10},
				CellMargins->{{100,Inherited},{Inherited,Inherited}},
				DefaultNewCellStyle->"TAGInterpreter",
				StyleKeyMapping->{
					"Backspace"->"TAGInterpreter"
					}
				},
			{"TAGText","TAG",
				FontColor->Automatic
				},
			{"TAGCode","TAG",
				FontColor->Automatic,
				FontWeight->"DemiBold",
				FontFamily->"SourceCodePro",
				FontSize->13
				},
			{"TAGInterpreter","TAG",
				Evaluatable->True,
				CellEvaluationFunction->
					With[{specs=Join[htmlStdTags,htmlFakeTags]},
						NotebookWrite[EvaluationCell[],
							Cell["",First[Nearest[specs,#]]<>"_tag"]
							]&
						],
				MenuCommandKey->"6",
				DefaultNewCellStyle->"PROPInterpreter"
				},
			{"PROP","Input",
				CellFrameColor->Gray,
				CellFrame->{{1,0},{0,0}},
				Background->GrayLevel[.95],
				CellGroupingRules->{"SectionGrouping",60+2*10},
				CellMargins->{{150,Inherited},{Inherited,Inherited}},
				DefaultNewCellStyle->"PROPInterpreter",
				StyleKeyMapping->{
					"Backspace"->"PROPInterpreter"
					},
				PageWidth->\[Infinity]
				},
			{"PROPInterpreter","PROP",
				DefaultFormatType->"Text",
				Evaluatable->True,
				CellEvaluationFunction->
					With[{specs=Join[htmlStdProps,htmlFakeProps]},
						NotebookWrite[EvaluationCell[],
							Cell[BoxData@{},
								First[Nearest[specs,#]]<>"_prop"]
							]&
						],
				MenuCommandKey->"8"
				},
			{"DIV","Subsubsection",
				CellFrameColor->Gray,
				FontWeight->Plain,
				CellFrame->{{0,0},{1,0}},
				DefaultNewCellStyle->"TAGInterpreter"
				},
			{"LI","TAG",
				CellFrame->{{0,0},{1,0}},
				CellBracketOptions->{
					"Color"->RGBColor[1, 0.5, 0]
					}
				},
			{"BUILD","Input",
				CellFrame->{{1,0},{0,0}},
				Background->GrayLevel[.95],
				CellMargins->{{150,Inherited},{Inherited,Inherited}}
				},
			{"Subsubsection",None,
				MenuCommandKey->None
				},
			{"Text",None,
				MenuCommandKey->None
				},
			{"Code",None,
				MenuCommandKey->None
				}
			},
		Table[
			{t,"NULL"},
			{t,htmlNullTags}
			],
		Table[
			{t,"MAIN",
				CellDingbat->
					htmlHeaderCell[t]
				},
			{t,
				Append[htmlMainTags,
					"build"]}
			],
		Table[
			{b<>"_option","BUILD",
				CellDingbat->
					htmlHeaderCell[b]
				},
			{b,htmlBuildTags}
			],
		Map[
			{StringReplace[First@#," "->"_"]<>"_tag",
				Which[
					StringMatchQ[First@#,"div*"],
						"DIV",
					StringMatchQ[First@#,"li"|"ul"|"ol"],
						"LI",
					True,
						"TAG"],
				CellDingbat->
					htmlHeaderCell[First@#],
				CellMargins->
					{{95-Last@#,Inherited},{Inherited,Inherited}},
				CellGroupingRules->{"SectionGrouping",55-Last@#+2*10}
				}&,
			DeleteCases[htmlHighPriorityTags,_->None]
			],
		Table[
			{t<>"_tag",
				Switch[t,
					"script"|"inlinetext"|"plaintext"|"p",
						"TAGText",
					"inputcell"|"code"|"output",
						"TAGCode",
					_,
						"TAG"
					],
				CellDingbat->
					htmlHeaderCell[t],
				If[t=="plaintext",
					MenuCommandKey->"7",
					Sequence@@{}
					]
				},
			{t,
				Join[
					DeleteCases[Join[htmlStdTags,htmlFakeTags],
						Alternatives@@
							Join[
								First/@htmlHighPriorityTags,
								First/@htmlLowPriorityTags
								]
						],
					{
						"plaintext"
						}
					]}
			],
		Map[
			{First@#,"TAG",
				CellDingbat->
					htmlHeaderCell[First@Last@#],
				CellGroupingRules->{"SectionGrouping",57+Last@Last@#*10},
				CellMargins->
					{{105+Last@Last@#,Inherited},{Inherited,Inherited}}
				}&,
			Join[
				Map[StringReplace[First@#," "->"_"]<>"_tag"->{First@#,Last@#}&,
					htmlLowPriorityTags]
				]
			],
		Table[
			{p<>"_prop","PROP",
				CellDingbat->
					htmlHeaderCell[p]
				},
			{p,Join[htmlStdProps,htmlFakeProps]}
			]
		];


If[!ValueQ@htmlStyleSetter,
	htmlStyleSetter:=
		htmlStyleSetter=
		With[{spec=#},	
			MapIndexed[
				GradientActionMenu[First@#,
					Last@#,
					Appearance->
						If[#2=={Length@spec},
							{
								{
									"Palette",
									ImagePadding->{{1,0},{1,0}}
									},
								{
									"Palette",
									ImagePadding->{{1,1},{1,0}}
									}
								},
							{
								"Palette",
								ImagePadding->{{1,0},{1,0}}
								}
							],
					FrameMargins->5,
					ImageSize->{{Automatic,35},{Automatic,34}}
					]&,
				#]
			]&@{
				{"Insert section",
					Join[
						Map[
							With[{l=First@#,s=Last@#},
								l:>FrontEndTokenExecute[InputNotebook[],"Style",s]
								]&,
							Map[#->#&,
								Join[{
									"PAGE",
									"build"
									},
									htmlMainTags,
									htmlNullTags]
								]
							],
						SortBy[First]@Map[
							With[{l=First@#,s=Last@#},
								l:>FrontEndTokenExecute[InputNotebook[],"Style",s]
								]&,
							Join[
								#->
									StringReplace[#," "->"_"]<>"_tag"&/@
										Sort@Join[
											htmlStdTags,
											htmlFakeTags,
											Map["div "<>ToString@#&,
												Range[2,8]]
												]
								]
							]
						]
					},
				{"Insert prop",
					Map[
						With[{l=First@#,s=Last@#},
							l:>FrontEndTokenExecute[InputNotebook[],"Style",s]
							]&,
						#->#<>"_prop"&/@Sort@Join[htmlStdProps,htmlFakeProps]
						]
					}
				}
		];


(*htmlTemplater//Clear*)
If[!ValueQ@htmlTemplater,
	htmlTemplater:=
		htmlTemplater=
		GradientActionMenu["Insert Content",
			Map[
				If[MatchQ[#,_Rule|_RuleDelayed],
					With[{l=First@#,t=Last@#},
						l:>(
								SelectionMove[InputNotebook[],After,Cell,5];
								NotebookWrite[InputNotebook[],t]
								)
						],
					#
					]&,{
				"Line Break"->
					Cell["","br_tag"],
				"Input / Output"->
					Cell[
						CellGroupData[{
							Cell["input","inputcell_tag"],
							Cell["","br_tag"],
							Cell["output","output_tag"]
							}]
						],
				Delimiter,
				"Link"->
					Cell[CellGroupData[{
						Cell["link_title","a_tag"],
						Cell[BoxData@{"\"https://www.link.li\""},"href_prop"]
						}]],
				"Link Item"->
					Cell[CellGroupData[{
						Cell["","li"],
						Cell[CellGroupData[{
							Cell["link_title","a_tag"],
							Cell[BoxData@{"\"https://www.link.li\""},"href_prop"]
							}]]
						}]
						],
				"Link List"->
					Cell[
						CellGroupData[{
							Cell["","ul_tag"],
							Cell[CellGroupData[{
								Cell["","li_tag"],
								Cell[CellGroupData[{
									Cell["link_title","a_tag"],
									Cell[BoxData@{"\"https://www.link.li\""},"href_prop"]
									}]
									]
								}]
								]
							}]
						],
				Delimiter,
				"Image"->
					Cell[
						CellGroupData[{
							Cell["","img_tag"],
							Cell[BoxData@"\"path/to/image\"","src_prop"],
							Cell[BoxData@"\"hover text\"","alt_prop"]
							}]
						],
				"IFrame"->
					Cell[
						CellGroupData[{
							Cell["","iframe_tag"],
							Cell[BoxData@"\"https://www.embed.src\"","src_prop"]
							}]
						],
				Delimiter,
				"List"->
					Cell[
						CellGroupData[{
							Cell["","ul_tag"],
							Cell["","li_tag"]
							}]
						],
				"Item"->
					Cell["item text","li_tag"],
				Delimiter,
				"Page"->
					Cell[CellGroupData[{
						Cell["page_root","PAGE"],
						Cell[CellGroupData[Flatten@{
							Cell["","build"],
							Cell[BoxData@{},#<>"_option"]&/@htmlBuildTags
							}]],
						Cell[CellGroupData[{
							Cell["","head"],
							Cell[CellGroupData[{
								Cell["","style_tag"],
								Cell["body","style_class_tag"]
								}]]
							}]],
						Cell["","body"],
						Cell["","HTMLFooter"]
						}]],
				"Build Section"->
					Cell[CellGroupData[Flatten@{
						Cell["","build"],
						Cell[BoxData@{},#<>"_option"]&/@htmlBuildTags
						}]],
				"Style Section"->
					Cell[CellGroupData[{
						Cell["","style_tag"],
						Cell["body","style_class_tag"]
						}]],
				"Style Class"->
					Cell[
						CellGroupData[{
							Cell["class_name","style_class_tag"],
							Cell[BoxData@"\"font_color\"","color_prop"]
							}]
						]
				}],
			Appearance->
				{
					"Palette",
					ImagePadding->
						{{1,0},{1,0}}
					},
			FrameMargins->5,
			ImageSize->{{Automatic,35},{Automatic,34}}
			]
		];


pageButtonBar//Clear;
If[!ValueQ@pageButtonBar,
	pageButtonBar:=
		pageButtonBar=
		GradientButtonBar[{
			"Make Pages":>
				With[{s=
					DeleteDuplicates@Flatten@{
						htmlSpecDeploy@htmlPageSpecs@InputNotebook[]
						}
					},
					SystemOpen/@
						Replace[
							Select[
								s,
								!FreeQ[#,_String?(StringMatchQ["*.html"])]&
								],
							{}->s
							]
					],
			"Test Pages":>
				Switch[$OperatingSystem,
					"MacOSX",
						If[!FileExistsQ@#,
							Message[Import::nffil, SystemOpen],
							Quiet[
								Check[
									RunProcess[{"open",#,"-a","Google Chrome"}],
									Check[
										RunProcess[{"open",#,"-a","Safari"}],
											SystemOpen@#
											]
										],
								RunProcess::pnfd
								]
							]&,
					_,
						SystemOpen
					]/@
					Flatten@List@
						With[{s=
							Map[
								htmlSpecDeploy[#,
									FileNameJoin@{
										$TemporaryDirectory,
										"_web_page_prep_"
										}
									]&,
								htmlPageSpecs@InputNotebook[]
							]},
							Replace[
								Select[s,
									!FreeQ[#,_String?(StringMatchQ["*.html"])]&
									],
								{}->s
								]
							]
				},
			Method->"Queued",
			Appearance->{
				"Palette",
				ImagePadding->{Center,1,{1,0}}
				},
			ImageSize->{Automatic,35},
			FrameMargins->5
			]
		];


If[!ValueQ@genButtonBar,
	genButtonBar:=
		genButtonBar=
			GradientButtonBar[{
				"Increase Grouping":>
					Map[
						With[{g=CurrentValue[#,CellGroupingRules]},
							CurrentValue[#,CellGroupingRules]=
								ReplacePart[g,2->Max@{g[[2]]-2,0}]
							]&,
						SelectedCells@InputNotebook[]
						],
				"Decrease Grouping":>
					Map[
						With[{g=CurrentValue[#,CellGroupingRules]},
							CurrentValue[#,CellGroupingRules]=
								ReplacePart[g,2->g[[2]]+2]
							]&,
						SelectedCells@InputNotebook[]
						]
					},
				Method->"Queued",
				Appearance->{
					"Palette",
					ImagePadding->{Center,1,{1,0}}
					},
				ImageSize->{Automatic,35},
				FrameMargins->5
				]
		];


HTMLTemplateBar:=
	HTMLTemplateBar=
	Row@Flatten@{
		pageButtonBar,
		htmlTemplater,
		htmlStyleSetter,
		genButtonBar,
		GradientButton["",
			Null,
			Enabled->False,
			Appearance->{
				"Palette",
				ImagePadding->{{1,0},{1,0}}
				},
			ImageSize->{Scaled[1],35}
			]
		};


HTMLDockedCellStyles:=
	{
		{"Notebook",None,
			DockedCells->
				Cell[BoxData@ToBoxes@HTMLTemplateBar]
			},
		{"DockedCell",None,	
			CellFrame->None,
			CellMargins->{{0,0},{0,-1}},
			Background->None
			}};


HTMLStyleSpecification:=
	Join[
		HTMLDockedCellStyles,
		HTMLTemplateStyles
		];


htmlScrapePage//Clear;
htmlScrapePage[
	Cell[
		CellGroupData[{
			Cell[pgName_,"PAGE",___],
			data__
			},
			___],
		___]
	]:=
	With[{scrape=Reap[htmlScrapeElements[{data}]]},
		Join[{
			"PageRoot"->
				pgName,
			"PageXML"->
				XMLObject["Document"][
					{XMLObject["Declaration"]["Version"->"1.0","Standalone"->"yes"]},
					Replace[Cases[scrape[[1]],_XMLElement],{
						{x:XMLElement["html",_,_]}:>
							x,
						e_:>
							XMLElement["html",{},e]
						}],
					{}
					]
			},
			Join[
				Normal[
					Normal@*Merge[
						Flatten
						]/@
						GroupBy[First->Last]@
							Cases[Flatten@scrape,
								r:(_->(_?OptionQ)):>r
								]
						],
				Cases[Flatten@scrape,
					(Rule|RuleDelayed)[_,Except[_Rule|_RuleDelayed|_?OptionQ]]
					]
				]
			]
		];
htmlScrapePage[Cell[CellGroupData[c_,___],___]]:=
	htmlScrapePage@c;
htmlScrapePage[Cell[___]]:=
	Nothing;
htmlScrapePage[Notebook[c_,___]]:=
	DeleteCases[htmlScrapePage@c,
		{}
		];
htmlScrapePage[nb_NotebookObject]:=
	htmlScrapePage@
		Replace[NotebookRead@nb,
			Except@Cell[CellGroupData[{Cell[_,"PAGE",___]},___],___]:>
				NotebookGet@nb
			];
htmlScrapePage[Optional[Automatic,Automatic]]:=
	htmlScrapePage@InputNotebook[];
htmlScrapePage~SetAttributes~Listable;


htmlScrapeElements//Clear;
htmlScrapeElements[
	Cell[
		CellGroupData[{
			Cell[e_,type_,___],
			body___},___],
		___]
		]:=
	With[{
		t=htmlGetType[type]
		},
		Switch[t,
			"style",
				XMLElement["style",
					{},
					With[{
						s=
							htmlScrapeStyles[{body}],
						p=
							Normal@
								Merge[htmlScrapeProps[{body}],
									Replace[{s_}:>s]
									]
						},
						If[Length@p>0,
							Prepend[s,
								TemplateApply["`type` { `props`\n\t}\n",
									<|
										"type"->"body",
										"props"->
											StringJoin@
												Map[
													("\n\t"<>First@#<>": "<>Last@#<>";")&,
													p
													]
										|>
									]
								],
							s
							]
						]
					],
			_,
				XMLElement[t,
					Normal@
						Merge[htmlScrapeProps[{body}],
							Replace[{s_}:>s]
							],
					With[{b=
						DeleteCases[_String?(StringMatchQ[""|Whitespace])]@
							Flatten@{
								Replace[e,
									_String:>(
										StringTrim[e,Verbatim["(*"]|"-- "~~__~~Verbatim["*)"]|" --"]
										)
									],
								htmlScrapeElements[{body}]}
							},
						If[Length@b>0,
							Prepend[
								Riffle[b,"\n\t"],
								"\n\t"
								],
							{}
							]
						]
					]
			]
		];
htmlScrapeElements[
	Cell[
		CellGroupData[{
			Cell[e_,"build",___],
			b___},
			___],
		___]
	]:=
	htmlScrapeBuild[{b}];
htmlScrapeElements[Cell[e_,
	h_?(
		StringContainsQ[#,"_tag"]&&
		MemberQ[htmlStdTags,htmlGetType[#]]&
		),___]]:=
	XMLElement[htmlGetType[h],
		{},
		DeleteCases[_String?(StringMatchQ[""|Whitespace])]@
			{htmlContentConvert[e]}
		];
htmlScrapeElements[Cell[t_,"plaintext_tag"|"inlinetext_tag",___]]:=
	If[StringQ@t,
		t,
		htmlContentConvert[t]
		];
htmlScrapeElements[Cell[___]]:=
	Nothing;
htmlScrapeElements~SetAttributes~Listable;


htmlScrapeBuild[
	Cell[
		e_,
		b_?(
			StringContainsQ[#,"_option"]&&
			MemberQ[htmlBuildTags,htmlGetType[#]]
			&),
		___]
	]:=
	Replace[ToExpression@e,{
		Null->Nothing,
		expr_:>
			(Replace[htmlGetType[b],
				t:Except[
					"PageNames"|
					"DeployTo"|
					"ResourceFiles"|
					"ResourcePermissions"
					]:>ToExpression[htmlGetType[b]]
				]->expr)
		}];
htmlScrapeBuild~SetAttributes~Listable;


htmlScrapeStyles//Clear;
htmlScrapeStyles[Cell[t_,"style_tag",___]]:=
	t;
htmlScrapeStyles[
	Cell[
		CellGroupData[{
			Cell[e_,"style_class_tag",___],
			b___
			},
			___],
		___]]:=
	TemplateApply["`type` { `props`\n\t}\n",
		<|
			"type"->e,
			"props"->
				StringJoin@
					Map[
						("\n\t"<>First@#<>": "<>Last@#<>";")&,
						Block[{$htmlStyleConversion=True},
							Normal@
								Merge[htmlScrapeProps[{b}],
									Replace[{s_}:>s]]
									]
						]
			|>
		];
htmlScrapeStyles[_Cell]:=
	Nothing;
htmlScrapeStyles[l_List]:=
	Flatten[htmlScrapeStyles/@l];


htmlScrapeProps//ClearAll;
htmlScrapeProps[
	Cell[e_,h_?(
		StringContainsQ[#,"_prop"]&&
		MemberQ[htmlStdProps,htmlGetType[#]]
		&),___]]:=
	htmlGetType[h]->
		Replace[e,{
			r:{__Rule}:>
				Map[(First@#->htmlContentConvert@Last@#)&,r],
			_:>htmlContentConvert@e
			}];
htmlScrapeProps[
	Cell[e_,"buildto_prop",___]
	]:=
	"buildto"->ToExpression[e];
htmlScrapeProps[Cell[___]]:=
	Nothing;
htmlScrapeProps[l_List]:=
	Flatten[htmlScrapeProps/@l];


htmlContentConvert//ClearAll;
htmlContentConvert[s_String]:=
	s;
htmlContentConvert[Cell[e_,___]]:=	
	htmlContentConvert[e];
htmlContentConvert[d_BoxData]:=
	htmlContentConvert@ToExpression[d];
htmlContentConvert[TextData[Cell[b_BoxData,___]]]:=
	htmlContentConvert[b];
htmlContentConvert[d_TextData]:=
	StringRiffle[ToString/@(htmlContentConvert@ToExpression[d])];
htmlContentConvert[Null]:=
	"";
htmlContentConvert[c_?ColorQ]:=
	"#"<>Map[
		StringPadLeft[
			IntegerString[#,16],
			2,
			"0"
			]&,
		Floor[255*Apply[List,ColorConvert[c,RGBColor]]]
		];


htmlContentConvert[i_Integer]:=
	ToString[i]<>"px";


htmlContentConvert[q_Quantity]:=
	StringReplace[
		ToString[q],
		" "->""
		];
htmlContentConvert[Inherited]:=
	"inherit";
htmlContentConvert[Scaled[i_]]:=
	ToString@Floor[i*100]<>"%";
htmlContentConvert[l_List]:=
	StringRiffle[htmlContentConvert/@Flatten@l];
htmlContentConvert[i_?ImageQ]:=
	With[{u=CreateUUID["img-"]<>".gif"},
		Sow["ResourceFiles"->{"img"->{u->i}}];
		XMLElement["img",
			{
				"src"->"img/"<>u,
				"alt"->u
				},{}]
		];
htmlContentConvert[g:_Graphics|_Graphics3D]:=
	htmlContentConvert@Rasterize[g,"Image",ImageResolution->120];


htmlContentConvert[URL[u_String]]:=
	"url(\""<>u<>"\")";
htmlContentConvert[r:{__Rule}]:=
	(First@#->htmlContentConvert[Last[#]])&/@r;
htmlContentConvert[e_]:=
	Block[{$xmlObjectRecursiveConversion=htmlContentConvert},
		xmlObjectConvert@
			ReplaceAll[e,{
				Rectangle->"rect"
				}]
		];


htmlGetType[t_String]:=
	Replace[First@StringSplit[t,"_"],{
		"DOCTYPE"->"!DOCTYPE"
		}]


XMLToCells[XMLElement[tag_,props_,data_]]:=
	If[Length@props>0||Length@data>0,
		Cell[CellGroupData[Flatten@{
			Cell[
				Replace[data,{
					{s_String,___}:>s,
					_->""
					}],
				tag<>If[MemberQ[htmlStdTags,tag],"_tag",""]],
			XMLToCells[props],
			XMLToCells[Replace[data,{_String,r___}:>{r}]]
			}]],
		Cell["",tag<>If[MemberQ[htmlStdTags,tag],"_tag",""]]
		];
XMLToCells[s_String]:=
	If[StringMatchQ[s,Whitespace],
		Nothing,
		Cell[s,"inlinetext_tag"]
		];
XMLToCells[k_->v_String]:=
	Cell[BoxData@("\""<>v<>"\""),k<>"_prop"];
XMLToCells[XMLObject[_][_,e_,___]]:=
	XMLToCells@e;
XMLToCells[URL[s_]|File[s_]]:=
	Cell[CellGroupData[Flatten@{
		Cell[FileBaseName@DirectoryName@s,"PAGE"],
		XMLToCells@Import[s,{"HTML","XMLObject"}]
		}]
		];
XMLToCells~SetAttributes~Listable;


HTMLNotebook[spec_]:=
	Replace[
		XMLToCells@
			Replace[spec,{
				_String?FileExistsQ:>File[spec],
				_String:>URL[spec]
				}],{
		c_Cell:>
			Notebook[{c},
				StyleDefinitions->
					FrontEnd`FileName[Evaluate@{`Package`$PackageName},"HTMLTemplating.nb"]
				],
		_->$Failed
		}]


HTMLScrapeStyles[c_]:=
	If[KeyMemberQ[#,"XML"],
		FirstCase[#["XML"],
			XMLElement["style",_,s:{__}]:>StringRiffle[s,"\n"],
			None,
			\[Infinity]],
		None
		]&/@HTMLScrapePages[c];
HTMLScrapeStyles[]:=
	HTMLScrapeStyles[Automatic];


Options[htmlPageSpecs]:=
	Join[{
		"PageRoot"->Automatic,
		"PageNames"->Automatic,
		"DeployTo"->Automatic,
		"PageXML"->None,
		"ResourceFiles"->None,
		"ResourcePermissions"->Automatic
		},
		Options[CloudDeploy]
		];
htmlPageSpecs[ops:OptionsPattern[]]:=
	With[{
		root=
			Replace[OptionValue["PageRoot"],{
				Automatic|None->""
				}],
		xml=
			Replace[OptionValue["PageXML"],
				None->""
				]
		},
		With[{
			names=
				Replace[OptionValue["PageNames"],{
					Automatic:>
						Replace[
							DeleteDuplicates@
							Flatten@
								Cases[xml,{___,
									"buildto"->pg_,
									___}:>If[StringQ@pg,StringSplit@pg,pg],\[Infinity]],
							{}->{"main"}
							],
					e:Except[_List]:>{e}
					}],
			res=
				Replace[OptionValue["ResourceFiles"],{
					r:{__Rule}|_Association:>
						Association@
							Flatten[
								(r//.a_Association:>Normal[a])//.
									(k_->v:{(_Rule|_RuleDelayed)...}):>
										Map[
											URLBuild@{k,First@#}->
												Last@#&,
											v
											]
								],
					Except[_Association]-><||>
					}]/.
						f_String?(FileExistsQ@#||StringMatchQ[#,"http*"]&):>
							Import[f],
			to=
				OptionValue["DeployTo"],
			rperms=
				Replace[OptionValue["ResourcePermissions"],
					Automatic:>
						OptionValue[Permissions]
					]
			},
				Join[
					Map[
						<|
							"URI"->
								URLBuild@{root,If[FileExtension[#]==="",#<>".html",#]},
							"XML"->
								ReplaceAll[
									DeleteCases[#,
										XMLElement[
											Alternatives@@Map[First,htmlHighPriorityTags],
											{("buildto"->_)}|{},
											{(""|_String?(StringMatchQ[Whitespace]))...}
											]|
										("buildto"->_),
										\[Infinity]
										]&@
									DeleteCases[xml,
										XMLElement[_,
											{___,
												"buildto"->
													Except[
														#|(#<>".html")|
														{___,#|(#<>".html"),___}
														],
												___},_],
										\[Infinity]
										],{
									XMLElement[t_,p:{___,_->{__Rule},___},e_]:>
										XMLElement[t,
											Replace[p,
												(k_->r:{__Rule}):>
													Replace[Lookup[r,#,Lookup[r,#<>".html"]],{
														_Missing->Nothing,
														l_:>(k->l)
														}],
												1
												],
											e
											]
									}],
							"Options"->
								FilterRules[{ops},
									Options@CloudDeploy],
							"DeployTo"->
								to
							|>&,
						StringTrim[names,".html"]
						],
					KeyValueMap[
						<|
							"URI"->
								URLBuild@{root,#},
							"Data"->
								#2,
							"DeployTo"->
								to,
							"Options"->
								{Permissions->rperms}
							|>&,
						res
						]
					]
			]
		];
htmlPageSpecs[l:{__List}]:=
	htmlPageSpecs@@@l;
htmlPageSpecs[e:_Cell|_Notebook|_NotebookObject]:=
	htmlPageSpecs@htmlScrapePage[e];
htmlPageSpecs[Optional[Automatic,Automatic]]:=
	htmlPageSpecs@htmlScrapePage[Automatic];


htmlGetAuthCredentials[creds:{__}]:=
	With[{
		credentials=
			Replace[DeleteCases[creds,(_String|_File)?DirectoryQ],{
				l:{_String?(StringContainsQ["\@"]),_String}:>
					{l},
				e_:>
					Replace[e,{
						s_String?(StringContainsQ["\@"]):>
							{s,$CloudBase},
						c_String:>
							{$WolframID,c},
						{c_,u_String}:>
							{
								Replace[c,Automatic->$CloudBase],
								Replace[u,Automatic->$WolframID]
								},
						_->Nothing
						},
						1]
				}]
		},	
		KeyChainGet[credentials,True]
		];
htmlGetAuthCredentials[c_String]:=
	htmlGetAuthCredentials@{c};


htmlCloudBaseConnect[base_]:=
	Replace[base,{
			cloud_String?(
				FailureQ[Interpreter["EmailAddress"]@#]||
				AnyTrue[Lookup[URLParse[#],{"Scheme","Domain"}],
					MatchQ[Except[None]]
					]&):>
				With[{
					l=Replace[KeyChainGet[{cloud,$WolframID},True],_Missing->None],
					c=
						With[{p=URLParse[cloud]},
							URLBuild@
								ReplacePart[p,{
									"Scheme"->"https",
									"Domain"->Replace[p["Domain"],None->First@p["Path"]],
									"Path"->Replace[p["Domain"],None->{}]
									}]
							]},
					If[$CloudBase=!=c,
						If[$WolframID=!=None,
							CloudConnect[$WolframID,Replace[l,None:>Sequence@@{}],
								CloudBase->c
								],
							CloudConnect[Automatic,Replace[l,None:>Sequence@@{}],
								CloudBase->c
								]
							]
						]
					],
			uname_String:>
				With[{l=Replace[KeyChainGet[{$CloudBase,uname},True],_Missing->None]},
					If[$WolframID=!=uname,
						CloudConnect[uname,Replace[l,None:>Sequence@@{}]]
						]
					],
			{uname_String,
				cloud_String?(
					FailureQ[Interpreter["EmailAddress"]@#]||
					AnyTrue[Lookup[URLParse[#],{"Scheme","Domain"}],
						MatchQ[Except[None]]
						]&)}:>
				With[{l=Replace[KeyChainGet[{cloud,uname}],_Missing->None]},
					If[$CloudBase=!=cloud||$WolframID=!+uname,
						CloudConnect[uname,Replace[l,None:>Sequence@@{}],
							CloudBase->
								With[{p=URLParse[cloud]},
									URLBuild@
										ReplacePart[p,{
											"Scheme"->"https",
											"Domain"->Replace[p["Domain"],None->First@p["Path"]],
											"Path"->Replace[p["Domain"],None->{}]
											}]
									]
							]
						]
					],
			{uname_String,pass_String}:>
				If[$WolframID=!=uname,
					CloudConnect[uname,pass]
					],
			{{uname_String,pass_String},cloud_String}:>
				If[$CloudBase=!=cloud||$WolframID=!+uname,
					CloudConnect[uname,pass,
						CloudBase->
							URLBuild@ReplacePart[URLParse[cloud],
								"Scheme"->"https"
								]
						]
					]
			}];


htmlExportString[x_]:=
	StringReplace[
		ExportString[x/.{
			(k_->v_String):>
				(
					k->
						StringReplace[v,{
							"\""->"[--doublequoteescape--]",
							"'"->"[--singlequoteescape--]"
							}]
					),
			style:XMLElement["style",__]:>
				(style/.s_String:>
					StringReplace[s,{
						"\""->"[--doublequoteescape--]",
						"'"->"[--singlequoteescape--]"
						}])
			},
			"XML"],
		{
			"[--doublequoteescape--]"->"\"",
			"[--singlequoteescape--]"->"'"
			}
		];


htmlSpecDeploy//ClearAll;
htmlSpecDeploy[
	specAssoc_Association,
	base:Except[(_String|_File)?(DirectoryQ@DirectoryName@#&)]
	]:=
	With[{
		uri=
			specAssoc["URI"],
		export=
			Lookup[specAssoc,"XML",
				Lookup[specAssoc,"Data"]],
		ops=
			Lookup[specAssoc,"Options",{}]
		},
			If[AllTrue[{uri,export},Not@*MissingQ],
				htmlCloudBaseConnect[base];
				CloudDeploy[
					Replace[export,
						Except[_ExportForm]:>
							ExportForm[
								Replace[export,
									x:XMLObject[___][___]:>
										If[FileExtension[specAssoc["URI"]]=="css",
											StringRiffle[
												Flatten@Cases[x,
													XMLElement["style",_,s_]:>s,
													\[Infinity]
													],
												"\n"
												],
											htmlExportString[x]
											]
									],
								Replace[export,{
									(data_->mimeType_):>
										mimeType,
									s:_String|
										XMLObject[___][___]?(
											FileExtension[specAssoc["URI"]]=="css"&
											):>
										{"Text","CSS"},
									i_?ImageQ:>
										"PNG",
									{__?ImageQ}:>
										"GIF",
									_:>"HTML"
									}]
								]
							],
					uri,
					ops]
			]
		];


htmlSpecDeploy[
	specAssocs:{__Association},
	base:(_String|_File)?(DirectoryQ@DirectoryName@#&)
	]:=
	Map[
		With[{
			file=
				FileNameJoin@{
					base,
					Sequence@@URLParse[#URI]["Path"]
					}<>
					If[FileExtension@#URI==""&&KeyMemberQ[#,"XML"],
						".html",
						""
						]
			},
			Quiet@
				If[FileExtension@file!="",
					CreateFile[file,
						CreateIntermediateDirectories->True
						],
					CreateDirectory[file,
						CreateIntermediateDirectories->True
						]
					];
			If[KeyMemberQ[#,"XML"],
				Export[file,
					If[FileExtension[#["URI"]]=="css",
						StringRiffle[
							Flatten@Cases[#["XML"],
								XMLElement["style",_,s_]:>s,
								\[Infinity]
								],
							"\n"
							],
						htmlExportString@#["XML"]
						],
					"Text"
					],
				Replace[#["Data"],{
					d:Except[_ExportForm]:>
						Export[file,d,
							Replace[d,{
								_String:>{"Text","CSS"},
								_?ImageQ:>"PNG",
								{__?ImageQ}:>
									"GIF"
								}]
							],
					exp_:>
						Export[file,exp]
					}]
				]
			]&,
		specAssocs
		];
htmlSpecDeploy[specAssoc_,path:(_String|_File)?(DirectoryQ@DirectoryName@#&)]:=
	htmlSpecDeploy[{specAssoc},path];


htmlSpecDeploy[specAssoc_Association]:=
	With[{locs=Lookup[specAssoc,"DeployTo",Automatic]},
		If[ListQ@locs,
			htmlSpecDeploy[specAssoc,#]&/@locs,
			htmlSpecDeploy[specAssoc,locs]
			]
		];
htmlSpecDeploy[a:{__Association}]:=
	Block[{$htmlAuthFailures={}},
		With[{locs=Lookup[a,"DeployTo",Automatic]},
			htmlGetAuthCredentials@
				DeleteCases[
					DeleteDuplicates@
						Replace[locs,
							s:{_String?(Not@*StringContainsQ["\@"]),_String}:>
								Sequence@@s,
							1
							],
					Except[_String|{_String,_String}]
					]
			];
		Map[
			With[{l=Lookup[#,"DeployTo",Automatic]},
				If[!MemberQ[$htmlAuthFailures,l],
					With[{co=htmlSpecDeploy[#]},
						If[
							MatchQ[co,
								Except[_CloudObject|{_CloudObject}]],
							AppendTo[$htmlAuthFailures,l];
							$KeyChain[l]=.
							];
						co
						],
					$Failed
					]
				]&,
			Flatten@Values@GroupBy[a,#DeployTo&]
			]		
		];


HTMLScrapePages[s_:Automatic]:=
	Replace[htmlPageSpecs[s],
		Except[_List]:>
			$Failed
		];


HTMLBuildPages[s:Except[{__Association}]:Automatic]:=
	Replace[HTMLScrapePages[s],
		Except[$Failed]:>
			htmlSpecDeploy[s]
		];
HTMLBuildPages[s:{__Association}]:=
	htmlSpecDeploy[s];


HTMLTemplateNotebook[
	name_:"html_page"
	]:=
	Replace[{
		nb_Notebook:>CreateDocument[nb],
		f_:>CreateDocument@Import@f
		}]@
	SelectFirst[
		FileNames["*.nb",`Package`appPath["Packages","__HTML Templates__"]],
		FileBaseName[#]===name&,
		Notebook[{
			Cell[name,"PAGE"],
			Cell[CellGroupData[Flatten@{
				Cell["","build"],
				Cell[BoxData@{},#<>"_option"]&/@htmlBuildTags
				}]],
			Cell[CellGroupData[{
				Cell["","head"],
				Cell[CellGroupData[{
					Cell["","style_tag"],
					Cell["body","style_class_tag"]
					}]]
				}]],
			Cell["","body"],
			Cell["","HTMLFooter"]
			},
			StyleDefinitions->
				FrontEnd`FileName[
					Evaluate@{`Package`$PackageName},
					"HTMLTemplating.nb"
					]
			]
		]


End[];




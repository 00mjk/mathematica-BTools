(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



$TitleCellStyles::usage="The styles that are section-like";
$SectionCellStyles::usage="The styles that are section-like";
$IOCellStyles::usage="The styles that are code-like";
$TextCellStyles::usage="The styles that are text-like";
$DefaultStyleNotebook::usage=
	"Default.nb hidden notebook";
SystemStyleNotebook::usage=
	"Finds the notebook for a given stylesheet";


SSOpen::usage="Opens the style definitions notebook for a given notebook";
SSTemplate::usage=
	"Creates a stylesheet editing template
-Create in the current document by default
-Opens a new one when passed Notebook[<ssname>] as the first argument";
SSNew::usage=
	"Creates a new style cell with a given name and optional parent style and options";
SSDelete::usage="Deletes all matching style cells";
SSUpdate::usage="SSDelete + SSNew";


SSDefaultStyles::usage="Sets a default styling cascade";


SSCells::usage=
	"Gets the cells in the current stylesheet that match a given style.
Styles can be specified by a String, Symbol, or StyleData expression or a list thereof";


(*StylesheetNotebook::usage=
	"Finds the stylesheet notebook expression the given notebook depends on";*)


SSEditNotebook::usage=
	"The style notebook object for editing a given notebook";
SSNotebookObject::usage=
	"Gets the NotebookObject that stores the styles of a given NotebookObject";
SSNotebookGet::usage=
	"Gets the NotebookObject the stores the styles of a given NotebookObject";
SSStyles::usage=
	"Gets the styles from a stylesheet";


SSApplyEdits::usage=
	"Applies the edits from SSEdit";
SSEdit::usage="Applies the options given to the given cell styles in the given notebook";
SSDrop::usage"Drops the options given from the given cell styles in the given notebook";
SSValue::usage=
	"Gets the value of a style option for a cell style";
SSSync::usage="Copies style options from one style to another";


SSEditEvents::usage=
	"Edits the \[Star]EventActions";
SSEditAliases::usage=
	"Edits the InputAliases";
SSEditReplacements::usage=
	"Edits the InputAutoReplacements";


Begin["`Private`"];


$TitleCellStyles={"Title","Chapter","Subchapter"};
$SectionCellStyles={"Section","Subsection","Subsubsection","Subsubsubsection"};
$IOCellStyles={"Input","Code","Output"};
$TextCellStyles={"Text","Item","ItemParagraph","Subitem","SubitemParagraph"};


SystemStyleNotebook[parts___String,name_String]:=
	Replace[
		FileNameJoin@Flatten@{
			$InstallationDirectory,
			"SystemFiles","FrontEnd","StyleSheets",
			parts,name<>".nb"
			},{
		f_String?FileExistsQ:>
			Replace[FENotebooks@f,{
				{}->Missing["NotFound"],
				{nb_}:>nb
				}],
		_->Missing["FileNotFound"]
		}];


$DefaultStyleNotebook:=
SystemStyleNotebook["Default"]


ssFileNameJoin[args__]:=
	FileNameJoin@Flatten@{$FrontEndDirectory,"StyleSheets",args}


ssFileName@FrontEnd`FileName[baseComponents_List,base_,___]:=
	If[FileExistsQ@FileNameJoin@Append[baseComponents,base],
		FileNameJoin@Append[baseComponents,base],
		If[FileExistsQ@ssFileNameJoin[baseComponents,base],
			ssFileNameJoin[baseComponents,base],
			First@FrontEndFiles@
				FileNameJoin@Flatten@{baseComponents,base}
			]
		];
ssFileName[base:_String?(Not@*FileExistsQ)|{__String}]:=
	If[FileExistsQ@ssFileNameJoin[base],
		ssFileNameJoin[base],
		Replace[
			SelectFirst[AppNames[],
				FileExistsQ@FileNameJoin@Flatten@{#,"FrontEnd","StyleSheets",base}&],{
			s_String:>
				FileNameJoin@Flatten@{s,"FrontEnd","StyleSheets",base}
			}]
		];


SSNotebookFileName[nb_NotebookObject]:=
	Replace[CurrentValue[nb,StyleDefinitions],{
		f:_String|_FrontEnd`FileName:>
			ssFileName[f],
		_Notebook:>
			Missing["NotAvailable"]
		}];


If[!AssociationQ@$ssNbObjCache,
	$ssNbObjCache=<||>
	];
SSNotebookObject[nb_NotebookObject]:=
	Replace[Lookup[$ssNbObjCache,nb],{
		_Missing|_NotebookObject?(NotebookInformation@#===$Failed&):>
			Set[$ssNbObjCache[nb],
				Replace[SSNotebookFileName[nb],{
					f_String:>
						Replace[FENotebooks[f],{
							{}:>Missing["NotFound"],
							{n_,___}:>n
							}],
					_Missing:>
						With[{n=CurrentValue[nb,StyleDefinitions]},
							SelectFirst[FENotebooks[],
								NotebookGet@#===n&]
							]
					}]
				]
		}];


SSNotebookObject/:
	HoldPattern[Unset[SSNotebookObject[nb_NotebookObject]]]:=
		$ssNbObjCache[nb]=.;
SSNotebookObject/:
	HoldPattern[Unset[SSNotebookObject[nb:EvaluationNotebook[]|InputNotebook[]]]]:=
		With[{n=nb},
			Unset[SSNotebookObject[n]]
			];
SSNotebookObject/:
	HoldPattern[Set[SSNotebookObject[nb_NotebookObject],n_NotebookObject]]:=
		$ssNbObjCache[nb]=n;
SSNotebookObject/:
	HoldPattern[
		Set[SSNotebookObject[nb:EvaluationNotebook[]|InputNotebook[]],
			n_NotebookObject]
		]:=
		With[{e=nb},
			Set[SSNotebookObject[e],n]
			];
SSNotebookObject/:
	HoldPattern[SetDelayed[SSNotebookObject[nb_NotebookObject],n_]]:=
		$ssNbObjCache[nb]:=n;
SSNotebookObject/:
	HoldPattern[
		SetDelayed[SSNotebookObject[nb:EvaluationNotebook[]|InputNotebook[]],
			n_]
		]:=
		With[{e=nb},
			SetDelayed[SSNotebookObject[e],n]
			];


SSNotebookGet[nb_NotebookObject]:=
	NotebookGet@SSNotebookObject@nb;
SSNotebookGet[Optional[Automatic,Automatic]]:=
	SSNotebookGet@EvaluationNotebook[];


SSEditNotebook[nb:_NotebookObject|Automatic:Automatic]:=
	With[{e=Replace[nb,Automatic:>EvaluationNotebook[]]},
		Replace[CurrentValue[e,StyleDefinitions],{
			"PrivateStylesheetFormatting.nb"|
				Notebook[{___,
					Cell[
						StyleData[
							StyleDefinitions->
								("PrivateStylesheetFormatting.nb"|"StylesheetFormatting.nb")
							],
					___]},
					___
					]->e,
			s:_String|_FrontEnd`FileName:>
				(
					SetOptions[e,
						StyleDefinitions->
							Notebook[{Cell[StyleData[StyleDefinitions->s]]},
								StyleDefinitions->
									("PrivateStylesheetFormatting.nb"|"StylesheetFormatting.nb")
								]
						];
					$ssNbObjCache[e]=.;
					SSNotebookObject[e]
					),
			_:>
				SSNotebookObject[e]
			}]
		];


SSStyleData[styleNames_,parentStyles_]:=
	MapThread[
		If[#2===None,
			StyleData[#],
			StyleData[#,StyleDefinitions->StyleData[#2]]
			]&,
		With[{
			styles=
				{styleNames}/.{
					(h:Rule|RuleDelayed)[s_List,e_]:>
						Flatten@Map[Thread[h[#,e]]&,s],
					(h:Rule|RuleDelayed)[s_,e_List]:>
						Flatten@Map[Thread[h[s,#]]&,e]
					}//Flatten
			},
			{
				styles,
				Take[
					ConstantArray[
						{parentStyles}/.{
							(h:Rule|RuleDelayed)[s_List,e_]:>
								Flatten@Map[Thread[h[#,e]]&,s],
							(h:Rule|RuleDelayed)[s_,e_List]:>
								Flatten@Map[Thread[h[s,#]]&,e]
							},
						Length@styles
						]//Flatten,
					Length@styles
					]
			}]
		]//.{
			(Rule|RuleDelayed)[name:Except[StyleDefinitions],env_]:>
				StyleData@@Flatten@{name,env}
			}//.{
			DefaultStyle[f__]:>(
				StyleDefinitions->
					Replace[{f},{
						{s_String}:>
							StringTrim[s,".nb"]<>".nb",
						{path__,name_}:>
							FrontEnd`FileName[{path},
								Evaluate[StringTrim[name,".nb"]<>".nb"]],
						{e_}:>
							e
						}]
				),
			StyleData[a___,StyleData[b___],c___]:>
				StyleData[a,b,c]
			}


Options[SSNew]=
	DeleteDuplicatesBy[
		Join[
			Options[Cell],
			Options[Notebook],
			Options[NotebookWrite]
			],
		First];
SSNew[nb:_NotebookObject|Automatic:Automatic,
	type:
		_String|All|_StyleData|_DefaultStyle|_Rule|_RuleDelayed|
			{(_String|All|_StyleData|_DefaultStyle|_Rule|_RuleDelayed)..},
	parentType:
		_FrontEnd`FileName|_String|_StyleData|_Rule|_RuleDelayed|None|
			{(_FrontEnd`FileName|_String|_StyleData|_Rule|_RuleDelayed|None)..}:
		None,
	placement:Next|First|Last|Automatic:Automatic,
	ops:OptionsPattern[]]:=
	With[{
		ec=EvaluationCell[],
		notebook=Replace[nb,Automatic:>SSEditNotebook[]],
		position=
				Replace[placement,
					Automatic:>Replace[type,{_DefaultStyle->First,_->Next}]],
		styleDecs=
			SSStyleData[type,parentType]
		},
		Switch[position,
			First,SelectionMove[notebook,Before,Notebook],
			Next,SelectionMove[notebook,After,Cell],
			Last,SelectionMove[notebook,After,Notebook]
			];
		NotebookWrite[notebook,
			Cell[#,
				Sequence@@FilterRules[{ops},
					Except[Alternatives@@Map[First,Options[NotebookWrite]]]
					]
				],
			Sequence@@FilterRules[{ops},Options@NotebookWrite]
			]&/@styleDecs;
		];


SSDelete[
	nb:_NotebookObject|Automatic:Automatic,
	type:_String|_List|_DefaultStyle]:=
	Replace[SSCells[nb,type],{
		c:{__CellObject}:>
			NotebookDelete@c
		}];


SSUpdate[
	nb:_NotebookObject|Automatic:Automatic,
	type:All|_String|_List|_DefaultStyle,
	parentType:_FrontEnd`FileName|_String|_List|_StyleData|None:None,
	placement:Next|First|Last|Automatic:Automatic,
	ops:(_Rule|_RuleDelayed)...]:=
	(
		SSDelete[nb,type];
		SSNew[nb,type,parentType,placement,ops]
		);


SSTemplate[newNB:_Notebook|_NotebookObject|None:None,
defaultStyle:_DefaultStyle:DefaultStyle["Default.nb"],
styles:(_String|_Directive)...,
ops:_Rule|_RuleDelayed...
]:=With[{nb=Replace[newNB,{
_Notebook:>
CreateDocument["",
ops,
WindowTitle->First@newNB,
StyleDefinitions->"PrivateStylesheetFormatting.nb",
Saveable->True],
None:>Automatic
}]},
SSNew[nb,defaultStyle,Next];
Do[
SSNew[nb,##]&@@If[MatchQ[s,_Directive],s,{s}],
{s,{styles}}];
Replace[nb,Automatic:>Null]
];
SSTemplate[
	newNB:_Notebook|_NotebookObject|None:None,
	defaultStyle:_DefaultStyle:DefaultStyle["Default.nb"],
	Default]:=
	SSTemplate[newNB,defaultStyle,
		"Notebook",
		"Title","Chapter","Subchapter",
		"Section","Subsection","Subsubsection",
		"Text","Code","Input",
		"Item","ItemParagraph"
		];


SSOpen[nb:_NotebookObject|Automatic:Automatic]:=
With[{notebook=Replace[nb,Automatic:>SSEditNotebook[]]},
	(*FrontEndTokenExecute@"EditStyleDefinitions";*)
Replace[
StyleDefinitions/.Options[notebook,StyleDefinitions],{
s:(_String|_FrontEnd`FileName):>
			SystemOpen@s,
n:(_Notebook):>
			CreateDocument[n,
				WindowTitle->"StyleDefintions for "<>FileNameTake@NotebookFileName[notebook]]
}
]
];


SSDefaultStyles[
	nb:_NotebookObject|Automatic:Automatic,
	styles__String]:=
	With[{sList={styles}},
		Do[
			SSEdit[nb,sList[[i]],DefaultNewCellStyle->sList[[i+1]]],
			{i,Length@sList-1}
			]
		];


typeMatchQ[type_String,types_]:=Which[
MatchQ[types,"*"],True,
MatchQ[types,Except@(
_List|
_String|
_StringExpression|
_Alternatives)],False,
MatchQ[types,_List],MemberQ[types,type],
MatchQ[type,_String|_StringExpression],StringMatchQ[type,types],
True,False
];
typeMatchQ[All,All]:=True;
typeMatchQ[type_Symbol,"*"]:=True;
typeMatchQ[type:Except[_String],_]:=False;
typeMatchQ[types_][type_]:=typeMatchQ[type,types];


styleNameMatchQ[s_StyleData,types_]:=
	If[Length@s==1,
		typeMatchQ[First@s,types],
		Length@s>0&&(
			typeMatchQ[First@s,Cases[Flatten@{types},_String|_Symbol]]||
				With[{styleDatas=
					If[Length@#>Length@s,
						Nothing,
						Join[
							List@@#,
							ConstantArray["*",Max@{Length@s-Length@#,0}]
							]
						]&/@
						Cases[Flatten@{types},_StyleData]},
					AnyTrue[styleDatas,
						And@@MapThread[typeMatchQ,{List@@s,#}]&]
					])
		];


styleDataMatchQ[s_StyleData,types_]:=
	With[{matchData=DeleteCases[s,Except[_String|_Symbol]]},
		MatchQ[s,
			Alternatives@@
				Replace[Flatten@{types},{
					DefaultStyle[d_]:>
						StyleData[StyleDefinitions->d],
					DefaultStyle[p_List,f_String]:>
						StyleData[StyleDefinitions->FrontEnd`FileName[{p},f]],
					DefaultStyle[a__,b_]:>
						StyleData[StyleDefinitions->StyleData[a,b]]
					},
					1]
				]||
			styleNameMatchQ[matchData,types]
		];
styleDataMatchQ[types_][s_]:=
	styleDataMatchQ[s,types];


cellMatchQ[cell_,types_,Optional[StyleData,StyleData]]:=
	Replace[
cell,
{
Cell[_,_String,___]:>False,
Cell[_?(
MatchQ[
Replace[#,_BoxData:>ToExpression[#,StandardForm,Hold]],
If[types===Default,
							StyleData[StyleDefinitions->_,___](*|
							Hold[StyleData[StyleDefinitions\[Rule]_,___]]*),
_StyleData?(styleDataMatchQ[types])
]
]&),
				___]:>True,
_->False
}
];
cellMatchQ[cell_,types_,Normal]:=Replace[
cell,
{Cell[_,_?(typeMatchQ[types]),___]:>True,
_:>False
}]
cellMatchQ[cell_,types_,_]:=False


stylesheetNotebook[nb_,file_String?FileExistsQ]:=Get@file;
stylesheetNotebook[nb_,file_FrontEnd`FileName]:=Get@ToFileName@file;
stylesheetNotebook[nb_NotebookObject,file_String]:=
	stylesheetNotebook[NotebookGet@nb,Quiet@NotebookDirectory@nb,file];
stylesheetNotebook[
		nb_Notebook,
		dir:(_String?DirectoryQ|Automatic|$Failed):Automatic,
		file_String]:=
	With[{testDir=
		Replace[Quiet@NotebookDirectory@nb,
			_NotebookDirectory|$Failed:>
			Replace[dir,$Failed|Automatic:>$UserDocumentsDirectory]
			]},
		If[FileExistsQ@FileNameJoin@{testDir,file},
			Get@FileNameJoin@{testDir,file},
			Replace[Cases[Flatten@Table[
							FileNames["*",FileNameJoin@{d,"FrontEnd","Stylesheets"}],
									{d,
										FileNames["*",{
											FileNameJoin@{$UserBaseDirectory,"Applications"},
											$InstallationDirectory
										}]
									}],
							s_?(FileNameTake@#===file&):>s],
					{
						{}:>$Failed,
						{s_,___}:>Get@s
				}
					]
				]
		];


SSCells[nb:_Notebook|_NotebookObject|Automatic:Automatic,
mode:Normal|StyleData:StyleData,
types:Except[StyleData|Normal|True|False]:"*",
	make:True|False:False]:=
	Replace[
		Select[
			Replace[
				Replace[nb,Automatic:>SSEditNotebook[]],{
						n_NotebookObject:>Cells[n],
						n_Notebook:>(First@NotebookTools`FlattenCellGroups[n])
						}],
			cellMatchQ[Replace[#,c_CellObject:>NotebookRead@c],types,mode]&
			],{
		l_List:>
			If[mode===StyleData&&make,
				With[{missingStyles=
					Select[Flatten[{types},1],
						With[{c=NotebookRead/@l},
							With[{s=#},
								Not@AnyTrue[c,cellMatchQ[#,s,StyleData]&]
								]&
							]
						]
					},
					SSNew[nb,missingStyles];
					Join[SSCells[nb,StyleData,missingStyles,False],l]
					],
				l]	
		}]


StylesheetNotebook[nb:_Notebook|_NotebookObject|Automatic:Automatic]:=
	With[{n=Replace[nb,Automatic:>SSEditNotebook[]]},
		Module[{styleDefs=StyleDefinitions/.Options[n,StyleDefinitions],
				parentNB,extraStyles},
				parentNB=Replace[styleDefs,
							sd_Notebook:>Replace[SSCells[sd,Default],
											{
												{___,c_}:>Last@First@First@c,
												{}->Notebook[{}]
											}]
								];
				extraStyles=Replace[styleDefs,{
								sd_Notebook:>SSCells[sd],
								_:>{}
								}];
				If[MatchQ[parentNB,_String|_FrontEnd`FileName],
					parentNB=Replace[
						stylesheetNotebook[n,parentNB],
						s_String:>Get@s];
					parentNB
					];
				Replace[
					NotebookTools`FlattenCellGroups@parentNB,{
						Notebook[cells_List,o___]:>
							With[{styleNB=Notebook[Flatten@{cells,extraStyles}]},
								Notebook[Join[
									SSCells[styleNB,Default],
									SSCells[styleNB]],
									o]
								],
						_->parentNB
						}
					]
				]
			];


SSStyles[nb:_Notebook|_NotebookObject|Automatic:Automatic]:=
	Module[
		{defaultCells=SSCells[nb,Default]},
		{
			With[{n=StylesheetNotebook@nb},
				defaultCells={
					defaultCells,
					If[n=!=$Failed,SSCells[n,Default],{}]};
					Cases[
						If[n=!=$Failed,
							SSCells[n],
							{}],
						Cell[StyleData[s:Except[_Rule]..,___Rule],___]:>Cell[StyleData[s]]
					]
				],
			Join@@defaultCells
		}
	];


SSApplyEdits[cells:{__CellObject}]:=
	With[{
		groups=GroupBy[cells,ParentNotebook],
		current=EvaluationCell[],
		inb=InputNotebook[]
		},
		KeyValueMap[
			With[{nb=#},
				Map[
					SelectionMove[#,All,Cell];
					FrontEndTokenExecute[nb,"ToggleShowExpression"]~Do~2;
					&,
					#2
					]
				]&,
			groups
			];
		If[inb===ParentNotebook@current,
			SelectionMove[current,All,Cell]
			];
		];
SSApplyEdits[nb:_CellObject|Automatic:Automatic]:=
	SSApplyEdits[{Replace[nb,Automatic:>EvaluationCell[]]}];


SSEdit[cellExprs:_Cell|{__Cell},
	conf:(_Rule|_RuleDelayed)..]:=
	With[{cells=Flatten@{cellExprs}},
		With[{del=Alternatives@@(((Rule|RuleDelayed)[First@#,_])&/@{conf})},
			Table[
				Join[
						DeleteCases[c,del],
						Cell[conf]/.(
							(h:Rule|RuleDelayed)[k_,f_Function]:>
								With[{o=f@(k/.Quiet@Options[c,k])},
									h[k,o]
									]
							)
					],
					{c,cells}
					]
				]
			]


SSEdit[
	cellObs:_CellObject|{__CellObject},
	conf:(_Rule|_RuleDelayed)..
	]:=
	With[{cells=Flatten@{cellObs}},
		Do[
			With[{oplist=
				Table[
					If[MatchQ[o,_Rule],
						With[{op=Options[c,First@o]},
							Replace[op,{
								{k_->v_,___}:>
									(k->
										Replace[Last@o,
											f_Function:>(f[v,c])]
										),
								{}->o
								}]
							],
						o
						],
					{o,{conf}}]
					},
			SetOptions[c,oplist]
			],
			{c,cells}];
		SSApplyEdits@cells;
		];


SSEdit[
	StyleData[nb:_NotebookObject],
	types:Except[_Rule|_RuleDelayed],
	conf:(_Rule|_RuleDelayed)..
	]:=
		With[{snb=StyleDefinitions/.Options[nb,StyleDefinitions]},
			SetOptions[nb,
				StyleDefinitions->Replace[snb,{
					_Notebook:>
						With[{n=NotebookTools`FlattenCellGroups@snb},
							ReplacePart[n,
								1->With[{c=
										Replace[
											SSCells[n,StyleData,types],
											l_?(Length@#<Length@Flatten@{types}&):>
												With[{stypes=First/@First/@l},
														Join[l,
															Cell[StyleData[#]]&/@DeleteCases[Flatten@{types},
																										Alternatives@@stypes]
															]
														]
											]},
											Join[
												DeleteCases[First@n,
													Alternatives@@DeleteDuplicates[
																Cell[StyleData[First@First@#,___],___]&/@c
															]
													],
												SSEdit[c,conf]
												]
										]
									]
							],
					_String:>
						Notebook[
							Prepend[
								SSEdit[Cell[StyleData[#]]&/@Flatten@{types},conf],
								Cell@StyleData[StyleDefinitions->snb]
								],
								StyleDefinitions->"PrivateStylesheetFormatting.nb"
								]
								
					}]
				]
			]


SSEdit[nb:_NotebookObject|Automatic:Automatic,
	mode:StyleData|Normal:StyleData,
	types:Except[_Rule|_RuleDelayed|StyleData|True|False|Normal]:All,
	make:True|False:False,
	conf:(_Rule|_RuleDelayed)..]:=
	With[{cells=SSCells[nb,mode,types,make]},
		If[Length@cells===0,
			$Failed,
	SSEdit[cells,conf]
			]
	];


SSValue[cellOb:_CellObject|{__CellObject},
	mode:CurrentValue|AbsoluteCurrentValue:AbsoluteCurrentValue,
	ops___]:=
	mode[cellOb,Flatten@{ops}];
SSValue[
	nb:_NotebookObject|Automatic:Automatic,
	mode:CurrentValue|AbsoluteCurrentValue:AbsoluteCurrentValue,
	cellStyle_,
	make:True|False:False,
	ops:Except[True|False]..]:=
	With[{cells=SSCells[nb,cellStyle,make]},
		Replace[cells,{
			c:{__}:>SSValue[c,ops],
			{}:>
				Map[
					#->Replace[
							mode[
								SSEditNotebook@nb,
								{StyleDefinitions,cellStyle,#}
								],
							$Failed->Inherited
							]&,
					Flatten@{ops}
					]
			}]
		];


SSSync[
	nb:_NotebookObject|Automatic:Automatic,
	toStyle_,
	fromStyle_,
	ops___]:=
	SSEdit[nb,toStyle,Sequence@@SSValue[nb,fromStyle,ops]];


SSDrop[cellObs:_CellObject|{__CellObject},ops__]:=
SSEdit[cellObs,Sequence@@Thread[{ops}->Inherited]]


SSDrop[
		nb:_NotebookObject|Automatic:Automatic,
		mode:StyleData|Normal:StyleData,
		types:Except[_Rule|StyleData|Normal]:All,
		ops__]:=
	With[{cells=SSCells[nb,mode,types]},
		SSDrop[cells,ops]
		];


SSEditRuleListOption[
	obs:{__CellObject}|{__NotebookObject},
	op_,
	new:(_Rule|_RuleDelayed)..]:=
	(
		Do[
			With[{newops=
				Flatten@{
					Replace[op/.Options[ob,op],Except[_List]:>{}],
					new
					}},
					SetOptions[ob,
						op->DeleteDuplicatesBy[ToString@*First]@newops
						];
				],
			{ob,obs}
			];
		SSApplyEdits[obs];
		);
SSEditRuleListOption[
	nb:_NotebookObject||Automatic:Automatic,
	cellStyles_,
	op_,
	events:(_Rule|_RuleDelayed)..
	]:=
	Replace[SSCells[nb,cellStyles],{
		c:{__}:>
			editRuleListOption[c,op,events],
		_->Null
		}];


SSEditEvents[
	nb:(_NotebookObject|_CellObject|{__CellObject}|Automatic):Automatic,
	op:(NotebookEventActions|CellEventActions|Automatic):Automatic,
	events:(_Rule|_RuleDelayed)..]:=
	With[{obop=
		Replace[nb,{
			Automatic:>
				{SSEditNotebook[nb],
					Replace[op,Automatic:>NotebookEventActions]
					},
			_CellObject|{__CellObject}:>
				{nb,
					Replace[op,Automatic:>CellEventActions]
					},
			_NotebookObject:>
				{nb,
					Replace[op,Automatic:>NotebookEventActions]
					}
			}]},
		SSEditRuleListOption[Flatten@{First@obop},Last@obop,events]
		];
SSEditEvents[
	nb:_NotebookObject|Automatic:Automatic,
	cellStyles:Except[NotebookEventActions|CellEventActions|Automatic|True|False],
	make:True|False:False,
	op:(NotebookEventActions|CellEventActions|Automatic):Automatic,
	events:(_Rule|_RuleDelayed)..
	]:=
	Replace[SSCells[nb,cellStyles,make],{
		c:{__}:>
			SSEditEvents[c,op,events],
		_->Null
		}];


SSEditAliases[
	nb:(_NotebookObject|_CellObject|{__CellObject}|Automatic):Automatic,
	events:(_Rule|_RuleDelayed)..]:=
	With[{obop=
		Replace[nb,{
			Automatic:>
				{SSEditNotebook[nb],
					InputAliases
					},
			_CellObject|{__CellObject}:>
				{nb,
					InputAliases
					},
			_NotebookObject:>
				{nb,
					InputAliases
					}
			}]},
		SSEditRuleListOption[Flatten@{First@obop},Last@obop,events]
		];
SSEditAliases[
	nb:_NotebookObject|Automatic:Automatic,
	cellStyles:Except[(_Rule|_RuleDelayed|True|False)],
	make:True|False:False,
	events:(_Rule|_RuleDelayed)..
	]:=
	Replace[SSCells[nb,cellStyles,make],{
		c:{__}:>
			SSEditAliases[c,events],
		_->Null
		}];


SSEditReplacements[
	nb:(_NotebookObject|_CellObject|{__CellObject}|Automatic):Automatic,
	events:(_Rule|_RuleDelayed)..]:=
	With[{obop=
		Replace[nb,{
			Automatic:>
				{SSEditNotebook[nb],
					InputAutoReplacements
					},
			_CellObject|{__CellObject}:>
				{nb,
					InputAutoReplacements
					},
			_NotebookObject:>
				{nb,
					InputAutoReplacements
					}
			}]},
		SSEditRuleListOption[Flatten@{First@obop},Last@obop,events]
		];
SSEditReplacements[
	nb:_NotebookObject|Automatic:Automatic,
	cellStyles:Except[(_Rule|_RuleDelayed|True|False)],
	make:True|False:False,
	events:(_Rule|_RuleDelayed)..
	]:=
	Replace[SSCells[nb,cellStyles,make],{
		c:{__}:>
			SSEditReplacements[c,events],
		_->Null
		}];


End[];




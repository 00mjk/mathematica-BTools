(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



NotebookToMarkdown::usage="Converts a notebook to markdown";
NotebookMarkdownSave::usage="Saves a notebook as markdown";


MarkdownToXML::usage=
	"Converts markdown to XML";


Begin["`Private`"];


$MarkdownSiteRoot=
	FileNameJoin@{
		$WebTemplatingRoot,
		"markdown"
		};


MarkdownSiteBase[f_String]:=
	Replace[FileNameSplit[f],{
		{d:Shortest[___],"content"|"output",___}:>FileNameJoin@{d},
		_:>f
		}]


MarkdownContentPath[f_String]:=
	Replace[FileNameSplit[f],{
		{Shortest[___],"content",p___}:>FileNameJoin@{p},
		_:>f
		}]


MarkdownOutputPath[f_String]:=
	Replace[FileNameSplit[f],{
		{Shortest[___],"output",p___}:>FileNameJoin@{p},
		_:>f
		}]


$markdownnewmdfiletemplate=
"`headers`

`body`
";


markdownFileMetadataTitle[t_,name_,opsassoc_]:=
	Replace[t,
		{
			Automatic:>name
			}];


markdownFileMetadataSlug[t_,name_,opsassoc_]:=
	Replace[t,
		{
			Automatic:>
				ToLowerCase@
					StringReplace[
						markdownFileMetadataTitle[
							Lookup[opsassoc,"Title",t],
							name,
							opsassoc
							],{
						Whitespace->"-",
						Except[WordCharacter]->""
						}]
			}];


markdownFileMetadata[val_,opsassoc_]:=
	Replace[val,{
		_List:>
			StringRiffle[ToString/@val,","],
		_DateObject:>
			StringReplace[DateString[val,"ISODateTime"],"T"->" "]
		}]


markdownMetadataFormat[name_,ops_]:=
	With[{opsassoc=Association@ops},
		Function[StringRiffle[#,"\n"]]@
			KeyValueMap[
				#<>": "<>
					StringReplace[
						ToString@
							Switch[#,
								"Title",
									markdownFileMetadataTitle[#2,name,opsassoc],
								"Slug",
									markdownFileMetadataSlug[#2,name,opsassoc],
								_,
									markdownFileMetadata[#2,opsassoc]
								],
						"\n"->"\ "
						]&,
				KeySortBy[
					Switch[#,"Title",0,_,1]&
					]@opsassoc
				]
		];


MarkdownNotebookMetadata[c:{Cell[_BoxData,"Metadata",___]...}]:=
	Join@@Select[Normal@ToExpression[First@First@#]&/@c,OptionQ];
MarkdownNotebookMetadata[nb_Notebook]:=
	MarkdownNotebookMetadata@
		Cases[
			NotebookTools`FlattenCellGroups[First@nb],
			Cell[_BoxData,"Metadata",___]
			];
MarkdownNotebookMetadata[nb_NotebookObject]:=
	MarkdownNotebookMetadata@
		Cases[
			NotebookRead@Cells[nb,CellStyle->"Metadata"],
			Cell[_BoxData,___]
			]


MarkdownNotebookDirectory[nb_]:=
	Replace[Quiet@NotebookDirectory[nb],
		Except[_String?DirectoryQ]:>
			With[{
				d=
					FileNameJoin@{
						$TemporaryDirectory,
						"markdown_export"
						}
				},
				If[!DirectoryQ[d],
					CreateDirectory[d]
					];
				d
				]
		];


MarkdownNotebookContentPath[nb_]:=
	MarkdownContentPath@
		Replace[Quiet@NotebookFileName[nb],
			Except[_String?FileExistsQ]:>
				FileNameJoin@{
					$TemporaryDirectory,
					"markdown_export",
					"markdown_notebook.nb"
					}
			]


NotebookToMarkdown[nb_NotebookObject]:=
	With[{
		dir=MarkdownNotebookDirectory[nb],
		name=MarkdownNotebookContentPath[nb]
		},
		If[!DirectoryQ[dir],
			$Failed,
			With[{
				d2=
					MarkdownSiteBase[dir],
				path=
					FileNameJoin@ConstantArray["..",1+FileNameDepth[MarkdownContentPath[dir]]]
				},
				StringRiffle[
					DeleteCases[""]@
						iNotebookToMarkdown[
							d2,
							path,
							name,
							#
							]&/@NotebookRead@
							Cells[nb,
								CellStyle->{
									"Section","Subsection","Subsubsection",
									"Code","Output","Text",
									"Quote","PageBreak",
									"Item","Subitem",
									"ItemNumbered","SubitemNumbered",
									"FencedCode"
									}
								],
					"\n\n"
					]
				]
			]
		];
NotebookToMarkdown[nb_Notebook]:=
	With[{
		nb2=CreateDocument@Insert[nb,Visible->False,2]
		},
		CheckAbort[
			(NotebookClose[nb2];#)&@
				NotebookToMarkdown[nb2],
			NotebookClose[nb2];
			$Aborted
			]
		]


iNotebookToMarkdown//Clear


$iNotebookToMarkdownRasterizeBaseForms=
	TemplateBox[__,
		InterpretationFunction->("Dataset[<>]"& ),
		__
		]|
	TemplateBox[__,
		"DateObject",
		__
		]|
	InterpretationBox[
		RowBox[{
			TagBox[_String,"SummaryHead",___]|
				StyleBox[TagBox[_String,"SummaryHead",___],"NonInterpretableSummary"],
			__
			}],
		__
		]|
	_DynamicBox|_DynamicModuleBox;
$iNotebookToMarkdownRasterizeForms=
	$iNotebookToMarkdownRasterizeBaseForms|
		_RowBox?(
			Not@*FreeQ[
				$iNotebookToMarkdownRasterizeBaseForms|
				$iNotebookToMarkdownOutputStringBaseForms
				])


$iNotebookToMarkdownOutputStringBaseForms=
	_GraphicsBox|_Graphics3DBox|
		TagBox[__,_Manipulate`InterpretManipulate]|
		TagBox[_GridBox,"Column"|"Grid"]|
		TemplateBox[_,"Legended",___];
$iNotebookToMarkdownOutputStringForms=
	$iNotebookToMarkdownOutputStringBaseForms|
	TooltipBox[
		_?(MatchQ[#,$iNotebookToMarkdownOutputStringForms]&),
		__
		]|
	InterpretationBox[
		_?(MatchQ[#,$iNotebookToMarkdownOutputStringForms]&),
		__
		];


markdownIDHook[id_]:=
	TemplateApply[
		"<a id=\"``\" style=\"width:0;height:0;margin:0;padding:0;\">&zwnj;</a>",
		ToLowerCase@
			StringReplace[StringTrim@id,
				{Whitespace->"-",Except[WordCharacter]->""}
				]
		];


iNotebookToMarkdown[root_,path_,name_,
	StyleBox[a__,FontSlant->"Italic",b___]]:=
	Replace[iNotebookToMarkdown[root,path,name,StyleBox[a,b]],
		s:Except[""]:>
			"_"<>s<>"_"
		];
iNotebookToMarkdown[root_,path_,name_,
	StyleBox[a___,FontWeight->"Bold"|Bold,b___]]:=
	Replace[iNotebookToMarkdown[root,path,name,StyleBox[a,b]],
		s:Except[""]:>
			"*"<>s<>"*"
		];
iNotebookToMarkdown[root_,path_,name_,
	StyleBox[a_,___]]:=
	Replace[iNotebookToMarkdown[root,path,name,a],
		s:Except[""]:>
			"*"<>s<>"*"
		];


iNotebookToMarkdown[root_,path_,name_,Cell[a___,CellTags->t_,b___]]:=
	Replace[iNotebookToMarkdown[root,path,name,Cell[a,b]],
		s:Except[""]:>
			markdownIDHook[
				ToLowerCase@StringJoin@Flatten@{t}
				]<>"\n\n"<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[a___,FontSlant->"Italic"|Italic,b___]]:=
	Replace[iNotebookToMarkdown[root,path,name,Cell[a,b]],
		s:Except[""]:>
			"_"<>s<>"_"
		];
iNotebookToMarkdown[root_,path_,name_,Cell[a___,FontWeight->"Bold"|Bold,b___]]:=
	Replace[iNotebookToMarkdown[root,path,name,Cell[a,b]],
		s:Except[""]:>
			"*"<>s<>"*"
		];


iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Section",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>
			Replace[
				FrontEndExecute@
					ExportPacket[Cell[t],"PlainText"],{
				{id_String,___}:>
					markdownIDHook[id]<>"\n\n",
				_->""
				}]<>
			"# "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Subsection",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>
			Replace[
				FrontEndExecute@
					ExportPacket[Cell[t],"PlainText"],{
				{id_String,___}:>
					markdownIDHook[id]<>"\n\n",
				_->""
				}]<>
			"## "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Subsubsection",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>
			"### "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Subsububsection",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>
			"#### "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Subsububsubsection",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>
			"##### "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Subsububsubsubsection",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>
			"###### "<>s
		];


iNotebookToMarkdown[root_,path_,name_,Cell[t_,"PageBreak",___]]:=
	"---"


iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Text",___]]:=
	iNotebookToMarkdown[root,path,name,t];


iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Item",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>"* "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"ItemParagraph",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>StringReplace[s,StartOfLine->"  "]
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Subitem",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>"  * "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Subsubitem",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>"    * "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"SubitemParagraph",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>StringReplace[s,StartOfLine->"   "]
		];


iNotebookToMarkdown[root_,path_,name_,Cell[t_,"ItemNumbered",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>"1. "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"SubitemNumbered",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>"  1. "<>s
		];
iNotebookToMarkdown[root_,path_,name_,Cell[t_,"SubsubitemNumbered",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>"    1. "<>s
		];


iNotebookToMarkdown[root_,path_,name_,Cell[t_,"Quote",___]]:=
	Replace[iNotebookToMarkdown[root,path,name,t],
		s:Except[""]:>StringReplace[s,StartOfString->"> "]
		];


iNotebookToMarkdown[root_,path_,name_,Cell[e_,___]]:=
	iNotebookToMarkdown[root,path,name,e]


$iNotebookToMarkdownToStripStartBlockFlag=
	"\n\"<!--<<<[[<<!\"\n";
$iNotebookToMarkdownToStripEndBlockFlag=
	"\n\"!>>]]>>>--!>\"\n";


$iNotebookToMarkdownToStripStart=
	"\"<!--STRIP_ME_FROM_OUTPUT>";
$iNotebookToMarkdownToStripEnd=
	"<STRIP_ME_FROM_OUTPUT--!>\"";


$iNotebookToMarkdownUnIndentedLine=
	"\"<!NO_INDENT>\"";


notebookToMarkdownStripBlock[s_]:=
	$iNotebookToMarkdownToStripStartBlockFlag<>
		$iNotebookToMarkdownUnIndentedLine<>
			$iNotebookToMarkdownToStripStart<>
				StringTrim@s<>
			$iNotebookToMarkdownToStripEnd<>
	$iNotebookToMarkdownToStripEndBlockFlag


markdownCodeCellGraphicsFormat[root_,path_,name_,e_,
	style_,postFormat_]:=
	Replace[
		StringReplace[
			StringReplace[
				First@FrontEndExecute@
					FrontEnd`ExportPacket[
						Cell[e/.{
							b:$iNotebookToMarkdownRasterizeForms:>
								Replace[
									iNotebookToMarkdown[root,path,name,b,
										Replace[style,{
											"InputText"->"Input",
											_->Last@Flatten@{style}
											}]
										],
									s:Except[""]:>
										notebookToMarkdownStripBlock[s]
								],
							g:$iNotebookToMarkdownOutputStringForms:>
								Replace[
									iNotebookToMarkdown[root,path,name,g],
									s:Except[""]:>
										notebookToMarkdownStripBlock[s]
									],
							s_String?(StringMatchQ["\t"..]):>
								StringReplace[s,"\t"->" "]
							},
						PageWidth->700
						],
						First@Flatten@{style}
						],
					{
						$iNotebookToMarkdownToStripStartBlockFlag~~
							inner:Shortest[__]~~
							$iNotebookToMarkdownToStripEndBlockFlag:>
								StringReplace[
									StringReplace[inner,{"\\\n"->""}],{
									$iNotebookToMarkdownToStripStart|
										$iNotebookToMarkdownToStripEnd->"",
									StartOfLine->$iNotebookToMarkdownUnIndentedLine
									}]
						}],
			{
				$iNotebookToMarkdownUnIndentedLine~~" \\\n"->
					$iNotebookToMarkdownUnIndentedLine,
				$iNotebookToMarkdownToStripStart~~
					inner:Shortest[__]~~
					$iNotebookToMarkdownToStripEnd:>
						StringReplace[inner,{
							StartOfLine->$iNotebookToMarkdownUnIndentedLine,
							StartOfLine~~Whitespace->"",
							"\\\n"->""
							}]
				}],
		s:Except[""]:>
				StringReplace[postFormat@s,{
				("\t"...)~~$iNotebookToMarkdownUnIndentedLine->
					""
				}]
		];


iNotebookToMarkdown[root_,path_,name_,Cell[e_,"FencedCode",___]]:=
	markdownCodeCellGraphicsFormat[root,path,name,e,
		"InputText",
		Replace[StringSplit[#,"\n",2],
			{
				{
					s_?(StringMatchQ[Except[WhitespaceCharacter]..]@*StringTrim),
					b_
					}:>
					"```"<>StringTrim[s]<>"\n"<>b<>"\n```",
				_:>
					"```\n"<>#<>"\n"<>"```"
				}
			]&
		];
iNotebookToMarkdown[root_,path_,name_,Cell[e_,"Code"|"Input",___]]:=
	markdownCodeCellGraphicsFormat[root,path,name,e,
		"InputText",
		StringReplace[#,StartOfLine->"\t"]&
		];
iNotebookToMarkdown[root_,path_,name_,Cell[e_,"InlineInput",___]]:=
	markdownCodeCellGraphicsFormat[root,path,name,e,
		"InputText",
		"```"<>#<>If[StringEndsQ[#,"`"]," ",""]<>"```"&
		];
iNotebookToMarkdown[root_,path_,name_,Cell[e_,"Output",___]]:=
	markdownCodeCellGraphicsFormat[root,path,name,e,
		{"InputText","Output"},
		StringReplace["(*Out:*)\n\n"<>#,{
			StartOfLine->"\t"
			}]&
		]


iNotebookToMarkdown[root_,path_,name_,s_String]:=
	s;
iNotebookToMarkdown[root_,path_,name_,s_TextData]:=
	StringRiffle[
		Map[iNotebookToMarkdown[root,path,name,#]&,List@@s//Flatten]
		];
iNotebookToMarkdown[root_,path_,name_,b_BoxData]:=
	Replace[
		iNotebookToMarkdown[root,path,name,First@b],
		"":>
			First@
				FrontEndExecute@
					FrontEnd`ExportPacket[
						Cell[b],
						"PlainText"
						]
		];


iNotebookToMarkdown[root_,path_,name_,
	TagBox[
		GridBox[rows_,___],
		"Column"
		]
	]:=
	StringRiffle[
		StringReplace[
			iNotebookToMarkdown[root,path,name,#],
			"\n"->""
			]&/@First/@rows,
		"\n\n"
		];


iNotebookToMarkdown[root_,path_,name_,
	TagBox[
		GridBox[rows_,___],
		"Grid"
		]
	]:=
	StringRiffle[
		StringRiffle[
			Map[
				StringReplace[
					iNotebookToMarkdown[root,path,name,#],
					"\n"->""
					]&,
				#],
			"    "
			]&/@rows,
		"\n\n"
		];


iNotebookToMarkdown[
	root_,
	path_,
	name_,
	ButtonBox[d_,
		o___,
		BaseStyle->"Hyperlink",
		r___
		]]:=
	With[{t=iNotebookToMarkdown[root,path,name,d]},
		Replace[
			FirstCase[
				Flatten@List@
					Replace[
						Lookup[{o,r},ButtonData,t],
						s_String?(StringFreeQ["/"]):>"#"<>s
						],
				_String|_FrontEnd`FileName|_URL|_File,
				t
				],{
			URL[s_String?(StringContainsQ["_download=True"])]:>
				With[{parse=URLParse[s]},
					If[MatchQ[Lookup[parse["Query"],"_download",False],True|"True"],
						(*Download links*)
						"<a href=\""<>
							URLBuild@
								ReplacePart[parse,
									"Query"->
										Normal@
											KeyDrop[Association@parse["Query"],"_download"]
									]<>"\" download>"<>t<>"</a>",
						"["<>t<>"]("<>
							iNotebookToMarkdown[root,path,name,s]<>")"
						]
					],
			e_:>
				"["<>t<>"]("<>
					iNotebookToMarkdown[root,path,name,e]<>")"
			}]
		
		];


iNotebookToMarkdown[
	root_,
	path_,
	name_,
	ButtonBox[d_,
		o___,
		BaseStyle->"Link",
		r___
		]]:=
	With[{t=iNotebookToMarkdown[root,path,name,d]},
		"[```"<>t<>If[StringEndsQ[t,"`"]," ",""]<>"```]("<>
			Replace[
				FirstCase[
					Flatten@{Lookup[{o,r},ButtonData,t]},
					_String,
					t
					],
				s_String:>
					If[StringStartsQ[s,"paclet:"],
						With[{page=Documentation`ResolveLink[s]},
							URLBuild@
								Flatten@{
									If[StringQ[page]&&StringStartsQ[page,$InstallationDirectory],
										"https://reference.wolfram.com/language",
										"https://www.wolframcloud.com/objects/b3m2a1.paclets/reference"
										],
									URLParse[s,"Path"]
									}<>".html"
							],
						With[{page=
							Replace[Documentation`ResolveLink[s],{
								Null:>
									If[StringStartsQ[s,"paclet:"],
										FileNameJoin@URLParse[s,"Path"],
										FileNameJoin@{"ref",s}
										]
								}]
							},
							URLBuild@
								Flatten@{
									If[StringStartsQ[page,$InstallationDirectory],
										"https://reference.wolfram.com/language",
										"https://www.wolframcloud.com/objects/b3m2a1.paclets/reference"
										],
									ReplacePart[#,
										If[Length[#]==2,1,2]->
											ToLowerCase@
												StringReplace[
													#[[If[Length[#]==2,1,2]]],
													"ReferencePages"->"ref"
													]
										]&@DeleteCases["System"]@
									FileNameSplit@Echo@
										(StringTrim[#,"."~~FileExtension[#]]<>".html")&@
											Replace[
												Replace[FileNameSplit[page],{a___,"Symbols",b_}:>{a,b}],{
												{___,p_,"Documentation","English",e___}:>
													FileNameJoin@{p,e},
												{___,a_,b_,c_}:>
													FileNameJoin@{a,b,c},
												_:>
													page
												}]
								}
							]
						]
				]
			<>")"
		];


markdownNotebookHashExport[
	root_,
	path_,
	name_,
	expr_,
	ext_,
	fbase_:Automatic,
	alt_:Automatic,
	pre_:Identity,
	hash_:Automatic
	]:=
	With[{
		fname=
			Replace[fbase,
				Automatic:>
					ToLowerCase[
						StringReplace[
							StringTrim[name,FileExtension[name]],{
							Whitespace|$PathnameSeparator->"-",
							Except[WordCharacter]->""
							}]
						]<>"-"<>ToString@Replace[hash,Automatic:>Hash[expr]]<>"."<>ext
				]
		},
		Sow[
			{"img",fname}->pre@expr,
			"MarkdownExport"
			];
		"!["<>
			Replace[alt,
				Automatic:>StringTrim[fname,"."<>ext]
				]<>"]("<>
			StringRiffle[{"{filename}","img",fname},"/"]<>")"
		]


iNotebookToMarkdown[
	root_,
	path_,
	name_,
	InterpretationBox[
		g_?(MatchQ[$iNotebookToMarkdownOutputStringForms]),
		__
		],
	fbase_:Automatic,
	alt_:Automatic
	]:=
	iNotebookToMarkdown[
		root,
		path,
		name,
		g,
		fbase,
		alt
		]


iNotebookToMarkdown[
	root_,
	path_,
	name_,
	TooltipBox[
		g:$iNotebookToMarkdownOutputStringForms,
		t_,
		___],
	fbase_:Automatic,
	alt_:Automatic
	]:=
	iNotebookToMarkdown[
		root,
		path,
		name,
		g,
		fbase,
		If[alt===Automatic,iNotebookToMarkdown@t,alt]
		]


iNotebookToMarkdown[
	root_,
	path_,
	name_,
	g:$iNotebookToMarkdownRasterizeForms,
	style_:"Output"
	]:=
	markdownNotebookHashExport[
		root,
		path,
		name,
		g,
		"png",
		Automatic,
		Automatic,
		Rasterize[Cell[BoxData@#,style]]&
		]


iNotebookToMarkdown[
	root_,
	path_,
	name_,
	g:TagBox[__,_Manipulate`InterpretManipulate],
	fbase_:Automatic,
	alt_:Automatic
	]:=
	With[{
		expr=
			Replace[
				ToExpression[g],
				(AnimationRunning->False)->
					(AnimationRunning->True),
				1
				]
		},
		markdownNotebookHashExport[
			root,
			path,
			name,
			expr,
			"gif",
			alt,
			fbase,
			Identity,
			Replace[expr,{
				m:Verbatim[Manipulate][
					_,
					l__List,
					___
					]:>
					With[{syms=
						Alternatives@@
							ReleaseHold[
								Function[
									Null,
									FirstCase[
										Hold[#],
										s_Symbol:>HoldPattern[s],
										nosym,
										\[Infinity]
										],
									HoldFirst
									]/@Hold[l]
								]
						},
						Hash@DeleteCases[Hold[m],syms,\[Infinity]]
						],
				_:>Automatic
				}]
			]
		];


iNotebookToMarkdown[
	root_,
	path_,
	name_,
	g:_GraphicsBox|_Graphics3DBox|TemplateBox[_,"Legended",___],
	fbase_:Automatic,
	alt_:Automatic
	]:=
	markdownNotebookHashExport[
		root,
		path,
		name,
		g,
		"png",
		alt,
		fbase,
		Cell[BoxData[#],"Output"]&
		]


iNotebookToMarkdown[root_,path_,name_,f_FrontEnd`FileName]:=
	StringRiffle[FileNameSplit[ToFileName[f]],"/"];
iNotebookToMarkdown[root_,path_,name_,u:_URL]:=
	First@u;
iNotebookToMarkdown[root_,path_,name_,f_File]:=
	StringRiffle[FileNameSplit[First[f]],"/"];


iNotebookToMarkdown[root_,path_,name_,e_]:=
	"";


NotebookMarkdownSave[
	nbObj:_NotebookObject|Automatic:Automatic
	]:=
	With[{nb=Replace[nbObj,Automatic:>InputNotebook[]]},
		With[{
			meta=MarkdownNotebookMetadata[nb]
			},
			If[Lookup[meta,"_Save",True]=!=False,
				With[{
					md=
						Reap[
							NotebookToMarkdown[nb],
							"MarkdownExport"
							],
					root=
						MarkdownSiteBase@
							MarkdownNotebookDirectory[nb]
					},
					If[!FileExistsQ@
							FileNameJoin@Flatten@{root,"content",First[#]},
						Export[
							FileNameJoin@Flatten@{root,"content",First[#]},
							Last[#]
							]
						]&/@Last[md];
					Export[
						StringReplace[NotebookFileName[nb],".nb"~~EndOfString->".md"],
						StringTrim@
							TemplateApply[
								$markdownnewmdfiletemplate,
								<|
									"headers"->
										markdownMetadataFormat[
											FileBaseName@NotebookFileName[nb],
											Association@
												Flatten[
													{
														"Modified":>Now,
														meta
														}
													]
											],
									"body"->md[[1]]
									|>
								],
						"Text"
						]
					]
				]
			]
		]


markdownToXMLFormat//ClearAll


markdownToXMLFormat["Meta",text_]:=
	XMLElement["meta",
		Normal@AssociationThread[
			{"name","content"},
			StringTrim@
				StringSplit[#,":",2]
			],
		{}
		]&/@StringSplit[text,"\n"];


markdownToXMLFormat[
	"FenceBlock",
	text_
	]:=
	With[{
		striptext=
			StringSplit[
				StringTrim[
					text,
					StringRepeat["`",
						StringLength@text-
							StringLength@StringTrim[text,StartOfString~~("`"..)]
						]
					],
				"\n",
				2
				]
		},
		XMLElement["pre",
			{},
			{
				XMLElement["code",
					If[!StringMatchQ[First@striptext,Whitespace],
						{"class"->"language-"<>StringTrim[First@striptext]},
						{}
						],
					{
						"\n"<>Last@striptext
						}
					]
				}
			]
		]


markdownToXMLFormat[
	"CodeBlock",
	text_
	]:=
	With[{
		stripableWhitespace=
			First@
				MinimalBy[
					StringCases[text,
						StartOfLine~~w:Whitespace?(StringFreeQ["\n"])~~
							Except[WhitespaceCharacter]:>w
						],
					StringLength
					]
		},
		XMLElement["pre",
			{},
			{
				XMLElement["code",
					{},
					{
						StringTrim@
							StringReplace[
								text,
								StartOfLine~~stripableWhitespace->""
								]
						}
					]
				}
			]
		]


markdownToXMLFormat[
	"QuoteBlock",
	text_
	]:=
	With[{
		quoteStripped=
			StringReplace[
				text,
				StartOfLine~~">"->""
				]
		},
		XMLElement["blockquote",
			{},
			markdownToXML[quoteStripped]
			]
		]


markdownToXMLFormat[
	"Header",
	text_
	]:=
	With[{t=StringTrim[text]},
		XMLElement[
			"h"<>
				ToString[StringLength[t]-
					StringLength[StringTrim[t,StartOfString~~"#"..]]],
			{},
			markdownToXML[StringTrim[t,StartOfString~~"#"..],$markdownToXMLElementRules]
			]
		]


markdownToXMLItemRecursiveFormat[l_]:=
	With[
		{
			number=l[[1,1,2]]
			},
		XMLElement[
			Switch[l[[1,1,1]],
				DigitCharacter,
					"ol",
				_,
					"ul"
				],
			{},
			Flatten@Replace[
				SplitBy[l,
					#[[1,2]]==number&
					],
				{
					mainlist:
						{
								{_,number}->_,
								___
								}:>
							Last/@mainlist,
					sublist_:>
						markdownToXMLItemRecursiveFormat[sublist]
					},
				1
				]
			]
		]


markdownToXMLFormat["Item",text_String]:=
	With[{
		lines=
			StringJoin/@
				Partition[
					StringSplit[text,
						StartOfLine~~
							ws:(Whitespace|"")~~
								thing:("* "|"- "|((DigitCharacter..~~"."))):>
							ws<>thing
						],
					2
					]//StringTrim
		},
		markdownToXMLItemRecursiveFormat/@
			SplitBy[
				With[{
					subtype=
						Floor[
							(StringLength[#]
								-StringLength@StringTrim[#,StartOfString~~Whitespace])/2
							],
					thingtype=
						Replace[
							StringTake[
								StringTrim[#,StartOfString~~Whitespace],
								2],{
							t:("* "|"- "):>t,
							_->DigitCharacter
							}]
					},
					{thingtype,subtype}->
						XMLElement["li",{},
							markdownToXML@
								StringTrim[
									StringTrim[#,
										(Whitespace|"")~~
											("* "|"- "|((DigitCharacter..~~". ")))
										]
									]
							]
					]&/@lines,
			#[[1,1]]&
			]
	]


markdownToXMLFormat[
	"Delimiter",
	_
	]:=
	XMLElement["hr",{},{}]


markdownToXMLFormat[
	"CodeLine",
	text_
	]:=
	With[{
		striptext=
			StringTrim[
				text,
				StringRepeat["`",
					StringLength@text-
						StringLength@StringTrim[text,StartOfString~~("`"..)]
					]
				]
		},
		XMLElement["code",{},{striptext}]
		]


markdownToXMLFormat[
	"XMLBlock"|"XMLLine",
	text_
	]:=
	FirstCase[
		ImportString[text,{"HTML","XMLObject"}],
		XMLElement["body",_,b_]:>b,
		"",
		\[Infinity]
		]


markdownToXMLFormat[
	"Link",
	text_
	]:=
	With[{
		bits=
			StringSplit[
				text,
				"](",
				2
				]
		},
		XMLElement["a",
			{
				"href"->
					StringTrim[Last[bits],")"]
				},
			markdownToXML[
				StringTrim[First[bits],"["],
				$markdownToXMLElementRules
				]
			]
		]


markdownToXMLFormat[
	"Image",
	text_
	]:=
	With[{
		bits=
			StringSplit[
				text,
				"](",
				2
				]
		},
		XMLElement["img",
			{
				"src"->
					StringTrim[Last[bits],")"],
				"alt"->
					StringTrim[First[bits],"!["]
				},
			{}
			]
		]


markdownToXMLFormat[t_,text_String]:=
	XMLElement[t,{},{text}]


$markdownToXMLMeta=
	meta:(
		StartOfString~~
			((StartOfLine~~
					(Whitespace|"")~~
					Except[WhitespaceCharacter]..~~
					(Whitespace|"")~~":"~~Except["\n"]...~~"\n")..)
		):>
			{
				"Meta"->meta
				}


$markdownToXMLFenceBlock=
	Shortest[
		fence:(
			StartOfLine~~(r:Repeated["`",{3,\[Infinity]}])~~
				Except["`"]~~s__~~Except["`"]~~
				StartOfLine~~(b:Repeated["`",{3,\[Infinity]}])
			)/;(
				StringLength[r]==StringLength[b]&&
					Length[StringSplit[fence,"\n"]]>2
				)
		]:>
		{
			"FenceBlock"->fence
			};


$markdownToXMLCodeBlock=
	code:
		Longest[
			((StartOfString|"\n")~~"    "~~Except["\n"]..~~"\n")~~
				(((StartOfLine|(StartOfLine~~"    "~~Except["\n"]..))~~("\n"|EndOfString))...)
			]:>
		"CodeBlock"->code;


$markdownToXMLDelimiter=
	t:(
		(StartOfString|StartOfLine)~~
			(Whitespace|"")~~
			Repeated["-"|"_",{3,\[Infinity]}]~~
			Except["\n"]...
			):>
		"Delimiter"->t


$markdownToXMLHeader=
	t:(StartOfLine~~(Whitespace|"")~~Longest["#"..]~~Except["\n"]..):>
		"Header"->t


$markdownToXMLQuoteBlock=
	q:(
			(StartOfLine~~">"~~
				Except["\n"]..~~("\n"|EndOfString)
				)..
			):>
		"QuoteBlock"->q


$markdownToXMLLineIdentifier=
	("* "|"- "|((DigitCharacter..)~~". "))


$markdownToXMLItemLine=
	(
		(StartOfLine|StartOfString)~~
			(Whitespace?(StringFreeQ["\n"])|"")~~
			$markdownToXMLLineIdentifier~~
				Except["\n"]...~~(EndOfLine|EndOfString)
		);


$markdownToXMLItemSingle=
	$markdownToXMLItemLine~~
		(
			(("\n"~~(Except["\n"]..)~~EndOfLine))...
			);
$markdownToXMLItemBlock=
	t:
		Repeated[
			$markdownToXMLItemSingle~~
				("\n\n"|"")
			]:>
		"Item"->t


$markdownToXMLLink=
	o:(Except["!"]|StartOfLine|StartOfString)~~
		link:("["~~Except["]"]..~~"]("~~Except[")"]..~~")"):>
		{
			"Orphan"->o,
			"Link"->link
			}


$markdownToXMLImage=
	img:("!["~~Except["]"]..~~"]("~~Except[")"]..~~")"):>
		"Image"->img


$markdownToXMLCodeLine=
	Shortest[
		o:(Except["`"]|StartOfLine|StartOfString)~~
			code:(
				(r:"`"..)~~
					Except["`"]~~__~~Except["`"]~~
					(b:"`"..)
				)/;StringLength[r]==StringLength[b]
		]:>
		{
			"Orphan"->o,
			"CodeLine"->code
			}


$markdownToXMLXMLLine=
	xml:("<"~~Except["<"]..~~"/>"):>
		("XMLLine"->xml)


$markdownToXMLXMLBlock=
	cont:(
		"<"~~t:WordCharacter..~~__~~
			"</"~~t2:WordCharacter..~~">"
		)/;t==t2&&StringCount[cont,"<"<>t]==StringCount[cont,"</"<>t]:>
		("XMLBlock"->cont)


$markdownToXMLBlockRules={
	$markdownToXMLFenceBlock,
	$markdownToXMLCodeBlock,
	$markdownToXMLDelimiter,
	$markdownToXMLHeader,
	$markdownToXMLItemBlock,
	$markdownToXMLQuoteBlock
	};


$markdownToXMLElementRules={
	$markdownToXMLLink,
	$markdownToXMLImage,
	$markdownToXMLCodeLine,
	$markdownToXMLXMLBlock,
	$markdownToXMLXMLLine
	};


$markdownToXMLNewLineElements=
	{
		"img"
		};


markdownToXMLPrep[text_String,rules:_List|Automatic:Automatic]:=
	With[{baseData=
		Fold[
			Flatten@
				Replace[
					Replace[#,
						{
							baseText_String:>{baseText},
							StringExpression[l__]:>
								List[l]
							}
						],
					{
						baseString_String:>
							Replace[StringReplace[baseString,#2],
								StringExpression[l__]:>
									List[l]
								]
						},
					1]&,
			text,
			Replace[rules,
				Automatic:>$markdownToXMLBlockRules
				]
			]
		},
		If[StringQ@baseData,
			baseData,
			Flatten@
				ReplaceAll[
					("Orphan"->_):>Sequence@@{}
					]@
				ReplaceRepeated[
					Flatten[List@@baseData],
					{a___,t_String,"Orphan"->o_,b___}:>
						{a,markdownToXMLPrep[t<>o],b}
					]
			]
		]


markdownToXML//Clear


markdownToXML[
	text_String,
	rules:_List|Automatic:Automatic,
	extraBlockRules:_List:{},
	extraElementRules:_List:{}
	]:=
	Block[{
		$markdownToXMLBlockRules=
			Join[extraBlockRules,$markdownToXMLBlockRules],
		$markdownToXMLElementRules=
			Join[extraElementRules,$markdownToXMLElementRules]
		},
		Flatten@
			Replace[
				markdownToXMLPrep[text,rules],{
					s_String:>
						If[rules===Automatic,
							Flatten@List@
								markdownToXMLPostProcess1[s],
							{s}
							],
					l_List:>
						Replace[l,
							{
								s_String:>
									If[rules===Automatic,
										markdownToXMLPostProcess1[s],
										s
										],
								(r_->s_):>
									markdownToXMLFormat[r,s]
								},
							1
							]
				}]
		]


markdownToXMLPostProcess1[s_]:=
	SplitBy[
		Replace[
			DeleteCases[_String?(StringMatchQ[Whitespace])]@
				Flatten@List@
					markdownToXML[#,$markdownToXMLElementRules],
			{
				{e_XMLElement}:>e,
				e:Except[{_XMLElement}]:>
					XMLElement["p",{},
						Replace[Flatten@{e},
							str_String:>
								StringTrim[str],
							1
							]
						]
				}
			]&/@
			Select[Not@*StringMatchQ[Whitespace]]@
				StringSplit[s,"\n\n"]//Flatten,
		Replace[{
			XMLElement[Alternatives@@$markdownToXMLNewLineElements,__]:>
				RandomReal[],
			_->True
			}]
		]


markdownToXMLPreProcess[t_String]:=
	StringReplace[t,{
		("\n"~~Whitespace?(StringFreeQ["\n"])~~EndOfLine)->"\n",
		"\[IndentingNewLine]"->"\n\t",
		"\t"->"    "
		}]


Options[MarkdownToXML]=
	{
		"StripMetaInformation"->True,
		"HeaderElements"->{"meta"},
		"BlockRules"->{},
		"ElementRules"->{}
		};
MarkdownToXML[
	s_String?(Not@*FileExistsQ),
	ops:OptionsPattern[]
	]:=
	With[{
		sm=TrueQ@OptionValue["StripMetaInformation"],
		he=OptionValue["HeaderElements"],
		er=Replace[OptionValue["ElementRules"],Except[_?OptionQ]:>{}],
		br=Replace[OptionValue["BlockRules"],Except[_?OptionQ]:>{}]
		},
		Replace[
			GatherBy[
				markdownToXML[
					markdownToXMLPreProcess[s],
					Automatic,
					Join[
						br,
						If[sm,
							{
								$markdownToXMLMeta
								},
							{}
							]
						],
					er
					],
				MatchQ[First[#],he]&
				],
		{
			{h_,b_}:>
				XMLElement["html",
					{},
					{
						XMLElement["head",{},h],
						XMLElement["body",{},b]
						}
					],
			{b_}:>
				XMLElement["html",
					{},
					{
						XMLElement["body",{},b]
						}
					]
			}]
		];
MarkdownToXML[f:(_File|_String?FileExistsQ)]:=
	MarkdownToXML@
		Import[f,"Text"]


End[];




(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



DocumentationSiteBuild::usage=
	"Builds the documentation site";
DocumentationSiteDeploy::usage=
	"Deploys the documentation site";


Begin["`Private`"];


(* ::Subsection:: *)
(*DocumentationSite*)



$DocSiteDirectory:=
	$DocSiteDirectory=
		FileNameJoin@{
			$WebSiteDirectory,
			"DocumentationSite"
			};


$DocSiteInitialized:=
	With[{d=$DocSiteDirectory},
		AllTrue[{d,FileNameJoin@{d,"content"},FileNameJoin@{d,"SiteConfig.wl"}},
			FileExistsQ
			]
		]


DocumentationSiteInitialize[]:=
	If[!$DocSiteInitialized,
		With[{d=$DocSiteDirectory},
			If[!DirectoryQ@d,	
				CreateDirectory[d,CreateIntermediateDirectories->True]
				];
			With[{tempDir=PackageFilePath["Resources","Templates","DocumentationSite"]},
				Map[
					With[{
						tf=FileNameJoin@{d,FileNameDrop[#,FileNameDepth[tempDir]]}
						},
						If[!FileExistsQ@tf,
							If[DirectoryQ@#,
								CopyDirectory[#,tf],
								CopyFile[#,tf]
								]
							]
						]&,
					FileNames["*",tempDir]
					];
				]
			]
		]


Options[DocumentationSiteBuild]=
	Join[
		{
			"BuildOverview"->False
			},
		Options[WebSiteBuild]
		];
DocumentationSiteBuild[ops:OptionsPattern[]]:=
	With[{buildOverview=TrueQ@OptionValue["BuildOverview"]},
		DocumentationSiteInitialize[];
		If[buildOverview,
			Export[
				FileNameJoin@{
					BTools`Private`$DocPacletsDirectory,
					"Documentation",
					"English",
					"Guides",
					"DocumentationOverview.nb"
					},
				BTools`Private`Hidden`DocumentationMultiPackageOverviewNotebook[
					BTools`Private`$DocPacletsDirectory,
					Except["DocPaclets"]
					]
				];
			GenerateHTMLDocumentation[
				FileNameJoin@{
					BTools`Private`$DocPacletsDirectory,
					"Documentation",
					"English",
					"Guides",
					"DocumentationOverview.nb"
					},
				CloudDeploy->True
				]
			];
		WebSiteBuild[$DocSiteDirectory,
			Sequence@@FilterRules[{ops},Options[WebSiteBuild]]
			]
		];
Options[DocumentationSiteDeploy]=
	Options[WebSiteDeploy];
DocumentationSiteDeploy[ops:OptionsPattern[]]:=
	WebSiteDeploy[
		$DocSiteDirectory,
		"/",
		Sequence@@
			FilterRules[{ops},Options[WebSiteDeploy]]
		]


End[];




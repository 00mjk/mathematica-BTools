Notebook[{Cell[CellGroupData[{Cell["MarkdownParse", "CodeSection"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"MarkdownElement", "::", 
              "usage"}], "=", "\n", "  ", 
            "\"Symbolic Markdown representation\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"MarkdownParse", "::", "usage"}], "=", "\n", 
            "  ", "\"Symbolic Markdown representation\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[RowBox[
        {RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
      "InputSection"], Cell[CellGroupData[
       {Cell["\[LeftCeiling]MarkdownParse\[RightFloor]", "CodeSubsection", 
         Evaluatable -> True], Cell[BoxData[RowBox[{"markdownPostProcess", 
            "//", "ClearAll"}]], "CodeInput"], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Meta\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True, CellChangeTimes -> 
             {{3.7125915870629597*^9, 3.712591587606221*^9}}], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{RowBox[
                    {"markdownPostProcess", "[", "postProcessor_", "]"}], 
                   "[", RowBox[{"\"Meta\"", ",", " ", "text_"}], "]"}], ":=", 
                 "\n", "\t", RowBox[{RowBox[{RowBox[{"With", "[", RowBox[
                        {RowBox[{"{", RowBox[{"bits", "=", RowBox[
                          {"StringSplit", "[", RowBox[{"#", ",", " ", 
                          "\":\"", ",", " ", "2"}], "]"}]}], "}"}], ",", 
                         "\n", "\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {RowBox[{"Length", "@", "bits"}], "<", "2"}], ",", 
                          "\n", "\t\t\t", "Nothing", ",", "\n", "\t\t\t", 
                          RowBox[{"postProcessor", "[", RowBox[{"\"Meta\"", 
                          ",", " ", RowBox[{"StringTrim", "@", "bits"}]}], 
                          "]"}]}], "\n", "\t\t\t", "]"}]}], "\n", "\t\t", 
                       "]"}], "&"}], "/@", RowBox[{"StringSplit", "[", 
                     RowBox[{"text", ",", "\"\\n\""}], "]"}]}]}], ";"}]], 
            "CodeInput"]}, Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]FenceBlock\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[RowBox[{RowBox[
                {RowBox[{"markdownPostProcess", "[", "postProcessor_", "]"}], 
                 "[", "\n", "\t", RowBox[{"\"FenceBlock\"", ",", "\n", "\t", 
                   "text_"}], "\n", "\t", "]"}], ":=", "\n", "\t", RowBox[
                {"With", "[", RowBox[{RowBox[{"{", "\n", "\t\t", RowBox[
                      {"striptext", "=", "\n", "\t\t\t", RowBox[
                        {"StringSplit", "[", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{"StringTrim", "[", "\n", "\t\t\t\t\t", 
                          RowBox[{"text", ",", "\n", "\t\t\t\t\t", RowBox[
                          {"StringRepeat", "[", RowBox[{"\"`\"", ",", "\n", 
                          "\t", "\t\t\t\t\t", RowBox[{RowBox[{"StringLength", 
                          "@", "text"}], "-", "\n", "\t", "\t", "\t", 
                          "\t\t\t\t", RowBox[{"StringLength", "@", RowBox[
                          {"StringTrim", "[", RowBox[{"text", ",", RowBox[
                          {"StartOfString", "~~", RowBox[{"(", RowBox[
                          {"\"`\"", ".."}], ")"}]}]}], "]"}]}]}]}], "\n", 
                          "\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t\t", "]"}], 
                          ",", "\n", "\t\t\t\t", "\"\\n\"", ",", "\n", 
                          "\t\t\t\t", "2"}], "\n", "\t\t\t\t", "]"}]}], "\n", 
                     "\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                    {"postProcessor", "[", "\n", "\t\t  ", RowBox[
                      {"\"FenceBlock\"", ",", "\n", "\t\t  ", "striptext"}], 
                     "\n", "\t\t  ", "]"}]}], "\n", "\t ", "]"}]}]], 
            "CodeInput"]}, Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]CodeBlock\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True, CellChangeTimes -> {{3.712584832841477*^9, 
             3.712584834368746*^9}}], Cell[BoxData[RowBox[
              {RowBox[{RowBox[{"markdownPostProcess", "[", "postProcessor_", 
                   "]"}], "[", "\n", "\t", RowBox[{"\"CodeBlock\"", ",", 
                   "\n", "\t", "text_"}], "\n", "\t", "]"}], ":=", "\n", 
               "\t", RowBox[{"With", "[", RowBox[{RowBox[{"{", "\n", "\t\t", 
                     RowBox[{"stripableWhitespace", "=", "\n", "\t\t\t", 
                       RowBox[{"First", "@", "\n", "\t\t\t\t", RowBox[
                          {"MinimalBy", "[", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"StringCases", "[", RowBox[{"text", ",", 
                          "\n", "\t\t\t\t\t\t", RowBox[{RowBox[
                          {"StartOfLine", "~~", RowBox[{"w", ":", RowBox[
                          {"Whitespace", "?", RowBox[{"(", RowBox[
                          {"StringFreeQ", "[", "\"\\n\"", "]"}], ")"}]}]}], 
                          "~~", "\n", "\t\t\t\t\t\t\t", RowBox[{"Except", 
                          "[", "WhitespaceCharacter", "]"}]}], 
                          "\[RuleDelayed]", "w"}]}], "\n", "\t\t\t\t\t\t", 
                          "]"}], ",", "\n", "\t\t\t\t\t", "StringLength"}], 
                          "\n", "\t\t\t\t\t", "]"}]}]}], "\n", "\t\t", "}"}], 
                   ",", "\n", "\t\t", RowBox[{"postProcessor", "[", 
                     RowBox[{"\"CodeBlock\"", ",", " ", "\n", "\t\t  ", 
                       RowBox[{"StringTrim", "@", "\n", "\t\t    ", RowBox[
                          {"StringReplace", "[", "\n", "\t\t      ", RowBox[
                          {"text", ",", "\n", "\t\t      ", RowBox[{RowBox[
                          {"StartOfLine", "~~", "stripableWhitespace"}], 
                          "\[Rule]", "\"\""}]}], "\n", "\t\t      ", 
                          "]"}]}]}], "\n", "\t\t  ", "]"}]}], "\n", "\t\t", 
                 "]"}]}]], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]QuoteBlock\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True, CellChangeTimes -> 
             {{3.712584832841477*^9, 3.712584834368746*^9}, 
             {3.712932759248433*^9, 3.7129327599677887*^9}}], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownPostProcess", "[", 
                   "postProcessor_", "]"}], "[", "\n", "\t", RowBox[
                  {"\"QuoteBlock\"", ",", "\n", "\t", "text_"}], "\n", "\t", 
                 "]"}], ":=", "\n", "\t", RowBox[{"With", "[", RowBox[
                  {RowBox[{"{", "\n", "\t\t", RowBox[{"quoteStripped", "=", 
                       "\n", "\t\t\t", RowBox[{"StringTrim", "@", "\n", 
                         "\t\t\t  ", RowBox[{"StringReplace", "[", "\n", 
                          "  \t\t\t\t", RowBox[{"text", ",", "\n", "  ", 
                          "\t\t\t\t", RowBox[{RowBox[{"StartOfLine", "~~", 
                          "\">\""}], "->", "\"\""}]}], "\n", "  ", 
                          "\t\t\t\t", "]"}]}]}], "\n", "\t\t", "}"}], ",", 
                   "\n", "\t\t", RowBox[{"postProcessor", "[", "\n", 
                     "\t\t  ", RowBox[{"\"QuoteBlock\"", ",", "\n", "\t\t  ", 
                       RowBox[{RowBox[{"markdownParse", "[", "postProcessor", 
                          "]"}], "[", "\n", "\t\t    ", RowBox[
                          {"quoteStripped", ",", " ", "\n", "\t\t\t\t ", 
                          RowBox[{"Join", "[", "\n", "  \t\t\t\t\t", RowBox[
                          {"$markdownParseElementRules", ",", "\n", 
                          "  \t\t\t\t\t", 
                          "$markdownParseOneTimeElementRules"}], "\n", 
                          "  \t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "]"}]}], 
                     "\n", "\t\t\t", "]"}]}], "\n", "\t\t", "]"}]}]], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]Header\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True, CellChangeTimes -> {{3.7125895295632277*^9, 
             3.712589533027046*^9}}], Cell[BoxData[RowBox[
              {RowBox[{RowBox[{"markdownPostProcess", "[", "postProcessor_", 
                   "]"}], "[", "\n", "\t", RowBox[{"\"Header\"", ",", "\n", 
                   "\t", "text_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
               RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"t", "=", 
                       RowBox[{"StringTrim", "[", "text", "]"}]}], "}"}], 
                   ",", "\n", "\t\t", RowBox[{"postProcessor", "[", "\n", 
                     "\t\t  ", RowBox[{RowBox[{"{", RowBox[{"\"Header\"", 
                          ",", " ", RowBox[{RowBox[{"StringLength", "[", "t", 
                          "]"}], "-", RowBox[{"StringLength", "[", RowBox[
                          {"StringTrim", "[", RowBox[{"t", ",", RowBox[
                          {"StartOfString", "~~", RowBox[{"\"#\"", 
                          ".."}]}]}], "]"}], "]"}]}]}], "}"}], ",", "\n", 
                       "\t\t\t", RowBox[{RowBox[{"markdownParse", "[", 
                          "postProcessor", "]"}], "[", "\n", "\t\t\t\t", 
                         RowBox[{RowBox[{"StringTrim", "[", RowBox[{"t", ",", 
                          " ", RowBox[{"StartOfString", "~~", RowBox[
                          {"\"#\"", ".."}]}]}], "]"}], ",", " ", "\n", 
                          "\t\t\t\t", RowBox[{"Join", "[", "\n", 
                          "\t\t\t\t\t", RowBox[{"$markdownParseElementRules", 
                          ",", "\n", "\t\t\t\t\t", 
                          "$markdownParseOneTimeElementRules"}], "\n", 
                          "\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "]"}]}], 
                     "\n", "\t\t\t", "]"}]}], "\n", "\t\t", "]"}]}]], 
            "CodeInput"]}, Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]Item\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True, CellChangeTimes -> {{3.7125976546337557*^9, 
             3.7125976550493393*^9}}], Cell[BoxData[
             RowBox[{RowBox[{RowBox[{"markdownParseItemRecursiveFormat", "[", 
                   "postProcessor_", "]"}], "[", "l_", "]"}], ":=", "\n", 
               "\t", RowBox[{"With", "[", "\n", "\t\t", RowBox[
                  {RowBox[{"{", "\n", "\t\t\t", RowBox[{"number", "=", 
                       RowBox[{"l", "[", RowBox[{"[", RowBox[{"1", ",", "1", 
                          ",", "2"}], "]"}], "]"}]}], "\n", "\t\t\t", "}"}], 
                   ",", "\n", "\t\t", RowBox[{"postProcessor", "[", "\n", 
                     "\t\t ", RowBox[{RowBox[{"Switch", "[", RowBox[
                          {RowBox[{"l", "[", RowBox[{"[", RowBox[{"1", ",", 
                          "1", ",", "1"}], "]"}], "]"}], ",", "\n", 
                          "\t\t\t\t", "DigitCharacter", ",", "\n", 
                          "\t\t\t\t\t", "\"OrderedList\"", ",", "\n", 
                          "\t\t\t\t", "_", ",", "\n", "\t\t\t\t\t", 
                          "\"UnorderedList\""}], "\n", "\t\t\t\t", "]"}], 
                       ",", "\n", "\t\t\t", RowBox[{"Flatten", "@", RowBox[
                          {"Replace", "[", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{"SplitBy", "[", RowBox[{"l", ",", "\n", 
                          "\t\t\t\t\t", RowBox[{RowBox[{RowBox[{"#", "[", 
                          RowBox[{"[", RowBox[{"1", ",", "2"}], "]"}], "]"}], 
                          "\[Equal]", "number"}], "&"}]}], "\n", 
                          "\t\t\t\t\t", "]"}], ",", "\n", "\t\t\t\t", RowBox[
                          {"{", "\n", "\t\t\t\t\t", RowBox[{RowBox[{RowBox[
                          {"mainlist", ":", "\n", "\t\t\t\t\t\t", RowBox[
                          {"{", "\n", "\t\t\t\t\t\t\t\t", RowBox[{RowBox[
                          {RowBox[{"{", RowBox[{"_", ",", " ", "number"}], 
                          "}"}], "\[Rule]", "_"}], ",", "\n", "\t", 
                          "\t\t\t\t\t\t\t", "___"}], "\n", "\t", 
                          "\t\t\t\t\t\t\t", "}"}]}], ":>", "\n", 
                          "\t\t\t\t\t\t\t", RowBox[{"Last", "/@", 
                          "mainlist"}]}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"sublist_", ":>", "\n", "\t\t\t\t\t\t", RowBox[
                          {RowBox[{"markdownParseItemRecursiveFormat", "[", 
                          "postProcessor", "]"}], "[", "sublist", "]"}]}]}], 
                          "\n", "\t\t\t\t\t", "}"}], ",", "\n", "\t\t\t\t", 
                          "1"}], "\n", "\t\t\t\t", "]"}]}]}], "\n", "\t\t\t", 
                     "]"}]}], "\n", "\t\t", "]"}]}]], "CodeInput"], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownPostProcess", "[", 
                   "postProcessor_", "]"}], "[", RowBox[{"\"Item\"", ",", 
                   " ", "text_String"}], "]"}], ":=", "\n", "\t", RowBox[
                {"With", "[", RowBox[{RowBox[{"{", "\n", "\t\t", RowBox[
                      {"lines", "=", "\n", "\t\t\t", RowBox[{"StringJoin", 
                         "/@", "\n", "\t\t\t\t", RowBox[{"Partition", "[", 
                          "\n", "\t\t\t\t\t", RowBox[{RowBox[{"StringSplit", 
                          "[", RowBox[{"text", ",", "\n", "\t", "\t\t\t\t\t", 
                          RowBox[{RowBox[{"StartOfLine", "~~", "\n", "\t", 
                          "\t\t\t\t\t\t", RowBox[{"ws", ":", RowBox[{"(", 
                          RowBox[{"Whitespace", "|", "\"\""}], ")"}]}], "~~", 
                          "\n", "\t", "\t\t\t\t\t\t\t", RowBox[{"thing", ":", 
                          RowBox[{"(", RowBox[{"\"* \"", "|", "\"- \"", "|", 
                          RowBox[{"(", RowBox[{"(", RowBox[{RowBox[{
                          "DigitCharacter", ".."}], "~~", "\".\""}], ")"}], 
                          ")"}]}], ")"}]}]}], ":>", "\n", "\t", 
                          "\t\t\t\t\t\t", RowBox[{"ws", "<>", "thing"}]}]}], 
                          "\n", "\t", "\t\t\t\t\t", "]"}], ",", "\n", 
                          "\t\t\t\t\t", "2"}], "\n", "\t\t\t\t\t", "]"}]}]}], 
                     "\n", "\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                    {RowBox[{"markdownParseItemRecursiveFormat", "[", 
                       "postProcessor", "]"}], "/@", "\n", "\t\t\t", 
                     RowBox[{"SplitBy", "[", "\n", "\t\t\t\t", RowBox[
                        {RowBox[{RowBox[{RowBox[{"With", "[", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{"{", "\n", 
                          "\t\t\t\t\t", RowBox[{RowBox[{"subtype", "=", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"Floor", "[", "\n", 
                          "\t\t\t\t\t\t\t", RowBox[{RowBox[{"(", RowBox[
                          {RowBox[{"StringLength", "[", "#", "]"}], "\n", 
                          "\t\t\t\t\t\t\t\t", "-", RowBox[{"StringLength", 
                          "@", RowBox[{"StringTrim", "[", RowBox[{"#", ",", 
                          " ", RowBox[{"StartOfString", "~~", 
                          "Whitespace"}]}], "]"}]}]}], ")"}], "/", "2"}], 
                          "\n", "\t\t\t\t\t\t\t", "]"}]}], ",", "\n", 
                          "\t\t\t\t\t", RowBox[{"thingtype", "=", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"Replace", "[", "\n", 
                          "\t\t\t\t\t\t\t", RowBox[{RowBox[{"StringTake", 
                          "[", "\n", "\t", "\t\t\t\t\t\t\t", RowBox[{RowBox[
                          {"StringTrim", "[", RowBox[{"#", ",", RowBox[
                          {"StartOfString", "~~", "Whitespace"}]}], "]"}], 
                          ",", "\n", "\t", "\t\t\t\t\t\t\t", "2"}], "]"}], 
                          ",", RowBox[{"{", "\n", "\t", "\t\t\t\t\t\t", 
                          RowBox[{RowBox[{RowBox[{"t", ":", RowBox[{"(", 
                          RowBox[{"\"* \"", "|", "\"- \""}], ")"}]}], 
                          "\[RuleDelayed]", "t"}], ",", "\n", "\t", 
                          "\t\t\t\t\t\t", RowBox[{"_", "\[Rule]", 
                          "DigitCharacter"}]}], "\n", "\t", "\t\t\t\t\t\t", 
                          "}"}]}], "]"}]}]}], "\n", "\t\t\t\t\t", "}"}], ",", 
                          "\n", "\t", "\t", "\t\t\t", RowBox[{RowBox[{"{", 
                          RowBox[{"thingtype", ",", "subtype"}], "}"}], "->", 
                          "\n", "\t\t\t\t\t\t", RowBox[{"postProcessor", "[", 
                          RowBox[{"\"Item\"", ",", "\n", "\t\t\t\t\t\t\t", 
                          RowBox[{RowBox[{"markdownParse", "[", 
                          "postProcessor", "]"}], "[", "\n", 
                          "\t\t\t\t\t\t\t\t", RowBox[{RowBox[{"StringTrim", 
                          "[", "\n", "\t\t\t\t\t\t\t\t\t", RowBox[{
                          "StringTrim", "[", RowBox[{"#", ",", "\n", "\t", 
                          "\t", "\t\t\t\t\t\t\t\t", RowBox[{RowBox[{"(", 
                          RowBox[{"Whitespace", "|", "\"\""}], ")"}], "~~", 
                          "\n", "\t", "\t", "\t\t\t\t\t\t\t\t\t", RowBox[
                          {"(", RowBox[{"\"* \"", "|", "\"- \"", "|", RowBox[
                          {"(", RowBox[{"(", RowBox[{RowBox[{
                          "DigitCharacter", ".."}], "~~", "\". \""}], ")"}], 
                          ")"}]}], ")"}]}]}], "\n", "\t\t\t\t\t\t\t\t\t\t", 
                          "]"}], "\n", "\t\t\t\t\t\t\t\t\t", "]"}], ",", 
                          "\n", "\t\t\t\t\t\t\t\t", "\"Elements\""}], "\n", 
                          "\t\t\t\t\t\t\t\t", "]"}]}], "\n", 
                          "\t\t\t\t\t\t\t", "]"}]}]}], "\n", "\t\t\t\t\t", 
                          "]"}], "&"}], "/@", "lines"}], ",", "\n", "\t\t\t", 
                         RowBox[{RowBox[{"#", "[", RowBox[{"[", RowBox[{"1", 
                          ",", "1"}], "]"}], "]"}], "&"}]}], "\n", "\t\t\t", 
                       "]"}]}]}], "\n", "\t", "]"}]}]], "CodeInput"]}, 
          Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]ItalBold\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True, CellChangeTimes -> {{3.7125976546337557*^9, 
              3.7125976550493393*^9}, {3.722731261577491*^9, 
              3.7227312619924088*^9}, {3.7227315180903063*^9, 
              3.722731521096801*^9}, 3.722731569089779*^9}], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownPostProcess", "[", 
                   "postProcessor_", "]"}], "[", RowBox[{"\"ItalBold\"", ",", 
                   " ", "t_"}], "]"}], ":=", "\n", "\t", RowBox[{"With", "[", 
                 "\n", "\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t", 
                     RowBox[{"new", "=", "\n", "\t\t\t\t", RowBox[
                        {"StringTrim", "[", RowBox[{"t", ",", " ", RowBox[
                          {"Repeated", "[", RowBox[{"\"*\"", "|", "\"_\""}], 
                          "]"}]}], "]"}]}], "\n", "\t", "\t\t", "}"}], ",", 
                   "\n", "\t\t", RowBox[{"postProcessor", "[", "\n", 
                     "\t\t\t", RowBox[{RowBox[{"Which", "[", "\n", 
                         "\t\t\t\t", RowBox[{RowBox[{RowBox[{RowBox[
                          {"StringLength", "[", "t", "]"}], "-", RowBox[
                          {"StringLength", "[", "new", "]"}]}], "<", "4"}], 
                          ",", "\n", "\t", "\t\t\t\t", "\"Italic\"", ",", 
                          "\n", "\t", "\t\t\t", RowBox[{RowBox[{RowBox[
                          {"StringLength", "[", "t", "]"}], "-", RowBox[
                          {"StringLength", "[", "new", "]"}]}], "<", "6"}], 
                          ",", "\n", "\t", "\t\t\t\t", "\"Bold\"", ",", "\n", 
                          "\t", "\t\t\t", "True", ",", "\n", "\t", 
                          "\t\t\t\t", "\"ItalicBold\""}], "\n", "\t\t\t\t", 
                         "]"}], ",", "\n", "\t\t\t", RowBox[{RowBox[
                          {"markdownParse", "[", "postProcessor", "]"}], "[", 
                         "\n", "\t\t\t\t", RowBox[{"new", ",", "\n", 
                          "\t\t\t\t", "\"Elements\""}], "\n", "\t\t\t\t", 
                         "]"}]}], "\n", "\t\t\t", "]"}]}], "\n", "\t\t", 
                 "]"}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Delimiter\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True, CellChangeTimes -> 
             {{3.712590814499344*^9, 3.712590815722493*^9}}], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownPostProcess", "[", 
                   "postProcessor_", "]"}], "[", RowBox[{"\"Delimiter\"", 
                   ",", " ", "t_"}], "]"}], ":=", "\n", "\t", RowBox[
                {"postProcessor", "[", RowBox[{"\"Delimiter\"", ",", " ", 
                   "t"}], "]"}]}]], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]CodeLine\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True, CellChangeTimes -> 
             {3.712585193126368*^9}], Cell[BoxData[RowBox[
              {RowBox[{RowBox[{"markdownPostProcess", "[", "postProcessor_", 
                   "]"}], "[", "\n", "\t", RowBox[{"\"CodeLine\"", ",", "\n", 
                   "\t", "text_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
               RowBox[{"With", "[", RowBox[{RowBox[{"{", "\n", "\t\t", 
                     RowBox[{"striptext", "=", "\n", "\t\t\t", RowBox[
                        {"StringTrim", "[", "\n", "\t\t\t\t", RowBox[{"text", 
                          ",", "\n", "\t\t\t\t", RowBox[{"StringRepeat", "[", 
                          RowBox[{"\"`\"", ",", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"StringLength", "@", "text"}], "-", "\n", 
                          "\t", "\t", "\t\t\t\t", RowBox[{"StringLength", 
                          "@", RowBox[{"StringTrim", "[", RowBox[{"text", 
                          ",", " ", RowBox[{"StartOfString", "~~", RowBox[
                          {"(", RowBox[{"\"`\"", ".."}], ")"}]}]}], 
                          "]"}]}]}]}], "\n", "\t\t\t\t\t", "]"}]}], "\n", 
                         "\t\t\t\t", "]"}]}], "\n", "\t\t", "}"}], ",", "\n", 
                   "\t\t", RowBox[{"postProcessor", "[", RowBox[{"\"Code\"", 
                       ",", " ", "striptext"}], "]"}]}], "\n", "\t\t", 
                 "]"}]}]], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]XML\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True, CellChangeTimes -> 
             {3.712585193126368*^9, {3.7126165836400537*^9, 
              3.712616584983378*^9}, 3.733154881646592*^9}], 
           Cell[BoxData[RowBox[{RowBox[{"importXMLSlow", "[", "text_", "]"}], 
               ":=", "\n", "\t", RowBox[{"FirstCase", "[", "\n", "\t\t", 
                 RowBox[{RowBox[{"ImportString", "[", RowBox[{"text", ",", 
                       " ", RowBox[{"{", RowBox[{"\"HTML\"", ",", " ", 
                          "\"XMLObject\""}], "}"}]}], "]"}], ",", "\n", 
                   "\t\t", RowBox[{RowBox[{RowBox[{"XMLElement", "[", 
                         RowBox[{RowBox[{"\"body\"", "|", "\"head\""}], ",", 
                          " ", "_", ",", " ", "b_"}], "]"}], "|", RowBox[
                        {"b", ":", RowBox[{"XMLElement", "[", RowBox[
                          {"\"script\"", ",", " ", "__"}], "]"}]}]}], 
                     "\[RuleDelayed]", "b"}], ",", "\n", "\t\t", "\"\"", ",", 
                   "\n", "\t\t", "\[Infinity]"}], "\n", "\t\t", "]"}]}]], 
            "CodeInput"], Cell[BoxData[RowBox[{RowBox[
                {RowBox[{"markdownPostProcess", "[", "postProcessor_", "]"}], 
                 "[", "\n", "\t", RowBox[{RowBox[{"\"XMLBlock\"", "|", 
                     "\"XMLLine\""}], ",", "\n", "\t", "text_"}], "\n", "\t", 
                 "]"}], ":=", "\n", "\t", RowBox[{"Module", "[", 
                 RowBox[{RowBox[{"{", RowBox[{"h", "=", RowBox[{"ToString", 
                         "@", RowBox[{"Hash", "[", "text", "]"}]}]}], "}"}], 
                   ",", "\n", "\t\t", RowBox[{RowBox[{RowBox[{"$tmpMap", "[", 
                         "h", "]"}], "=", "text"}], ";", "\n", "\t\t", 
                     RowBox[{"Sow", "[", RowBox[{RowBox[{"h", "\[Rule]", 
                          "text"}], ",", " ", "\"XMLExportKeys\""}], "]"}], 
                     ";", "\n", "\t\t", RowBox[{"\"XMLToExport\"", "[", "h", 
                       "]"}]}]}], "\n", "\t\t", "]"}]}]], "CodeInput"]}, 
          Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]Hyperlink\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True, CellChangeTimes -> {{3.7125852658153553*^9, 
             3.712585267156897*^9}}], Cell[BoxData[RowBox[
              {RowBox[{RowBox[{"markdownPostProcess", "[", "postProcessor_", 
                   "]"}], "[", "\n", "\t", RowBox[{"\"Link\"", ",", "\n", 
                   "\t", "text_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
               RowBox[{"With", "[", RowBox[{RowBox[{"{", "\n", "\t\t", 
                     RowBox[{"bits", "=", "\n", "\t\t\t", RowBox[
                        {RowBox[{RowBox[{"{", RowBox[{RowBox[{"StringRiffle", 
                          "[", RowBox[{RowBox[{"#", "[", RowBox[{"[", RowBox[
                          {";;", RowBox[{"-", "2"}]}], "]"}], "]"}], ",", 
                          " ", "\"](\""}], "]"}], ",", " ", RowBox[{"#", "[", 
                          RowBox[{"[", RowBox[{"-", "1"}], "]"}], "]"}]}], 
                          "}"}], "&"}], "@", RowBox[{"StringSplit", "[", 
                          "\n", "\t\t\t\t", RowBox[{"text", ",", "\n", 
                          "\t\t\t\t", "\"](\""}], "\n", "\t\t\t\t", 
                          "]"}]}]}], "\n", "\t\t", "}"}], ",", "\n", "\t\t", 
                   RowBox[{"postProcessor", "[", "\n", "\t\t  ", RowBox[
                      {"\"Link\"", ",", "\n", "\t\t  ", RowBox[{"{", "\n", 
                         "\t\t    ", RowBox[{RowBox[{"StringTrim", "[", 
                          RowBox[{RowBox[{"Last", "[", "bits", "]"}], ",", 
                          "\")\""}], "]"}], ",", "\n", "\t\t    ", RowBox[
                          {RowBox[{"markdownParse", "[", "postProcessor", 
                          "]"}], "[", "\n", "\t\t\t  \t", RowBox[{RowBox[
                          {"StringTrim", "[", RowBox[{RowBox[{"First", "[", 
                          "bits", "]"}], ",", "\"[\""}], "]"}], ",", "\n", 
                          "  \t\t\t\t", "\"Elements\""}], "\n", "  \t\t\t\t", 
                          "]"}]}], "\n", "\t\t\t\t", "}"}]}], "\n", "\t\t\t", 
                     "]"}]}], "\n", "\t\t", "]"}]}]], "CodeInput"], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownPostProcess", "[", 
                   "postProcessor_", "]"}], "[", "\n", "\t", RowBox[
                  {"\"LinkRef\"", ",", "\n", "\t", "text_"}], "\n", "\t", 
                 "]"}], ":=", "\n", "\t", RowBox[{"With", "[", RowBox[
                  {RowBox[{"{", RowBox[{"bits", "=", RowBox[{"StringSplit", 
                         "[", RowBox[{"text", ",", " ", "\"][\"", ",", " ", 
                          "2"}], "]"}]}], "}"}], ",", "\n", "\t\t", 
                   RowBox[{"postProcessor", "[", RowBox[{"\"Link\"", ",", 
                       "\n", "\t\t  ", RowBox[{"{", "\n", "\t\t    ", 
                         RowBox[{RowBox[{"\"RefLink\"", "@", RowBox[
                          {"StringTrim", "[", RowBox[{RowBox[{"Last", "[", 
                          "bits", "]"}], ",", RowBox[{"\"]\"", "|", 
                          "\"[\""}]}], "]"}]}], ",", "\n", "\t\t    ", 
                          RowBox[{RowBox[{"markdownParse", "[", 
                          "postProcessor", "]"}], "[", "\n", "\t\t\t  \t", 
                          RowBox[{RowBox[{"StringTrim", "[", RowBox[{RowBox[
                          {"First", "[", "bits", "]"}], ",", RowBox[{"\"[\"", 
                          "|", "\"]\""}]}], "]"}], ",", "\n", "  \t\t\t\t", 
                          "\"Elements\""}], "\n", "  \t\t\t\t", "]"}]}], 
                         "\n", "\t\t    ", "}"}]}], "\n", "\t\t  ", "]"}]}], 
                 "\n", "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Img\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True, CellChangeTimes -> 
             {{3.7125852658153553*^9, 3.712585267156897*^9}, 
             {3.712585351555884*^9, 3.712585351930613*^9}}], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownPostProcess", "[", 
                   "postProcessor_", "]"}], "[", "\n", "\t", RowBox[
                  {"\"Image\"", ",", "\n", "\t", "text_"}], "\n", "\t", 
                 "]"}], ":=", "\n", "\t", RowBox[{"With", "[", RowBox[
                  {RowBox[{"{", "\n", "\t\t", RowBox[{"bits", "=", "\n", 
                       "\t\t\t", RowBox[{RowBox[{RowBox[{"{", RowBox[
                          {RowBox[{"StringJoin", "@", RowBox[{"#", "[", 
                          RowBox[{"[", RowBox[{";;", RowBox[{"-", "2"}]}], 
                          "]"}], "]"}]}], ",", " ", RowBox[{"#", "[", RowBox[
                          {"[", RowBox[{"-", "1"}], "]"}], "]"}]}], "}"}], 
                          "&"}], "@", RowBox[{"StringSplit", "[", "\n", 
                          "\t\t\t\t", RowBox[{"text", ",", "\n", "\t\t\t\t", 
                          "\"](\""}], "\n", "\t\t\t\t", "]"}]}]}], "\n", 
                     "\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                    {"postProcessor", "[", RowBox[{"\"Image\"", ",", " ", 
                       RowBox[{"{", RowBox[{RowBox[{"StringTrim", "[", 
                          RowBox[{RowBox[{"Last", "[", "bits", "]"}], ",", 
                          "\")\""}], "]"}], ",", " ", RowBox[{"StringTrim", 
                          "[", RowBox[{RowBox[{"First", "[", "bits", "]"}], 
                          ",", "\"![\""}], "]"}]}], "}"}]}], "]"}]}], "\n", 
                 "\t\t", "]"}]}]], "CodeInput"], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownPostProcess", "[", 
                   "postProcessor_", "]"}], "[", "\n", "\t", RowBox[
                  {"\"ImageRef\"", ",", "\n", "\t", "text_"}], "\n", "\t", 
                 "]"}], ":=", "\n", "\t", RowBox[{"With", "[", RowBox[
                  {RowBox[{"{", "\n", "\t\t", RowBox[{"bits", "=", "\n", 
                       "\t\t\t", RowBox[{"StringSplit", "[", "\n", 
                         "\t\t\t\t", RowBox[{"text", ",", "\n", "\t\t\t\t", 
                          "\"][\"", ",", "\n", "\t\t\t\t", "2"}], "\n", 
                         "\t\t\t\t", "]"}]}], "\n", "\t\t", "}"}], ",", "\n", 
                   "\t\t", RowBox[{"postProcessor", "[", RowBox[{"\"Image\"", 
                       ",", "\n", "\t\t  ", RowBox[{"{", "\n", "\t\t    ", 
                         RowBox[{RowBox[{"\"ImageRefLink\"", "@", RowBox[
                          {"StringTrim", "[", RowBox[{RowBox[{"Last", "[", 
                          "bits", "]"}], ",", "\"]\""}], "]"}]}], ",", "\n", 
                          "\t\t    ", RowBox[{"StringTrim", "[", RowBox[
                          {RowBox[{"First", "[", "bits", "]"}], ",", 
                          "\"![\""}], "]"}]}], "\n", "\t\t    ", "}"}]}], 
                     "\n", "\t\t  ", "]"}]}], "\n", "\t\t", "]"}]}]], 
            "CodeInput"], Cell[BoxData[{RowBox[{RowBox[{RowBox[
                   {RowBox[{"markdownPostProcess", "[", "postProcessor_", 
                      "]"}], "[", "\n", "\t", RowBox[{"\"ImageRefLink\"", 
                      ",", "\n", "\t", "text_"}], "\n", "\t", "]"}], ":=", 
                  "\n", "\t", RowBox[{"With", "[", RowBox[{RowBox[{"{", "\n", 
                        "\t\t", RowBox[{"bits", "=", "\n", "\t\t\t", RowBox[
                          {"StringSplit", "[", "\n", "\t\t\t\t", RowBox[
                          {"text", ",", "\n", "\t\t\t\t", "\"]:\"", ",", 
                          "\n", "\t\t\t\t", "2"}], "\n", "\t\t\t\t", "]"}]}], 
                        "\n", "\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                       {RowBox[{"Sow", "[", "\n", "\t\t  ", RowBox[
                          {RowBox[{RowBox[{"{", RowBox[{"\"ImageRefLink\"", 
                          ",", " ", RowBox[{"StringTrim", "[", RowBox[
                          {RowBox[{"First", "@", "bits"}], ",", " ", RowBox[
                          {RowBox[{"(", RowBox[{"Whitespace", "|", "\"\""}], 
                          ")"}], "~~", "\"[\""}]}], "]"}]}], "}"}], "->", 
                          RowBox[{"Last", "@", "bits"}]}], ",", "\n", 
                          "\t\t  ", "\"RefLinks\""}], "\n", "\t\t  ", "]"}], 
                        ";", "\n", "\t\t", "Nothing"}]}], "\n", "\t\t", 
                    "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"markdownPostProcess", "[", "postProcessor_", 
                    "]"}], "[", "\n", "\t", RowBox[{"\"ImageRefLinkBlock\"", 
                    ",", "\n", "\t", "text_"}], "\n", "\t", "]"}], ":=", 
                "\n", "\t", RowBox[{RowBox[{RowBox[{RowBox[
                       {"markdownPostProcess", "[", "postProcessor", "]"}], 
                      "[", RowBox[{"\"ImageRefLink\"", ",", " ", "#"}], 
                      "]"}], "&"}], "/@", "\n", "\t\t", RowBox[{"Select", 
                    "[", RowBox[{RowBox[{"StringSplit", "[", RowBox[{"text", 
                          ",", " ", "\"\\n\""}], "]"}], ",", "\n", "\t\t\t", 
                      RowBox[{"Not", "@*", RowBox[{"StringMatchQ", "[", 
                          "Whitespace", "]"}]}]}], "\n", "\t\t\t", 
                    "]"}]}]}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Fallback\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True, CellChangeTimes -> 
             {{3.712585411362853*^9, 3.712585412778001*^9}}], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownPostProcess", "[", 
                   "postProcessor_", "]"}], "[", RowBox[{"t_", ",", " ", 
                   "text_String"}], "]"}], ":=", "\n", "\t", RowBox[
                {"postProcessor", "[", RowBox[{"t", ",", " ", "text"}], 
                 "]"}]}]], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]makeTempHashKey\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"$hashKeyLH", "=", "\n", "  ", 
                  RowBox[{"FromCharacterCode", "[", RowBox[{"RandomInteger", 
                      "[", RowBox[{RowBox[{"{", RowBox[{"1000", ",", " ", 
                          "5000"}], "}"}], ",", " ", "8"}], "]"}], "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{"$hashKeyRH", "=", "\n", "  ", 
                  RowBox[{"FromCharacterCode", "[", RowBox[{"RandomInteger", 
                      "[", RowBox[{RowBox[{"{", RowBox[{"1000", ",", " ", 
                          "5000"}], "}"}], ",", " ", "8"}], "]"}], "]"}]}], 
                ";"}]}], "CodeInput"], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"makeTempHashKey", "[", "h_", "]"}], 
                  ":=", "\n", "\t", RowBox[{"$hashKeyLH", "<>", "h", "<>", 
                    "$hashKeyRH"}]}], ";"}], "\n", RowBox[{RowBox[
                 {"matchTempHashKey", "=", "\n", "\t", RowBox[
                   {RowBox[{"$hashKeyLH", "~~", RowBox[{"hashInt", ":", 
                        "NumberString"}], "~~", "$hashKeyRH"}], ":>", 
                    RowBox[{"$tmpMap", "[", "hashInt", "]"}]}]}], ";"}]}], 
            "CodeInput"], Cell[BoxData[{RowBox[{RowBox[{RowBox[
                   {"makeHashRef", "[", RowBox[{"orphans_", ",", " ", "tag_", 
                      ",", " ", "main_"}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"h", "=", 
                          RowBox[{"ToString", "@", RowBox[{"Hash", "[", 
                          "main", "]"}]}]}], "}"}], ",", "\n", "\t\t", 
                      RowBox[{RowBox[{RowBox[{"$tmpMap", "[", "h", "]"}], 
                          "=", RowBox[{"tag", "\[Rule]", "main"}]}], ";", 
                        "\n", "\t\t", RowBox[{"\"Reinsert\"", "\[Rule]", 
                          RowBox[{"{", RowBox[{"orphans", ",", " ", RowBox[
                          {"makeTempHashKey", "@", "h"}]}], "}"}]}]}]}], 
                    "\n", "\t\t", "]"}]}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"makeHashRef", "[", RowBox[{"a_", "\[Rule]", 
                      "b_"}], "]"}], ":=", "\n", "\t", RowBox[{"makeHashRef", 
                    "[", RowBox[{"\"\"", ",", " ", "a", ",", " ", "b"}], 
                    "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"makeHashRef", "[", RowBox[{"a_", ",", " ", "b_"}], 
                    "]"}], ":=", "\n", "\t", RowBox[{"makeHashRef", "[", 
                    RowBox[{"\"\"", ",", " ", "a", ",", " ", "b"}], "]"}]}], 
                ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]markdownParseValidateXMLBlock\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"markdownParseValidateXMLBlock", "[", 
                 RowBox[{"block_", ",", " ", "start_", ",", " ", "end_"}], 
                 "]"}], ":=", "\n", "\t", RowBox[{RowBox[{"start", 
                   "\[Equal]", "end"}], "&&", "\n", "\t\t", RowBox[
                  {"With", "[", "\n", "\t\t\t", RowBox[{RowBox[{"{", "\n", 
                       "\t\t\t\t", RowBox[{"splits", "=", "\n", "\t\t\t\t\t", 
                         RowBox[{"Developer`ToPackedArray", "@", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"StringCases", "[", RowBox[
                          {"block", ",", "\n", "\t", "\t", "\t", "\t", 
                          "\t\t\t", RowBox[{"{", "\n", "\t", "\t", "\t", 
                          "\t", "\t\t\t\t", RowBox[{RowBox[{RowBox[{"(", 
                          RowBox[{"\"<\"", "~~", RowBox[{"(", RowBox[
                          {"Whitespace", "|", "\"\""}], ")"}], "~~", RowBox[
                          {"(", RowBox[{"Whitespace", "|", "\"\""}], ")"}], 
                          "~~", "start"}], ")"}], "->", "\n", "\t", 
                          "\t\t\t\t\t\t\t\t", RowBox[{"{", RowBox[{"1", ",", 
                          " ", "0"}], "}"}]}], ",", "\n", "\t", 
                          "\t\t\t\t\t\t\t", RowBox[{RowBox[{"(", RowBox[
                          {"\"<\"", "~~", RowBox[{"(", RowBox[{"Whitespace", 
                          "|", "\"\""}], ")"}], "~~", "\"/\"", "~~", RowBox[
                          {"(", RowBox[{"Whitespace", "|", "\"\""}], ")"}], 
                          "~~", "end"}], ")"}], "->", "\n", "\t", 
                          "\t\t\t\t\t\t\t\t", RowBox[{"{", RowBox[{"0", ",", 
                          " ", "1"}], "}"}]}]}], "\n", "\t", 
                          "\t\t\t\t\t\t\t", "}"}]}], "\n", "\t", 
                          "\t\t\t\t\t\t", "]"}]}]}], "\n", "\t\t\t\t", "}"}], 
                     ",", "\n", "\t\t\t", RowBox[{RowBox[{"(", RowBox[
                          {RowBox[{RowBox[{RowBox[{"#", "[", RowBox[{"[", 
                          "1", "]"}], "]"}], "\[Equal]", RowBox[{"#", "[", 
                          RowBox[{"[", "2", "]"}], "]"}]}], "&"}], "[", 
                          RowBox[{"Total", "[", "splits", "]"}], "]"}], 
                         ")"}], "&&", "\n", "\t\t\t", RowBox[{"AllTrue", "[", 
                         "\n", "\t\t\t\t", RowBox[{RowBox[{"Accumulate", "@", 
                          RowBox[{"Most", "@", "splits"}]}], ",", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{RowBox[{"#", "[", 
                          RowBox[{"[", "1", "]"}], "]"}], ">", RowBox[{"#", 
                          "[", RowBox[{"[", "2", "]"}], "]"}]}], "&"}]}], 
                         "\n", "\t\t\t\t", "]"}]}]}], "\n", "\t\t\t", 
                   "]"}]}]}]], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]$markdownParseRules\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseMeta\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tFor stripping meta info as used by \
pelican and things\n\[RightFloor]", "Text", Evaluatable -> True], 
              Cell[BoxData[RowBox[{"$markdownParseMeta", "=", "\n", "\t", 
                  RowBox[{RowBox[{"meta", ":", RowBox[{"(", "\n", "\t\t", 
                        RowBox[{"StartOfString", "~~", "\n", "\t\t\t", 
                          RowBox[{"(", "\n", "\t\t\t\t", RowBox[{RowBox[
                          {"(", "\n", "\t\t\t\t\t", RowBox[{"StartOfLine", 
                          "~~", RowBox[{"(", RowBox[{"Whitespace", "|", 
                          "\"\""}], ")"}], "~~", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"Except", "[", RowBox[{
                          "WhitespaceCharacter", ",", " ", "WordCharacter"}], 
                          "]"}], ".."}], "~~", "\n", "\t\t\t\t\t", RowBox[
                          {"(", RowBox[{"Whitespace", "|", "\"\""}], ")"}], 
                          "~~", "\":\"", "~~", RowBox[{RowBox[{"Except", "[", 
                          "\"\\n\"", "]"}], "..."}], "~~", "\"\\n\""}], 
                          ")"}], ".."}], "\n", "\t\t\t\t\t", ")"}]}], "\n", 
                        "\t\t", ")"}]}], ":>", "\n", "\t\t\t", RowBox[
                     {"{", "\n", "\t\t\t\t", RowBox[{"\"Meta\"", "\[Rule]", 
                        "meta"}], "\n", "\t\t\t\t", "}"}]}]}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseFenceBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseFenceBlock", "=", "\n", 
                    "\t\t", RowBox[{RowBox[{RowBox[{"fence", ":", RowBox[
                          {"(", "\n", "\t\t\t", RowBox[{"StartOfLine", "~~", 
                          "\n", "\t\t\t\t", RowBox[{"(", "\n", "\t\t\t\t\t", 
                          RowBox[{"r", ":", RowBox[{"Repeated", "[", RowBox[
                          {"\"`\"", ",", " ", RowBox[{"{", RowBox[{"3", ",", 
                          " ", "\[Infinity]"}], "}"}]}], "]"}]}], "\n", 
                          "\t\t\t\t", ")"}], "~~", "\n", "\t\t\t\t\t", 
                          RowBox[{"t", ":", RowBox[{"Repeated", "[", RowBox[
                          {RowBox[{"Except", "[", RowBox[{"\"`\"", "|", 
                          "\"\\n\""}], "]"}], ",", " ", RowBox[{"{", RowBox[
                          {"2", ",", " ", "\[Infinity]"}], "}"}]}], "]"}]}], 
                          "~~", "\"\\n\"", "\n", "\t\t\t\t\t", "~~", "s___", 
                          "~~", "\n", "\t\t\t", "StartOfLine", "~~", RowBox[
                          {"(", RowBox[{"b", ":", RowBox[{"Repeated", "[", 
                          RowBox[{"\"`\"", ",", " ", RowBox[{"{", RowBox[
                          {"3", ",", " ", "\[Infinity]"}], "}"}]}], "]"}]}], 
                          ")"}]}], "\n", "\t\t\t", ")"}]}], "/;", RowBox[
                         {"(", "\n", "\t\t\t\t\t", RowBox[{RowBox[{RowBox[
                          {"StringLength", "[", "r", "]"}], "\[Equal]", 
                          RowBox[{"StringLength", "[", "b", "]"}]}], "&&", 
                          "\n", "\t\t\t\t\t", RowBox[{RowBox[{"Length", "[", 
                          RowBox[{"StringSplit", "[", RowBox[{"fence", ",", 
                          " ", "\"\\n\""}], "]"}], "]"}], ">", "2"}], "&&", 
                          "\n", "\t\t\t\t\t", RowBox[{RowBox[{"StringCount", 
                          "[", RowBox[{"fence", ",", " ", "b"}], "]"}], 
                          "\[Equal]", "2"}]}], "\n", "\t\t\t\t", ")"}]}], 
                      ":>", "\n", "\t\t", RowBox[{"{", "\n", "\t\t\t", 
                        RowBox[{"\"FenceBlock\"", "\[Rule]", "fence"}], "\n", 
                        "\t\t\t", "}"}]}]}], ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseCodeBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseCodeBlock", "=", "\n", "\t", 
                    RowBox[{RowBox[{"code", ":", RowBox[{"(", "\n", "\t\t", 
                          RowBox[{"Longest", "[", "\n", "\t\t\t", RowBox[
                          {RowBox[{"(", "\n", "\t\t\t\t", RowBox[{RowBox[
                          {"(", RowBox[{"StartOfString", "|", "\"\\n\""}], 
                          ")"}], "~~", "\n", "\t\t\t\t\t", RowBox[{"(", 
                          RowBox[{"\"\\t\"", "|", "\"    \""}], ")"}], "~~", 
                          "\n", "\t\t\t\t\t", RowBox[{RowBox[{"Except", "[", 
                          "\"\\n\"", "]"}], ".."}], "~~", "\n", "\t\t\t\t\t", 
                          "\"\\n\""}], "\n", "\t\t\t\t\t", ")"}], "~~", "\n", 
                          "\t\t\t\t", RowBox[{"(", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"(", "\n", "\t\t\t\t\t\t", RowBox[{RowBox[
                          {"(", RowBox[{"StartOfLine", "|", RowBox[{"(", 
                          RowBox[{"StartOfLine", "~~", RowBox[{"(", RowBox[
                          {"\"\\t\"", "|", "\"    \""}], ")"}], "~~", "\n", 
                          "\t\t\t\t\t\t\t", RowBox[{RowBox[{"Except", "[", 
                          "\"\\n\"", "]"}], ".."}]}], ")"}]}], ")"}], "~~", 
                          "\n", "\t\t\t\t\t\t\t", RowBox[{"(", RowBox[
                          {"\"\\n\"", "|", "EndOfString"}], ")"}]}], "\n", 
                          "\t\t\t\t\t\t\t", ")"}], "..."}], "\n", 
                          "\t\t\t\t\t", ")"}]}], "\n", "\t\t\t", "]"}], "\n", 
                          "\t\t", ")"}]}], ":>", "\n", "\t\t", RowBox[
                       {"\"CodeBlock\"", "\[Rule]", "code"}]}]}], ";"}]], 
               "CodeInput"], Cell[BoxData[RowBox[{RowBox[
                   {"$markdownParseEndOfStringCodeBlock", "=", "\n", "\t", 
                    RowBox[{RowBox[{"code", ":", RowBox[{"(", "\n", "\t\t", 
                          RowBox[{RowBox[{"(", RowBox[{"StartOfString", "|", 
                          "\"\\n\""}], ")"}], "~~", "\n", "\t\t\t", RowBox[
                          {"(", RowBox[{"\"\\t\"", "|", "\"    \""}], ")"}], 
                          "~~", "\n", "\t\t\t", RowBox[{RowBox[{"Except", 
                          "[", "\"\\n\"", "]"}], ".."}], "~~", 
                          "EndOfString"}], "\n", "\t\t", ")"}]}], 
                      "\[RuleDelayed]", "\n", "\t\t", RowBox[
                       {"\"CodeBlock\"", "\[Rule]", "code"}]}]}], ";"}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseDelimiter\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseDelimiter", "=", "\n", "\t", 
                  RowBox[{RowBox[{"t", ":", RowBox[{"(", "\n", "\t\t", 
                        RowBox[{RowBox[{"(", RowBox[{"StartOfString", "|", 
                          "StartOfLine"}], ")"}], "~~", "\n", "\t", "\t\t", 
                          RowBox[{"(", RowBox[{"Whitespace", "|", "\"\""}], 
                          ")"}], "~~", "\n", "\t\t\t", RowBox[{"Repeated", 
                          "[", RowBox[{RowBox[{"\"-\"", "|", "\"_\""}], ",", 
                          " ", RowBox[{"{", RowBox[{"3", ",", 
                          "\[Infinity]"}], "}"}]}], "]"}], "~~", "\n", 
                          "\t\t\t", RowBox[{"(", RowBox[{"Whitespace", "|", 
                          "\"\""}], ")"}], "~~", RowBox[{"(", RowBox[
                          {"EndOfLine", "|", "EndOfString"}], ")"}]}], "\n", 
                        "\t\t\t", ")"}]}], ":>", "\n", "\t\t", RowBox[
                     {"\"Delimiter\"", "\[Rule]", "t"}]}]}]], "CodeInput"]}, 
             Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseHeader\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseHeaderFunky", "=", "\n", "\t", 
                  RowBox[{RowBox[{"t", ":", RowBox[{"Shortest", "[", "\n", 
                        "\t  ", RowBox[{"StartOfLine", "~~", RowBox[{"(", 
                          RowBox[{"head", ":", RowBox[{RowBox[{"Except", "[", 
                          "\"\\n\"", "]"}], ".."}]}], ")"}], "~~", "\"\\n\"", 
                          "~~", "\n", "\t    ", RowBox[{"(", RowBox[{"lab", 
                          ":", RowBox[{"\"-\"", ".."}]}], ")"}], "~~", "\n", 
                          "\t    ", RowBox[{"(", RowBox[{RowBox[{"Except", 
                          "[", RowBox[{"\"\\n\"", ",", " ", 
                          "WhitespaceCharacter"}], "]"}], "..."}], ")"}], 
                          "~~", "EndOfLine"}], "\n", "\t  ", "]"}]}], ":>", 
                    RowBox[{"\"Header\"", "\[Rule]", RowBox[{"(", RowBox[
                         {RowBox[{"StringRepeat", "[", RowBox[{"\"#\"", ",", 
                          " ", RowBox[{"StringLength", "[", "lab", "]"}]}], 
                          "]"}], "<>", "head"}], ")"}]}]}]}]], "CodeInput"], 
              Cell[BoxData[RowBox[{"$markdownParseHeader", "=", "\n", "\t", 
                  RowBox[{RowBox[{"t", ":", RowBox[{"(", RowBox[
                         {"StartOfLine", "~~", RowBox[{"(", RowBox[
                          {"Whitespace", "|", "\"\""}], ")"}], "~~", RowBox[
                          {"Longest", "[", RowBox[{"\"#\"", ".."}], "]"}], 
                          "~~", RowBox[{RowBox[{"Except", "[", "\"\\n\"", 
                          "]"}], ".."}]}], ")"}]}], ":>", "\n", "\t\t", 
                    RowBox[{"\"Header\"", "\[Rule]", "t"}]}]}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseQuoteBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseQuoteBlock", "=", "\n", "\t", 
                  RowBox[{RowBox[{"q", ":", RowBox[{"(", "\n", "\t\t\t", 
                        RowBox[{RowBox[{"(", RowBox[{"StartOfLine", "~~", 
                          "\">\"", "~~", "\n", "\t\t\t\t", RowBox[{RowBox[
                          {"Except", "[", "\"\\n\"", "]"}], ".."}], "~~", 
                          RowBox[{"(", RowBox[{"\"\\n\"", "|", 
                          "EndOfString"}], ")"}]}], "\n", "\t\t\t\t", ")"}], 
                          ".."}], "\n", "\t\t\t", ")"}]}], ":>", "\n", 
                    "\t\t", RowBox[{"\"QuoteBlock\"", "\[Rule]", "q"}]}]}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseItemBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseLineIdentifier", "=", "\n", 
                    "\t", RowBox[{"(", RowBox[{"\"* \"", "|", "\"- \"", "|", 
                        RowBox[{"(", RowBox[{RowBox[{"(", RowBox[
                          {"DigitCharacter", ".."}], ")"}], "~~", "\". \""}], 
                          ")"}]}], ")"}]}], ";"}]], "CodeInput"], 
              Cell[BoxData[RowBox[{RowBox[{"$markdownParseBlankSpaces", "=", 
                    "\t", "\n", "\t", RowBox[{RowBox[{"Repeated", "[", 
                        RowBox[{RowBox[{"(", RowBox[{"\"\\n\"", "~~", RowBox[
                          {"(", RowBox[{RowBox[{"Except", "[", "\"\\n\"", 
                          "]"}], ".."}], ")"}], "~~", "EndOfLine"}], ")"}], 
                          ",", " ", RowBox[{"{", RowBox[{"0", ",", " ", 
                          "1"}], "}"}]}], "]"}], "~~", "\n", "\t  ", 
                      RowBox[{"(", RowBox[{"\"\\n\\n\"", "|", "\"\""}], 
                        ")"}]}]}], ";"}]], "CodeInput"], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseItemLine", "=", "\n", "\t", 
                    RowBox[{"(", "\n", "\t\t", RowBox[{RowBox[{"(", RowBox[
                          {"StartOfLine", "|", "StartOfString"}], ")"}], 
                        "~~", "\n", "\t\t\t", RowBox[{"(", RowBox[{RowBox[
                          {"Whitespace", "?", RowBox[{"(", RowBox[
                          {"StringFreeQ", "[", "\"\\n\"", "]"}], ")"}]}], 
                          "|", "\"\""}], ")"}], "~~", "\n", "\t\t\t", 
                        "$markdownParseLineIdentifier", "~~", "\n", "\t\t ", 
                        RowBox[{"(", RowBox[{RowBox[{"Except", "[", 
                          "\"\\n\"", "]"}], "..."}], ")"}], "~~", RowBox[
                         {"(", RowBox[{"EndOfLine", "|", "EndOfString"}], 
                          ")"}]}], "\n", "\t\t", ")"}]}], ";"}]], 
               "CodeInput"], Cell[BoxData[{RowBox[{RowBox[
                    {"$markdownParseItemSingle", "=", "\n", "\t", RowBox[
                      {"$markdownParseItemLine", "~~", 
                       "$markdownParseBlankSpaces"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{"$markdownParseItemBlock", "=", "\n", "\t", 
                     RowBox[{RowBox[{"t", ":", RowBox[{"Repeated", "[", 
                          "$markdownParseItemSingle", "]"}]}], ":>", "\n", 
                       "\t  ", RowBox[{"(", RowBox[{"\"Item\"", "\[Rule]", 
                          "t"}], ")"}]}]}], ";"}]}], "CodeInput"], 
              Cell[BoxData[RowBox[{RowBox[
                   {"$markdownParseTwoWhitespaceItemLine", "=", "\n", "\t", 
                    RowBox[{"$markdownParseItemSingle", "/.", "\n", "\t\t", 
                      RowBox[{RowBox[{"Verbatim", "[", RowBox[{"(", RowBox[
                          {RowBox[{"Whitespace", "?", RowBox[{"(", RowBox[
                          {"StringFreeQ", "[", "\"\\n\"", "]"}], ")"}]}], 
                          "|", "\"\""}], ")"}], "]"}], ":>", "\n", "\t\t\t", 
                        RowBox[{"Repeated", "[", RowBox[{RowBox[{"Except", 
                          "[", RowBox[{"\"\\n\"", ",", " ", 
                          "WhitespaceCharacter"}], "]"}], ",", " ", RowBox[
                          {"{", RowBox[{"0", ",", "2"}], "}"}]}], 
                          "]"}]}]}]}], ";"}]], "CodeInput"], Cell[BoxData[
                RowBox[{"$markdownParseMultiItemBlock", "=", "\n", "\t", 
                  RowBox[{RowBox[{"t", ":", RowBox[{"(", "\n", "\t\t", 
                        RowBox[{"$markdownParseTwoWhitespaceItemLine", "~~", 
                          "\n", "\t\t\t", RowBox[{"Repeated", "[", RowBox[
                          {"$markdownParseItemSingle", "~~", RowBox[{"(", 
                          RowBox[{"\"\\n\\n\"", "|", "\"\""}], ")"}]}], 
                          "]"}]}], "\n", "\t\t\t", ")"}]}], ":>", "\n", 
                    "\t\t", RowBox[{"\"Item\"", "\[Rule]", "t"}]}]}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseLink\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"markdownParseLinkPairedBrackets", "[", 
                     "o_", "]"}], ":=", "\n", "\t", RowBox[{RowBox[
                      {RowBox[{"StringCount", "[", RowBox[{"o", ",", " ", 
                          "\"[\""}], "]"}], ">", "0"}], "&&", "\n", "\t\t", 
                     RowBox[{RowBox[{"StringCount", "[", RowBox[{"o", ",", 
                          " ", "\"[\""}], "]"}], "==", RowBox[{"StringCount", 
                         "[", RowBox[{"o", ",", " ", "\"]\""}], "]"}]}]}]}], 
                 "\n", RowBox[{RowBox[{RowBox[{"markdownParseValidateLink", 
                       "[", "o_", "]"}], ":=", "\n", "\t", RowBox[
                      {RowBox[{"markdownParseLinkPairedBrackets", "[", "o", 
                         "]"}], "&&", "\n", "\t\t", RowBox[{"!", RowBox[
                          {"markdownParseLinkPairedBrackets", "[", RowBox[
                          {RowBox[{"StringSplit", "[", RowBox[{"o", ",", " ", 
                          "\"]\"", ",", " ", "2"}], "]"}], "[", RowBox[
                          {"[", "2", "]"}], "]"}], "]"}]}]}]}], ";"}]}], 
               "CodeInput"], Cell[BoxData[RowBox[{RowBox[
                   {"markdownParseValidateLink2", "[", "o_", "]"}], ":=", 
                  "\n", "  ", RowBox[{RowBox[{RowBox[{"StringCount", "[", 
                        RowBox[{"o", ",", " ", "\"][\""}], "]"}], "\[Equal]", 
                      "1"}], "&&", "\n", "  \t", RowBox[
                     {"markdownParseLinkPairedBrackets", "[", "o", "]"}], 
                    "&&", "\n", "  ", "\t\t", RowBox[{"!", RowBox[
                       {"markdownParseLinkPairedBrackets", "[", RowBox[
                         {RowBox[{"StringSplit", "[", RowBox[{"o", ",", " ", 
                          "\"][\"", ",", " ", "2"}], "]"}], "[", RowBox[
                          {"[", "2", "]"}], "]"}], "]"}]}]}]}]], 
               "CodeInput"], Cell[BoxData[RowBox[{RowBox[{"badLinkChars", 
                    "=", "\"!\""}], RowBox[{"(*", RowBox[{"|", "\"*\"", "|", 
                      "\"_\""}], "*)"}], ";"}]], "CodeInput", CellLabel -> 
                "In[161]:="], Cell[BoxData[RowBox[{"$markdownParseLink", "=", 
                  "\n", "\t", RowBox[{RowBox[{RowBox[{"l", ":", RowBox[
                         {"Shortest", "[", "\n", "  \t", RowBox[{RowBox[
                          {"(", RowBox[{"o", ":", RowBox[{RowBox[{"Except", 
                          "[", "badLinkChars", "]"}], "|", "StartOfLine", 
                          "|", "StartOfString"}]}], ")"}], "~~", "\n", "  ", 
                          "\t\t", RowBox[{"link", ":", RowBox[{"(", RowBox[
                          {"\"[\"", "~~", RowBox[{RowBox[{"Except", "[", 
                          "\"\\n\"", "]"}], ".."}], "~~", "\"](\"", "~~", 
                          RowBox[{RowBox[{"Except", "[", 
                          "WhitespaceCharacter", "]"}], ".."}], "~~", 
                          "\")\""}], ")"}]}]}], "\n", "  \t\t", "]"}]}], 
                      "/;", RowBox[{"markdownParseValidateLink", "[", "link", 
                        "]"}]}], ":>", "\n", "\t\t\t\t", RowBox[
                     {"makeHashRef", "[", RowBox[{"o", ",", " ", "\"Link\"", 
                        ",", " ", "link"}], "]"}]}]}]], "CodeInput"], 
              Cell[BoxData[RowBox[{RowBox[{"$markdownParseLinkRef", "=", 
                    "\n", "\t", RowBox[{RowBox[{RowBox[{"l", ":", RowBox[
                          {"Shortest", "[", "\n", "\t  ", RowBox[{RowBox[
                          {"(", RowBox[{"o", ":", RowBox[{RowBox[{"Except", 
                          "[", "badLinkChars", "]"}], "|", "StartOfLine", 
                          "|", "StartOfString"}]}], ")"}], "~~", "\n", "  ", 
                          "\t\t", RowBox[{"link", ":", RowBox[{"(", RowBox[
                          {"\"[\"", "~~", RowBox[{RowBox[{"Except", "[", 
                          "\"\\n\"", "]"}], ".."}], "~~", "\"][\"", "~~", 
                          RowBox[{RowBox[{"Except", "[", 
                          "WhitespaceCharacter", "]"}], ".."}], "~~", 
                          "\"]\""}], ")"}]}]}], "\n", "    ", "]"}]}], "/;", 
                        RowBox[{"markdownParseValidateLink2", "[", "link", 
                          "]"}]}], ":>", "\n", "\t\t\t\t", RowBox[
                       {"makeHashRef", "[", RowBox[{"o", ",", " ", 
                          "\"LinkRef\"", ",", " ", "link"}], "]"}]}]}], 
                  ";"}]], "CodeInput"], Cell[BoxData[RowBox[
                 {"$markdownParseLinkRefOther", "=", "\n", "\t", 
                  RowBox[{RowBox[{"l", ":", RowBox[{"Shortest", "[", "\n", 
                        "\t  ", RowBox[{RowBox[{"(", RowBox[{"o", ":", 
                          RowBox[{RowBox[{"Except", "[", "badLinkChars", 
                          "]"}], "|", "StartOfLine", "|", 
                          "StartOfString"}]}], ")"}], "~~", "\n", "  ", 
                          "\t\t", RowBox[{"link", ":", RowBox[{"(", RowBox[
                          {"\"[\"", "~~", RowBox[{RowBox[{"Except", "[", 
                          "\"\\n\"", "]"}], ".."}], "~~", "\"]\""}], 
                          ")"}]}]}], "\n", "    ", "]"}]}], ":>", "\n", 
                    "\t\t\t\t", RowBox[{"makeHashRef", "[", RowBox[{"o", ",", 
                        " ", "\"LinkRef\"", ",", " ", "link"}], "]"}]}]}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseImage\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseImage", "=", "\n", "\t", RowBox[
                   {RowBox[{RowBox[{"img", ":", RowBox[{"Shortest", "[", 
                          RowBox[{"(", RowBox[{"\"![\"", "~~", RowBox[
                          {RowBox[{"Except", "[", "\"\\n\"", "]"}], ".."}], 
                          "~~", "\"](\"", "~~", RowBox[{RowBox[{"Except", 
                          "[", "WhitespaceCharacter", "]"}], ".."}], "~~", 
                          "\")\""}], ")"}], "]"}]}], "/;", "\n", "\t\t", 
                      RowBox[{"markdownParseValidateLink", "[", "img", 
                        "]"}]}], ":>", "\n", "\t\t", RowBox[{"makeHashRef", 
                      "[", RowBox[{"\"Image\"", "\[Rule]", "img"}], 
                      "]"}]}]}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseImageRef\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseImageRef", "=", "\n", "\t", 
                  RowBox[{RowBox[{"img", ":", RowBox[{"Shortest", "[", 
                        RowBox[{"(", RowBox[{"\"![\"", "~~", RowBox[
                          {RowBox[{"Except", "[", "\"]\"", "]"}], ".."}], 
                          "~~", "\"][\"", "~~", RowBox[{RowBox[{"Except", 
                          "[", "\"]\"", "]"}], ".."}], "~~", "\"]\""}], 
                          ")"}], "]"}]}], ":>", "\n", "\t\t", RowBox[
                     {"makeHashRef", "[", RowBox[{"\"ImageRef\"", "\[Rule]", 
                        "img"}], "]"}]}]}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell[
               "\[LeftCeiling]$markdownParseImageRefLinkBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseImageRefLinkBlock", "=", "\n", "\t", 
                  RowBox[{RowBox[{"img", ":", RowBox[{"Repeated", "[", 
                        RowBox[{"(", "\n", "\t\t", RowBox[{RowBox[{"(", 
                          RowBox[{"Whitespace", "|", "\"\""}], ")"}], "~~", 
                          "\"[\"", "~~", RowBox[{RowBox[{"Except", "[", 
                          "\"]\"", "]"}], ".."}], "~~", "\"]:\"", "~~", 
                          RowBox[{"(", RowBox[{"Whitespace", "|", "\"\""}], 
                          ")"}], "~~", "\n", "\t\t\t", "WordCharacter", "~~", 
                          RowBox[{RowBox[{"Except", "[", 
                          "WhitespaceCharacter", "]"}], ".."}]}], ")"}], 
                        "]"}]}], ":>", "\n", "\t\t", RowBox[
                     {"\"ImageRefLinkBlock\"", "\[Rule]", "img"}]}]}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseImageRefLink\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseImageRefLink", "=", "\n", "\t", 
                  RowBox[{RowBox[{"img", ":", RowBox[{"(", RowBox[
                         {RowBox[{"(", RowBox[{"Whitespace", "|", "\"\""}], 
                          ")"}], "~~", "\"[\"", "~~", RowBox[{RowBox[
                          {"Except", "[", "\"]\"", "]"}], ".."}], "~~", 
                          "\"]:\"", "~~", RowBox[{"(", RowBox[{"Whitespace", 
                          "|", "\"\""}], ")"}], "~~", "\n", "\t\t", RowBox[
                          {RowBox[{"Except", "[", "WhitespaceCharacter", 
                          "]"}], ".."}], "~~", RowBox[{"(", RowBox[
                          {"Whitespace", "|", "\"\""}], ")"}]}], ")"}]}], 
                    ":>", "\n", "\t\t", RowBox[{"makeHashRef", "[", 
                      RowBox[{"\"ImageRefLink\"", "\[Rule]", "img"}], 
                      "]"}]}]}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseCodeLine\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"validCodeBlockQ", "[", RowBox[{"r_", ",", 
                      " ", "b_", ",", " ", "mid_"}], "]"}], ":=", "\n", "  ", 
                  RowBox[{RowBox[{RowBox[{"StringLength", "[", "r", "]"}], 
                      "\[Equal]", RowBox[{"StringLength", "[", "b", "]"}]}], 
                    "&&", RowBox[{RowBox[{"StringCount", "[", RowBox[{"mid", 
                          ",", " ", "\"`\""}], "]"}], "<", RowBox[
                       {"StringLength", "[", "r", "]"}]}]}]}]], "CodeInput"], 
              Cell[BoxData[RowBox[{"$markdownParseCodeLine", "=", "\n", 
                  "\t\t", RowBox[{RowBox[{RowBox[{RowBox[{"o", ":", RowBox[
                          {"(", RowBox[{RowBox[{"Except", "[", "\"`\"", 
                          "]"}], "|", "StartOfLine", "|", "StartOfString"}], 
                          ")"}]}], "~~", "\n", "\t\t\t", RowBox[{"code", ":", 
                          RowBox[{"(", "\n", "\t\t\t\t", RowBox[{RowBox[
                          {"(", RowBox[{"r", ":", RowBox[{"\"`\"", ".."}]}], 
                          ")"}], "~~", RowBox[{"Except", "[", "\"`\"", "]"}], 
                          "~~", "mid___", "~~", RowBox[{"(", RowBox[{RowBox[
                          {"Except", "[", "\"`\"", "]"}], "|", "\"\""}], 
                          ")"}], "~~", RowBox[{"(", RowBox[{"b", ":", RowBox[
                          {"\"`\"", ".."}]}], ")"}]}], "\n", "\t\t\t\t", 
                          ")"}]}]}], "/;", RowBox[{"validCodeBlockQ", "[", 
                        RowBox[{"r", ",", " ", "b", ",", " ", "mid"}], 
                        "]"}]}], "\[RuleDelayed]", "\n", "\t\t", RowBox[
                     {"makeHashRef", "[", RowBox[{"o", ",", " ", 
                        "\"CodeLine\"", ",", " ", "code"}], "]"}]}]}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseMathLine\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"$markdownParseMathLine", "=", "\n", "\t", 
                     RowBox[{RowBox[{"math", ":", RowBox[{"Shortest", "[", 
                          RowBox[{"(", RowBox[{"\"$$\"", "~~", "__", "~~", 
                          "\"$$\""}], ")"}], "]"}]}], "\[RuleDelayed]", "\n", 
                       "\t\t", RowBox[{"makeHashRef", "[", RowBox[{"(", 
                          RowBox[{"\"MathLine\"", "\[Rule]", "math"}], ")"}], 
                         "]"}]}]}], ";"}], "\n", RowBox[
                  {"$markdownParseMathLine", "=", "\n", "\t", RowBox[
                    {RowBox[{"math", ":", RowBox[{"Shortest", "[", RowBox[
                          {"(", RowBox[{"\"$\"", "~~", "__", "~~", "\"$\""}], 
                          ")"}], "]"}]}], "\[RuleDelayed]", "\n", "\t\t", 
                     RowBox[{"makeHashRef", "[", RowBox[{"(", RowBox[
                          {"\"MathLine\"", "\[Rule]", "math"}], ")"}], 
                       "]"}]}]}]}], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseXMLLine\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseXMLLine", "=", "\n", "\t", 
                  RowBox[{RowBox[{"xml", ":", "\n", "\t\t", RowBox[
                       {RowBox[{"(", RowBox[{"\"<\"", "~~", RowBox[{"tag", 
                          ":", RowBox[{"WordCharacter", ".."}]}], "~~", 
                          RowBox[{RowBox[{"Except", "[", "\"<\"", "]"}], 
                          ".."}], "~~", "\"/>\""}], ")"}], "|", "\n", "\t\t", 
                        RowBox[{"(", RowBox[{"\"<link\"", "~~", RowBox[
                          {RowBox[{"Except", "[", "\"<\"", "]"}], ".."}], 
                          "~~", "\">\""}], ")"}]}]}], "\[RuleDelayed]", "\n", 
                    "\t\t", RowBox[{"(", RowBox[{"\"XMLLine\"", "\[Rule]", 
                        "xml"}], ")"}]}]}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseXMLBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseXMLBlock", "=", "\n", "\t", 
                    RowBox[{RowBox[{RowBox[{"cont", ":", RowBox[{"(", "\n", 
                          "\t\t", RowBox[{"\"<\"", "~~", RowBox[{"t", ":", 
                          RowBox[{"WordCharacter", ".."}]}], "~~", "__", 
                          "~~", "\n", "\t\t\t", "\"</\"", "~~", RowBox[{"(", 
                          RowBox[{"Whitespace", "|", "\"\""}], ")"}], "~~", 
                          "t__", RowBox[{"(*", RowBox[{"t2", ":", RowBox[
                          {"WordCharacter", ".."}]}], "*)"}], "~~", RowBox[
                          {"(", RowBox[{"Whitespace", "|", "\"\""}], ")"}], 
                          "~~", "\">\""}], "\n", "\t\t", ")"}]}], "/;", 
                        RowBox[{"markdownParseValidateXMLBlock", "[", 
                          RowBox[{"cont", ",", " ", "t", ",", " ", "t"}], 
                          "]"}]}], "\[RuleDelayed]", "\n", "\t\t", RowBox[
                       {"(", RowBox[{"\"XMLBlock\"", "\[Rule]", "cont"}], 
                        ")"}]}]}], ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseSimpleXMLBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseSimpleXMLBlock", "=", "\n", 
                    "\t", RowBox[{RowBox[{"cont", ":", RowBox[{"(", "\n", 
                          "\t\t", RowBox[{"\"<\"", "~~", RowBox[{"t", ":", 
                          RowBox[{"WordCharacter", ".."}]}], "~~", RowBox[
                          {RowBox[{"Except", "[", "\">\"", "]"}], "..."}], 
                          "~~", "\">\"", "~~", RowBox[{RowBox[{"Except", "[", 
                          "\"<\"", "]"}], "..."}], "~~", "\n", "\t\t\t", 
                          "\"</\"", "~~", RowBox[{"(", RowBox[{"Whitespace", 
                          "|", "\"\""}], ")"}], "~~", "t__", "~~", RowBox[
                          {"(", RowBox[{"Whitespace", "|", "\"\""}], ")"}], 
                          "~~", "\">\""}], "\n", "\t\t", ")"}]}], 
                      "\[RuleDelayed]", "\n", "\t\t", RowBox[{"(", RowBox[
                         {"\"XMLBlock\"", "\[Rule]", "cont"}], ")"}]}]}], 
                  ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseRawXMLBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"(*", RowBox[{RowBox[{"$markdownParseCommonXMLBlock", 
                      "=", "\n", "\t", RowBox[{RowBox[{RowBox[{"cont", ":", 
                          RowBox[{"(", "\n", "\t\t", RowBox[{RowBox[{"(", 
                          RowBox[{"StartOfLine", "|", "StartOfString"}], 
                          ")"}], "~~", "\n", "\t\t\t", "\"<\"", "~~", RowBox[
                          {"(", RowBox[{"Whitespace", "|", "\"\""}], ")"}], 
                          "~~", RowBox[{"t", ":", RowBox[{"WordCharacter", 
                          ".."}]}], "~~", "..", "~~", "\"\\n\\n\"", "~~", 
                          "\n", "\t\t\t\t", "\"</\"", "~~", RowBox[{"(", 
                          RowBox[{"Whitespace", "|", "\"\""}], ")"}], "~~", 
                          "t__", "~~", RowBox[{"(", RowBox[{"Whitespace", 
                          "|", "\"\""}], ")"}], "~~", "\">\""}], "\n", 
                          "\t\t", ")"}]}], "/;", RowBox[
                          {"markdownParseValidateXMLBlock", "[", RowBox[
                          {"cont", ",", " ", "t", ",", " ", "t"}], "]"}]}], 
                        "\[RuleDelayed]", "\n", "\t\t", RowBox[{"(", RowBox[
                          {"\"XMLBlock\"", "\[Rule]", "cont"}], ")"}]}]}], 
                    ";"}], "*)"}]], "CodeInput"], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseShortXMLBlock", "=", "\n", 
                    "\t", RowBox[{RowBox[{RowBox[{"cont", ":", RowBox[
                          {"Shortest", "[", RowBox[{"(", "\n", "\t\t", 
                          RowBox[{RowBox[{"(", RowBox[{"StartOfLine", "|", 
                          "StartOfString"}], ")"}], "~~", "\n", "\t\t\t", 
                          "\"<\"", "~~", RowBox[{"(", RowBox[{"Whitespace", 
                          "|", "\"\""}], ")"}], "~~", RowBox[{"t", ":", 
                          RowBox[{"WordCharacter", ".."}]}], "~~", "__", 
                          "~~", "\n", "\t\t\t\t", "\"</\"", "~~", RowBox[
                          {"(", RowBox[{"Whitespace", "|", "\"\""}], ")"}], 
                          "~~", "t__", "~~", RowBox[{"(", RowBox[
                          {"Whitespace", "|", "\"\""}], ")"}], "~~", 
                          "\">\""}], "\n", "\t\t", ")"}], "]"}]}], "/;", 
                        RowBox[{"markdownParseValidateXMLBlock", "[", 
                          RowBox[{"cont", ",", " ", "t", ",", " ", "t"}], 
                          "]"}]}], "\[RuleDelayed]", "\n", "\t\t", RowBox[
                       {"(", RowBox[{"\"XMLBlock\"", "\[Rule]", "cont"}], 
                        ")"}]}]}], ";"}]], "CodeInput"], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseCompleXMLBlock", "=", "\n", 
                    "\t", RowBox[{RowBox[{RowBox[{"cont", ":", RowBox[
                          {"(", "\n", "\t\t", RowBox[{RowBox[{"(", RowBox[
                          {"StartOfLine", "|", "StartOfString"}], ")"}], 
                          "~~", "\n", "\t\t\t", "\"<\"", "~~", RowBox[{"(", 
                          RowBox[{"Whitespace", "|", "\"\""}], ")"}], "~~", 
                          RowBox[{"t", ":", RowBox[{"WordCharacter", 
                          ".."}]}], "~~", "__", "~~", "\n", "\t\t\t\t", 
                          "\"</\"", "~~", RowBox[{"(", RowBox[{"Whitespace", 
                          "|", "\"\""}], ")"}], "~~", "t__", "~~", RowBox[
                          {"(", RowBox[{"Whitespace", "|", "\"\""}], ")"}], 
                          "~~", "\">\""}], "\n", "\t\t", ")"}]}], "/;", 
                        RowBox[{"markdownParseValidateXMLBlock", "[", 
                          RowBox[{"cont", ",", " ", "t", ",", " ", "t"}], 
                          "]"}]}], "\[RuleDelayed]", "\n", "\t\t", RowBox[
                       {"(", RowBox[{"\"XMLBlock\"", "\[Rule]", "cont"}], 
                        ")"}]}]}], ";"}]], "CodeInput"], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseRawXMLBlock", "=", "\n", "\t", 
                    RowBox[{"{", "\n", "\t\t", RowBox[{"(*", RowBox[
                         {"$markdownParseCommonXMLBlock", ","}], "*)"}], 
                      "\n", "\t\t", RowBox[{"$markdownParseShortXMLBlock", 
                        ",", "\n", "\t\t", "$markdownParseCompleXMLBlock"}], 
                      "\n", "\t\t", "}"}]}], ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseItalBold\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"$markdownParseItalBold", "=", "\n", "\t", 
                  RowBox[{RowBox[{"o", ":", RowBox[{"(", RowBox[{RowBox[
                          {"a", ":", RowBox[{"(", RowBox[{RowBox[{"(", RowBox[
                          {"\"*\"", "|", "\"_\""}], ")"}], ".."}], ")"}]}], 
                          "~~", RowBox[{"Shortest", "[", RowBox[{"t", ":", 
                          RowBox[{RowBox[{"Except", "[", "\"\\n\"", "]"}], 
                          ".."}]}], "]"}], "~~", "a_"}], ")"}]}], ":>", "\n", 
                    "\t\t", RowBox[{"makeHashRef", "[", RowBox[{"\"\"", ",", 
                        " ", "\"ItalBold\"", ",", " ", "o"}], "]"}]}]}]], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseBlockRules\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseBlockRules", "=", RowBox[
                     {"{", "\n", "\t", RowBox[{"$markdownParseRawXMLBlock", 
                        ",", "\n", "\t", "$markdownParseFenceBlock", ",", 
                        "\n", "\t", "$markdownParseImageRefLinkBlock", ",", 
                        "\n", "\t", "$markdownParseMultiItemBlock", ",", 
                        "\n", "\t", "$markdownParseCodeBlock", ",", "\n", 
                        "\t", "$markdownParseEndOfStringCodeBlock", ",", 
                        "\n", "\t", "$markdownParseDelimiter", ",", "\n", 
                        "\t", "$markdownParseHeader", ",", "\n", "\t", 
                        "$markdownParseHeaderFunky", ",", "\n", "\t", 
                        "$markdownParseItemBlock", ",", "\n", "\t", 
                        "$markdownParseQuoteBlock"}], "\n", "\t", "}"}]}], 
                  ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]$markdownParseElementRules\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseElementRules", "=", "\n", 
                    "\t", RowBox[{"{", "\n", "\t\t", RowBox[
                       {"$markdownParseXMLBlock", ",", "\n", "\t\t", 
                        "$markdownParseXMLLine", ",", "\n", "\t\t", 
                        "$markdownParseCodeLine", ",", "\n", "\t\t", 
                        "$markdownParseLink", ",", "\n", "\t\t", 
                        "$markdownParseLinkRef", ",", "\n", "\t\t", 
                        "$markdownParseImageRef", ",", "\n", "\t\t", 
                        "$markdownParseImageRefLink", ",", "\n", "\t\t", 
                        "$markdownParseImage", ",", "\n", "\t\t", 
                        "$markdownParseItalBold", ",", "\n", "\t\t", 
                        "$markdownParseMathLine"}], "\n", "\t\t", "}"}]}], 
                  ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell[
               "\[LeftCeiling]$markdownParseNewLineElements\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"$markdownParseNewLineElements", "=", "\n", 
                    "\t", RowBox[{"{", "\n", "\t\t", "\"img\"", "\n", "\t\t", 
                      "}"}]}], ";"}]], "CodeInput"]}, Closed]]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]markdownParsePrep\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"pruneRules", "[", RowBox[
                  {"mainSet_", ",", " ", "delete_"}], "]"}], ":=", "\n", 
               "  ", RowBox[{"Module", "[", "\n", "    ", RowBox[
                  {RowBox[{"{", "\n", "      ", RowBox[{RowBox[{"s1", "=", 
                         RowBox[{"DeleteDuplicates", "@", "mainSet"}]}], ",", 
                       " ", "\n", "  ", "    ", RowBox[{"s2", "=", RowBox[
                          {"DeleteDuplicates", "@", RowBox[{"Replace", "[", 
                          RowBox[{"delete", ",", " ", RowBox[{RowBox[
                          {"Except", "[", "_List", "]"}], "->", RowBox[{"{", 
                          "}"}]}]}], "]"}]}]}], ",", " ", "\n", "  ", "    ", 
                       "s"}], "\n", "  ", "    ", "}"}], ",", "\n", "  ", 
                   "  ", RowBox[{RowBox[{"s", "=", "\n", "  ", "    ", 
                       RowBox[{"DeleteCases", "[", "\n", "  ", "      ", 
                         RowBox[{"s1", ",", "\n", "  ", "  ", "    ", RowBox[
                          {"Apply", "[", "\n", "  ", "  ", "      ", RowBox[
                          {"Alternatives", ",", "\n", "  ", "  ", "      ", 
                          RowBox[{"Verbatim", "/@", RowBox[{"Flatten", "@", 
                          RowBox[{"List", "@", "s2"}]}]}]}], "\n", "  ", 
                          "  ", "      ", "]"}]}], "\n", "        ", "]"}]}], 
                     ";", "\n", "    ", "s"}]}], "\n", "    ", "]"}]}]], 
            "CodeInput"], Cell[BoxData[{RowBox[{"markdownParsePrep", "//", 
                "Clear"}], "\n", RowBox[{RowBox[{"markdownParsePrep", "[", 
                  RowBox[{"text_String", ",", " ", "\n", "  ", RowBox[
                     {"rules", ":", RowBox[{"_List", "|", "\"Elements\"", 
                        "|", "\"Blocks\"", "|", "Automatic"}], ":", 
                      "Automatic"}], ",", " ", RowBox[{"depth_:", "1"}]}], 
                  "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", "\n", 
                  "    ", RowBox[{RowBox[{"{", "\n", "      ", RowBox[
                       {"ruleList", ",", "\n", "      ", "baseData"}], "\n", 
                      "      ", "}"}], ",", "\n", "    ", RowBox[
                     {RowBox[{"ruleList", " ", "=", " ", "\n", "      ", 
                        RowBox[{"Replace", "[", RowBox[{"rules", ",", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"{", "\n", 
                          "\t\t\t\t\t\t  ", RowBox[{RowBox[{RowBox[
                          {"Automatic", "|", "\"Blocks\""}], ":>", "\n", 
                          "\t\t\t\t\t\t    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"depth", ">", "1"}], ",", "\n", "  ", 
                          "\t\t\t\t\t\t    ", RowBox[{"pruneRules", "[", 
                          RowBox[{"$markdownParseBlockRules", ",", " ", 
                          "$markdownParseOneTimeBlockRules"}], "]"}], ",", 
                          "\n", "  ", "\t\t\t\t\t\t    ", 
                          "$markdownParseBlockRules"}], "\n", "  ", 
                          "\t\t\t\t\t\t    ", "]"}]}], ",", "\n", 
                          "\t\t\t\t\t\t  ", RowBox[{"\"Elements\"", ":>", 
                          "\n", "\t\t\t\t\t\t    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"depth", ">", "1"}], ",", "\n", 
                          "\t\t\t\t\t\t      ", RowBox[{"pruneRules", "[", 
                          "\n", "\t\t\t\t\t\t        ", RowBox[{
                          "$markdownParseElementRules", ",", " ", "\n", 
                          "\t\t\t\t\t\t        ", 
                          "$markdownParseOneTimeElementRules"}], "\n", 
                          "\t\t\t\t\t\t        ", "]"}], ",", "\n", 
                          "  \t\t\t\t\t\t    ", 
                          "$markdownParseElementRules"}], "\n", 
                          "  \t\t\t\t\t\t    ", "]"}]}]}], "\n", 
                          "\t\t\t\t\t\t  ", "}"}]}], "\n", "\t\t\t\t\t\t", 
                          "]"}]}], ";", "\n", "\t\t ", RowBox[{"baseData", 
                        " ", "=", " ", "\n", "\t\t\t\t", RowBox[{"Fold", "[", 
                          "\n", "\t\t\t\t\t", RowBox[{RowBox[{RowBox[
                          {"Flatten", "@", "\n", "\t\t\t\t\t\t", RowBox[
                          {"Replace", "[", "\n", "\t\t\t\t\t\t\t", RowBox[
                          {RowBox[{"Replace", "[", RowBox[{"#", ",", "\n", 
                          "\t\t\t\t\t\t\t\t", RowBox[{"{", "\n", 
                          "\t\t\t\t\t\t\t\t \t", RowBox[{RowBox[{
                          "baseText_String", "\[RuleDelayed]", RowBox[{"{", 
                          "baseText", "}"}]}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t \t", RowBox[{RowBox[{
                          "StringExpression", "[", "l__", "]"}], ":>", "\n", 
                          "\t\t\t\t\t\t\t\t \t\t", RowBox[{"List", "[", "l", 
                          "]"}]}]}], "\n", "\t\t\t\t\t\t\t\t \t", "}"}]}], 
                          "\n", "\t\t\t\t\t\t\t\t", "]"}], ",", "\n", 
                          "\t\t\t\t\t\t\t", RowBox[{"{", "\n", 
                          "\t\t\t\t\t\t\t\t ", RowBox[{"baseString_String", 
                          ":>", "\n", "\t\t\t\t\t\t\t\t \t", RowBox[
                          {"Replace", "[", "\n", "\t\t\t\t\t\t\t\t \t\t", 
                          RowBox[{RowBox[{"StringReplace", "[", RowBox[
                          {"baseString", ",", " ", "#2"}], "]"}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t \t\t", RowBox[{RowBox[{
                          "StringExpression", "[", "l__", "]"}], ":>", "\n", 
                          "\t\t\t\t\t\t\t\t \t\t\t", RowBox[{"List", "[", 
                          "l", "]"}]}]}], "\n", "\t\t\t\t\t\t\t\t \t\t", 
                          "]"}]}], "\n", "\t\t\t\t\t\t\t\t ", "}"}], ",", 
                          "\n", "\t\t\t\t\t\t\t", "1"}], "]"}]}], "&"}], ",", 
                          "\n", "\t\t\t\t\t", "text", ",", "\n", 
                          "\t\t\t\t\t", "ruleList"}], "\n", "\t\t\t\t\t", 
                          "]"}]}], ";", "\n", "\t\t\t", RowBox[{"Which", "[", 
                        "\n", "\t\t\t\t", RowBox[{RowBox[{"StringQ", "@", 
                          "baseData"}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"{", "baseData", "}"}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"AllTrue", "[", RowBox[{"baseData", ",", 
                          " ", "StringQ"}], "]"}], ",", "\n", "\t\t\t\t\t", 
                          "baseData", ",", "\n", "\t\t\t\t", "True", ",", 
                          "\n", "\t\t\t\t\t", RowBox[{"Flatten", "@", RowBox[
                          {"markdownPrepRecursive", "[", RowBox[{"baseData", 
                          ",", " ", "rules", ",", " ", RowBox[{"depth", "+", 
                          "1"}]}], "]"}]}]}], "\n", "\t\t\t\t", "]"}]}]}], 
                  "\n", "\t\t\t", "]"}]}]}], "CodeInput"], 
           Cell[BoxData[RowBox[{"markdownPrepRecursive", "//", "Clear"}]], 
            "CodeInput"], Cell[BoxData[RowBox[{RowBox[
                {"markdownPrepRecursive", "[", RowBox[{"baseData_", ",", " ", 
                   "rules_", ",", " ", RowBox[{"depth_:", "1"}]}], "]"}], 
               ":=", "\n", "\t", RowBox[{RowBox[{RowBox[{"If", "[", 
                     RowBox[{RowBox[{"StringQ", "@", "#"}], ",", " ", 
                       RowBox[{"markdownParsePrep", "[", RowBox[{"#", ",", 
                          " ", "rules", ",", " ", "depth"}], "]"}], ",", " ", 
                       "#"}], "]"}], "&"}], "/@", "\n", "\t\t", 
                 RowBox[{"Flatten", "@", "\n", "\t\t\t", RowBox[{"Replace", 
                     "[", "\n", "\t\t\t\t", RowBox[{RowBox[{"Flatten", "@", 
                         "\n", "\t\t\t\t", RowBox[{"ReplaceRepeated", "[", 
                          "\n", "\t\t\t\t\t", RowBox[{RowBox[{"Flatten", "[", 
                          RowBox[{"List", "@@", "baseData"}], "]"}], ",", 
                          "\n", "\t\t\t\t\t", RowBox[{"{", "\n", 
                          "\t\t\t\t\t\t", RowBox[{RowBox[{RowBox[{"{", RowBox[
                          {"a___", ",", " ", "t_String", ",", " ", RowBox[
                          {"\"Reinsert\"", "\[Rule]", "o_"}], ",", " ", 
                          "b_String", ",", " ", "c___"}], "}"}], ":>", "\n", 
                          "\t\t\t\t\t\t\t", RowBox[{"{", RowBox[{"a", ",", 
                          " ", RowBox[{"markdownParsePrep", "[", RowBox[
                          {RowBox[{"t", "<>", "o", "<>", "b"}], ",", " ", 
                          "Automatic", ",", " ", "depth"}], "]"}], ",", " ", 
                          "c"}], "}"}]}], ",", "\n", "\t\t\t\t\t\t", RowBox[
                          {RowBox[{"{", RowBox[{"a___", ",", " ", "t_String", 
                          ",", " ", RowBox[{"\"Orphan\"", "\[Rule]", "o_"}], 
                          ",", " ", "b___"}], "}"}], ":>", "\n", "\t", 
                          "\t\t\t\t\t\t", RowBox[{"{", RowBox[{"a", ",", " ", 
                          RowBox[{"markdownParsePrep", "[", RowBox[{RowBox[
                          {"t", "<>", "o"}], ",", " ", "Automatic", ",", " ", 
                          "depth"}], "]"}], ",", " ", "b"}], "}"}]}]}], "\n", 
                          "\t\t\t\t\t\t", "}"}]}], "\n", "\t\t\t\t\t", 
                          "]"}]}], ",", "\n", "\t\t\t\t", RowBox[{"{", "\n", 
                         "\t\t\t\t\t", RowBox[{RowBox[{RowBox[{"(", RowBox[
                          {"\"Orphan\"", "\[Rule]", "s_"}], ")"}], 
                          "\[RuleDelayed]", "s"}], RowBox[{"(*", RowBox[
                          {"Sequence", "@@", RowBox[{"{", "}"}]}], "*)"}], 
                          ",", "\n", "\t\t\t\t\t", RowBox[{RowBox[{"(", 
                          RowBox[{"\"Reinsert\"", "\[Rule]", "s_"}], ")"}], 
                          "\[RuleDelayed]", "s"}]}], "\n", "\t\t\t\t\t", 
                         "}"}], ",", "\n", "\t\t\t\t", "1"}], "\n", 
                     "\t\t\t\t", "]"}]}]}]}]], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]markdownParseReinsertRefs\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"markdownParseReinsertRefs", 
                    "[", "eeex_", "]"}], ":=", "\n", "\t", RowBox[{"Module", 
                    "[", RowBox[{RowBox[{"{", RowBox[{"reap", ",", " ", 
                          "oppp", ",", " ", "expr", ",", " ", "ops"}], "}"}], 
                      ",", "\n", "\t\t", RowBox[{RowBox[{"reap", "=", 
                          RowBox[{"Reap", "[", RowBox[{"eeex", ",", " ", 
                          "\"RefLinks\""}], "]"}]}], ";", "\n", "\t\t", 
                        RowBox[{RowBox[{"{", RowBox[{"expr", ",", " ", 
                          "ops"}], "}"}], "=", "reap"}], ";", "\n", "\t\t", 
                        RowBox[{"oppp", "=", RowBox[{"Association", "@", 
                          RowBox[{"Cases", "[", RowBox[{RowBox[{"Flatten", 
                          "@", "ops"}], ",", " ", RowBox[{"_Rule", "|", 
                          "_RuleDelayed"}]}], "]"}]}]}], ";", "\n", "\t\t", 
                        RowBox[{"expr", "//.", "\n", "\t\t  ", RowBox[
                          {"{", "\n", "  \t\t\t", RowBox[{RowBox[{RowBox[
                          {"\"ImageRefLink\"", "[", "x_", "]"}], ":>", "\n", 
                          "  ", "\t", "\t\t\t", RowBox[{"Lookup", "[", RowBox[
                          {"oppp", ",", " ", RowBox[{"Key", "@", RowBox[{"{", 
                          RowBox[{"\"ImageRefLink\"", ",", " ", "x"}], 
                          "}"}]}], ",", " ", "x"}], "]"}]}], ",", "\n", "  ", 
                          "\t\t\t", RowBox[{RowBox[{"\"RefLink\"", "[", "x_", 
                          "]"}], ":>", "\n", "  ", "\t", "\t\t\t", RowBox[
                          {"Lookup", "[", RowBox[{"oppp", ",", " ", RowBox[
                          {"Key", "@", RowBox[{"{", RowBox[{
                          "\"ImageRefLink\"", ",", " ", "x"}], "}"}]}], ",", 
                          " ", "x"}], "]"}]}]}], "\n", "  ", "\t\t\t", 
                          "}"}]}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{"markdownParseReinsertRefs", "~", 
                  "SetAttributes", "~", "HoldFirst"}], ";"}]}], 
            "CodeInput"]}, Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]markdownParseReinsertXML\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"makeXMLBlock", "//", "Clear"}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"makeXMLBlock", "[", 
                    RowBox[{"{", "x_XMLElement", "}"}], "]"}], ":=", "x"}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"makeXMLBlock", "[", 
                    RowBox[{"{", "x__XMLElement", "}"}], "]"}], ":=", "x"}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"makeXMLBlock", "[", 
                    "e_", "]"}], ":=", "e"}], ";"}]}], "CodeInput"], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"markdownParseReinsertXML", 
                    "[", "postProcess_", "]"}], ":=", "\n", "  ", 
                  RowBox[{"Function", "[", RowBox[{"Null", ",", " ", 
                      RowBox[{"imarkdownParseReinsertXML", "[", RowBox[
                         {"#", ",", " ", "postProcess"}], "]"}], ",", " ", 
                      "HoldAllComplete"}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"imarkdownParseReinsertXML", "[", 
                    RowBox[{"expr_", ",", " ", "postProcess_"}], "]"}], ":=", 
                  "\n", "\t", RowBox[{"Module", "[", RowBox[{RowBox[
                       {"{", RowBox[{"reap", ",", " ", "ex", ",", " ", 
                          "keys", ",", " ", "exported", ",", " ", "expass", 
                          ",", " ", "expass2"}], "}"}], ",", "\n", "\t\t", 
                      RowBox[{RowBox[{"reap", "=", RowBox[{"Reap", "[", 
                          RowBox[{"expr", ",", " ", "\"XMLExportKeys\""}], 
                          "]"}]}], ";", "\n", "\t\t", RowBox[{"keys", "=", 
                          RowBox[{"Flatten", "@", RowBox[{"reap", "[", 
                          RowBox[{"[", "2", "]"}], "]"}]}]}], ";", "\n", 
                        "\t\t", RowBox[{"ex", "=", RowBox[{"reap", "[", 
                          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
                        "\t\t", RowBox[{"Length", "@", "keys"}], ";", "\n", 
                        "\t\t", RowBox[{"If", "[", RowBox[{RowBox[{RowBox[
                          {"Length", "@", "keys"}], ">", "0"}], ",", "\n", 
                          "\t\t\t", RowBox[{RowBox[{"exported", "=", "\n", 
                          "\t\t\t\t", RowBox[{"ImportString", "[", "\n", 
                          "\t", "\t\t\t\t", RowBox[{RowBox[{"StringJoin", 
                          "@", RowBox[{"{", "\n", "\t", "\t\t\t\t\t", RowBox[
                          {"\"<div>\"", ",", "\n", "\t", "\t\t\t\t\t", RowBox[
                          {RowBox[{RowBox[{"\"<div id=\\\"\"", "<>", RowBox[
                          {"#", "[", RowBox[{"[", "1", "]"}], "]"}], "<>", 
                          "\"\\\" class=\\\"hash-cell\\\">\"", "<>", "\n", 
                          "\t", "\t\t\t\t\t\t", RowBox[{"#", "[", RowBox[
                          {"[", "2", "]"}], "]"}], "<>", "\"</div>\""}], 
                          "&"}], "/@", "\n", "\t", "\t\t\t\t\t\t", "keys"}], 
                          ",", "\n", "\t", "\t\t\t\t\t", "\"</div>\""}], 
                          "\n", "\t", "\t\t\t\t\t", "}"}]}], ",", "\n", "\t", 
                          "\t\t\t\t", RowBox[{"{", RowBox[{"\"HTML\"", ",", 
                          " ", "\"XMLObject\""}], "}"}]}], "\n", "\t", 
                          "\t\t\t\t", "]"}]}], ";", "\n", "\t", "\t\t", 
                          RowBox[{"expass", "=", "\n", "\t", "\t\t\t", RowBox[
                          {"Association", "@", "\n", "\t", "\t\t\t\t", RowBox[
                          {"Cases", "[", RowBox[{"exported", ",", " ", "\n", 
                          "\t", "\t", "\t", "\t\t\t", RowBox[{RowBox[
                          {"XMLElement", "[", RowBox[{"\"div\"", ",", " ", 
                          "\n", "\t", "\t\t\t\t\t\t", RowBox[{RowBox[{"{", 
                          RowBox[{"___", ",", " ", RowBox[{"\"class\"", 
                          "\[Rule]", "\"hash-cell\""}], ",", " ", RowBox[
                          {"\"id\"", "\[Rule]", "id_"}], ",", " ", "___"}], 
                          "}"}], "|", "\n", "\t", "\t\t\t\t\t\t\t", RowBox[
                          {"{", RowBox[{"___", ",", " ", RowBox[{"\"id\"", 
                          "\[Rule]", "id_"}], ",", " ", RowBox[{"\"class\"", 
                          "\[Rule]", "\"hash-cell\""}], ",", " ", "___"}], 
                          "}"}]}], ",", "\n", "\t", "\t\t\t\t\t\t", "b_"}], 
                          "\n", "\t", "\t\t\t\t\t\t", "]"}], 
                          "\[RuleDelayed]", RowBox[{"(", RowBox[{"id", 
                          "\[Rule]", "b"}], ")"}]}], ",", "\n", "\t", 
                          "\t\t\t\t\t", "\[Infinity]"}], "\n", "\t", 
                          "\t\t\t\t\t", "]"}]}]}], ";", "\n", "\t", "\t\t", 
                          RowBox[{"expass2", "=", "\n", "\t", "\t\t\t", 
                          RowBox[{"AssociationMap", "[", "\n", "\t", 
                          "\t\t\t\t", RowBox[{RowBox[{RowBox[{
                          "ReplaceRepeated", "[", "\n", "\t", "\t\t\t\t\t", 
                          RowBox[{"#", ",", "\n", "\t", "\t\t\t\t\t", RowBox[
                          {"{", "\n", "\t", "\t\t\t\t\t\t", RowBox[{RowBox[
                          {"XMLElement", "[", RowBox[{"\"div\"", ",", " ", 
                          "\n", "\t", "\t\t\t\t\t\t\t", RowBox[{RowBox[{"{", 
                          RowBox[{"___", ",", " ", RowBox[{"\"class\"", 
                          "\[Rule]", "\"hash-cell\""}], ",", " ", RowBox[
                          {"\"id\"", "\[Rule]", "id_"}], ",", " ", "___"}], 
                          "}"}], "|", "\n", "\t", "\t\t\t\t\t\t\t\t", RowBox[
                          {"{", RowBox[{"___", ",", " ", RowBox[{"\"id\"", 
                          "\[Rule]", "id_"}], ",", " ", RowBox[{"\"class\"", 
                          "\[Rule]", "\"hash-cell\""}], ",", " ", "___"}], 
                          "}"}]}], ",", "\n", "\t", "\t\t\t\t\t\t\t", "_"}], 
                          "\n", "\t\t\t\t\t\t\t\t", "]"}], "\[RuleDelayed]", 
                          RowBox[{"Sequence", "@@", RowBox[{"Lookup", "[", 
                          RowBox[{"expass", ",", " ", "id", ",", " ", RowBox[
                          {"\"UnprocessedXML\"", "[", "id", "]"}]}], RowBox[
                          {"(*", "Nothing", "*)"}], "]"}]}]}], "\n", "\t", 
                          "\t\t\t\t\t\t", "}"}]}], "\n", "\t", "\t\t\t\t\t", 
                          "]"}], "&"}], ",", " ", "\n", "\t", "\t\t\t\t", 
                          "expass"}], "\n", "\t", "\t\t\t\t", "]"}]}], ";", 
                          " ", "\n", "\t\t\t", RowBox[{"ex", "//.", RowBox[
                          {RowBox[{"\"XMLToExport\"", "[", "h_", "]"}], 
                          "\[RuleDelayed]", "\n", "\t\t\t  ", RowBox[
                          {"postProcess", "[", RowBox[{"\"XML\"", ",", " ", 
                          "\n", "\t\t\t    ", RowBox[{"makeXMLBlock", "@", 
                          RowBox[{"Lookup", "[", RowBox[{"expass2", ",", " ", 
                          "h", ",", " ", "\n", "\t\t\t      ", RowBox[
                          {"XMLElement", "[", RowBox[{"\"unprocessedXML\"", 
                          ",", " ", RowBox[{"{", RowBox[{"\"hash\"", 
                          "\[Rule]", RowBox[{"ToString", "[", "h", "]"}]}], 
                          "}"}], ",", " ", RowBox[{"{", "}"}]}], "]"}]}], 
                          "\n", "\t\t\t      ", RowBox[{"(*", "Nothing", 
                          "*)"}], "\n", "\t\t\t      ", "]"}]}]}], "\n", 
                          "\t\t\t    ", "]"}]}]}]}], ",", "\n", "\t\t\t", 
                          RowBox[{"ex", "//.", RowBox[{RowBox[
                          {"\"XMLToExport\"", "[", "h_", "]"}], 
                          "\[RuleDelayed]", "\n", "\t\t\t  ", RowBox[
                          {"postProcess", "[", "\n", "\t\t\t    ", RowBox[
                          {"\"XML\"", ",", "\n", "\t\t\t    ", RowBox[
                          {"XMLElement", "[", RowBox[{"\"unprocessedXML\"", 
                          ",", " ", RowBox[{"{", RowBox[{"\"hash\"", 
                          "\[Rule]", RowBox[{"ToString", "[", "h", "]"}]}], 
                          "}"}], ",", " ", RowBox[{"{", "}"}]}], "]"}]}], 
                          "\n", "\t\t\t    ", "]"}]}]}]}], "\n", "\t\t\t", 
                          "]"}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{"imarkdownParseReinsertXML", "~", 
                  "SetAttributes", "~", "HoldFirst"}], ";"}]}], 
            "CodeInput"]}, Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]markdownFixedPointReplace\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tDone with FixedPoint to handle all of the hash-prep stuff. \n\tHopefully \
done in such a way as to not fuck up everything.\n\[RightFloor]", "Text", 
            Evaluatable -> True], Cell[BoxData[RowBox[{RowBox[
                {"markdownFixedPointReplace", "[", RowBox[{"text_", ",", " ", 
                   "rules_", ",", " ", RowBox[{"n_:", "1"}]}], "]"}], ":=", 
               "\n", "\t", RowBox[{"Module", "[", RowBox[{RowBox[{"{", 
                     RowBox[{"iterate", "=", "n"}], "}"}], ",", "\n", "\t  ", 
                   RowBox[{"FixedPoint", "[", "\n", "  \t\t", RowBox[
                      {RowBox[{RowBox[{"If", "[", RowBox[{RowBox[{"StringQ", 
                          "@", "#"}], ",", "\n", "  ", "\t\t\t", RowBox[
                          {"Replace", "[", "\n", "  ", "\t\t\t\t", RowBox[
                          {RowBox[{"markdownParsePrep", "[", RowBox[{"#", 
                          ",", " ", "rules", ",", " ", RowBox[{"iterate", 
                          "++"}]}], "]"}], ",", " ", "\n", "  \t\t\t\t", 
                          RowBox[{"{", "\n", "  \t\t\t\t\t", RowBox[{RowBox[
                          {RowBox[{"s", ":", RowBox[{"{", RowBox[{"_String", 
                          ",", " ", "__String"}], "}"}]}], "\[RuleDelayed]", 
                          "\n", "  ", "\t\t\t\t\t\t", RowBox[{
                          "markdownParsePrep", "[", RowBox[{RowBox[
                          {"StringJoin", "[", "s", "]"}], ",", " ", "rules", 
                          ",", " ", "iterate"}], "]"}]}], ",", "\n", 
                          "  \t\t\t\t\t", RowBox[{"e_List", ":>", "\n", "  ", 
                          "\t\t\t\t\t\t", RowBox[{"Flatten", "[", "\n", "  ", 
                          "\t\t\t\t\t\t\t", RowBox[{RowBox[{"Replace", "[", 
                          RowBox[{RowBox[{"SplitBy", "[", RowBox[{"e", ",", 
                          " ", "StringQ"}], "]"}], ",", "\n", "  ", "\t", 
                          "\t\t\t\t\t\t\t", RowBox[{RowBox[{"j", ":", RowBox[
                          {"{", "__String", "}"}]}], "\[RuleDelayed]", RowBox[
                          {"StringJoin", "[", "j", "]"}]}], ",", "\n", "  ", 
                          "\t\t\t\t\t\t\t\t", "1"}], "\n", "  ", 
                          "\t\t\t\t\t\t\t\t", "]"}], ",", "\n", "  ", 
                          "\t\t\t\t\t\t\t", "1"}], "\n", "  ", 
                          "\t\t\t\t\t\t\t", "]"}]}]}], "\n", "  ", 
                          "\t\t\t\t\t", "}"}]}], "\n", "  ", "\t\t\t\t", 
                          "]"}], ",", "\n", "  ", "\t\t\t", "#"}], "\n", 
                          "  ", "\t\t\t", "]"}], "&"}], ",", "\n", "  ", 
                       "\t\t", "text", ",", "\n", "  ", "\t\t", "10"}], " ", 
                     RowBox[{"(*", " ", RowBox[{RowBox[{"could", " ", 
                          "forsee", " ", "recursion", " ", "infinitely"}], 
                         ",", " ", RowBox[{"but", " ", "unlikely"}]}], " ", 
                       "*)"}], "\n", "  \t\t", "]"}]}], "\n", "    ", 
                 "]"}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]markdownParse\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{"markdownParse", "//", "Clear"}]], 
            "CodeInput"], Cell[BoxData[RowBox[{RowBox[
                {RowBox[{"markdownParse", "[", "postProcessor_", "]"}], "[", 
                 "\n", "\t", RowBox[{"text_String", ",", "\n", "\t", 
                   RowBox[{"rules", ":", RowBox[{"_List", "|", "\"Blocks\"", 
                       "|", "\"Elements\"", "|", "Automatic"}], ":", 
                     "Automatic"}], ",", "\n", "\t", RowBox[
                    {"extraBlockRules", ":", "_List", ":", RowBox[{"{", 
                       "}"}]}], ",", "\n", "\t", RowBox[{"extraElementRules", 
                     ":", "_List", ":", RowBox[{"{", "}"}]}], ",", "\n", 
                   "\t", RowBox[{"oneTimeBlockRules", ":", "_List", ":", 
                     RowBox[{"{", "}"}]}], ",", "\n", "\t", RowBox[
                    {"oneTimeElementRules", ":", "_List", ":", RowBox[
                      {"{", "}"}]}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
               RowBox[{"Block", "[", "\n", "\t\t", RowBox[{RowBox[{"{", "\n", 
                     "\t\t ", RowBox[{RowBox[{"$iteration", " ", "=", " ", 
                         RowBox[{RowBox[{"Replace", "[", RowBox[
                          {"$iteration", ",", " ", RowBox[{RowBox[{"Except", 
                          "[", "_Integer", "]"}], "\[Rule]", "0"}]}], "]"}], 
                          " ", "+", " ", "1"}]}], ",", "\n", "\t\t\t", 
                       RowBox[{"$markdownParseBlockRules", "=", "\n", 
                         "\t\t\t  ", RowBox[{"pruneRules", "[", "\n", 
                          "\t\t\t    ", RowBox[{RowBox[{"Flatten", "@", 
                          RowBox[{"{", "\n", "\t\t\t     ", RowBox[
                          {"oneTimeBlockRules", ",", "\n", "  \t\t\t\t\t", 
                          RowBox[{"Join", "[", RowBox[{"extraBlockRules", 
                          ",", " ", "$markdownParseBlockRules"}], "]"}]}], 
                          "\n", "  \t\t\t\t\t", "}"}]}], ",", " ", "\n", 
                          "  \t\t\t\t", "$markdownParseOneTimeBlockRules"}], 
                          "\n", "  \t\t\t\t", "]"}]}], ",", "\n", "  \t ", 
                       RowBox[{"(*", " ", RowBox[{"we", " ", "cache", " ", 
                          "them", " ", "now", " ", "so", " ", RowBox[{"they", 
                          "'"}], "ll", " ", "be", " ", "removed", " ", 
                          "next", " ", "round"}], " ", "*)"}], "\n", 
                       "\t\t\t", RowBox[{"$markdownParseOneTimeBlockRules", 
                         "=", "\n", "\t\t\t  ", "oneTimeBlockRules"}], ",", 
                       "\n", "\t\t\t", RowBox[{"$markdownParseElementRules", 
                         "=", "\n", "\t\t\t\t", RowBox[{"pruneRules", "[", 
                          "\n", "\t\t\t\t  ", RowBox[{RowBox[{"Flatten", "@", 
                          RowBox[{"{", "\n", "\t\t\t\t    ", RowBox[
                          {"oneTimeElementRules", ",", "\n", "    \t\t\t\t", 
                          RowBox[{"Join", "[", RowBox[{"extraElementRules", 
                          ",", " ", "$markdownParseElementRules"}], "]"}]}], 
                          "\n", "  \t\t\t\t\t", "}"}]}], ",", "\n", 
                          "    \t\t ", "$markdownParseOneTimeElementRules"}], 
                          "\n", "    \t\t ", "]"}]}], ",", "\n", "     ", 
                       RowBox[{"(*", " ", RowBox[{"we", " ", "cache", " ", 
                          "them", " ", "now", " ", "so", " ", RowBox[{"they", 
                          "'"}], "ll", " ", "be", " ", "removed", " ", 
                          "next", " ", "round"}], " ", "*)"}], "\n", 
                       "\t\t\t", RowBox[{"$markdownParseOneTimeElementRules", 
                         "=", "\n", "\t\t\t\t", "oneTimeElementRules"}]}], 
                     "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                    {"Flatten", "@", "\n", "\t\t\t", RowBox[{"Replace", "[", 
                       "\n", "\t\t\t\t", RowBox[{RowBox[
                          {"markdownFixedPointReplace", "[", RowBox[{"text", 
                          ",", " ", "rules", ",", " ", "$iteration"}], "]"}], 
                         ",", " ", "\n", "\t\t\t\t", RowBox[{"{", "\n", 
                          "\t\t\t\t\t", RowBox[{RowBox[{"s_String", 
                          "\[RuleDelayed]", "\n", "\t\t\t\t\t\t", RowBox[
                          {"If", "[", RowBox[{RowBox[{"rules", "===", 
                          "Automatic"}], ",", "\n", "\t\t\t\t\t\t\t", RowBox[
                          {"Flatten", "@", RowBox[{"List", "@", RowBox[
                          {RowBox[{"markdownParsePostProcess1", "[", 
                          "postProcessor", "]"}], "[", "s", "]"}]}]}], ",", 
                          "\n", "\t", "\t\t\t\t\t\t", RowBox[{"{", "s", 
                          "}"}]}], "\n", "\t", "\t\t\t\t\t\t", "]"}]}], ",", 
                          "\n", "\t", "\t\t\t\t", RowBox[{"l_List", ":>", 
                          "\n", "\t", "\t\t\t\t\t", RowBox[{"Replace", "[", 
                          RowBox[{"l", ",", "\n", "\t", "\t\t\t\t\t\t", 
                          RowBox[{"{", "\n", "\t", "\t\t\t\t\t\t\t", RowBox[
                          {RowBox[{"s_String", ":>", "\n", "\t", 
                          "\t\t\t\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{"rules", "===", "Automatic"}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t\t\t", RowBox[{RowBox[{
                          "markdownParsePostProcess1", "[", "postProcessor", 
                          "]"}], "[", "s", "]"}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t\t\t", RowBox[{"Module", "[", 
                          "\n", "\t\t\t\t\t\t\t\t\t\t\t", RowBox[{RowBox[
                          {"{", "withHashes", "}"}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t\t\t\t", RowBox[{RowBox[{
                          "withHashes", "=", "\n", 
                          "\t\t\t\t\t\t\t\t\t\t\t\t", RowBox[{
                          "StringReplace", "[", RowBox[{"s", ",", " ", 
                          "matchTempHashKey"}], "]"}]}], ";", "\n", 
                          "\t\t\t\t\t\t\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{"StringQ", "@", "withHashes"}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t\t\t\t\t", "withHashes", ",", 
                          "\n", "\t\t\t\t\t\t\t\t\t\t\t\t", RowBox[{
                          "Sequence", "@@", RowBox[{"Flatten", "@", RowBox[
                          {"List", "@", "\n", "\t\t\t\t\t\t\t\t\t\t\t\t\t", 
                          RowBox[{"Map", "[", "\n", 
                          "\t\t\t\t\t\t\t\t\t\t\t\t\t\t", RowBox[{RowBox[
                          {RowBox[{"If", "[", RowBox[{RowBox[{"StringQ", "@", 
                          "#"}], ",", "\n", "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", 
                          "#", ",", "\n", "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", 
                          RowBox[{RowBox[{"markdownPostProcess", "[", 
                          "postProcessor", "]"}], "@@", "#"}]}], "\n", 
                          "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "]"}], "&"}], 
                          ",", "\n", "\t\t\t\t\t\t\t\t\t\t\t\t\t\t", RowBox[
                          {"List", "@@", "withHashes"}]}], "\n", 
                          "\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "]"}]}]}]}]}], 
                          "\n", "\t\t\t\t\t\t\t\t\t\t\t\t", "]"}]}]}], "\n", 
                          "\t\t\t\t\t\t\t\t\t\t\t", "]"}]}], "\n", 
                          "\t\t\t\t\t\t\t\t\t\t", "]"}]}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t", RowBox[{RowBox[{"(", RowBox[
                          {"r_", "\[Rule]", "s_"}], ")"}], ":>", "\n", 
                          "\t\t\t\t\t\t\t\t\t\t", RowBox[{RowBox[{
                          "markdownPostProcess", "[", "postProcessor", "]"}], 
                          "[", RowBox[{"r", ",", " ", "s"}], "]"}]}]}], "\n", 
                          "\t\t\t\t\t\t\t\t", "}"}], ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "1"}], "\n", "\t", "\t\t\t\t\t\t", 
                          "]"}]}]}], "\n", "\t\t\t\t", "}"}]}], "]"}]}]}], 
                 "\n", "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]markdownParsePostProcess1\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"recursiveParseMarkdown", 
                   "[", "postProcessor_", "]"}], "[", "string_", "]"}], ":=", 
               "\n", "\t", RowBox[{"postProcessor", "[", "\n", "\t\t", 
                 RowBox[{"\"Text\"", ",", "\n", "\t\t", RowBox[
                    {RowBox[{"DeleteCases", "[", RowBox[{"_String", "?", 
                         RowBox[{"(", RowBox[{"StringMatchQ", "[", 
                          "Whitespace", "]"}], ")"}]}], "]"}], "@", "\n", 
                     "\t\t\t", RowBox[{"Flatten", "@", RowBox[{"List", "@", 
                         "\n", "\t\t\t\t", RowBox[{RowBox[{"markdownParse", 
                          "[", "postProcessor", "]"}], "[", RowBox[{"string", 
                          ",", " ", "\"Elements\""}], "]"}]}]}]}]}], "\n", 
                 "\t\t", "]"}]}]], "CodeInput"], 
           Cell[BoxData[RowBox[{RowBox[{"splitWhiteSpaceBlocks", "[", "s_", 
                 "]"}], ":=", "\n", "\t", RowBox[{RowBox[{"Select", "[", 
                   RowBox[{"Not", "@*", RowBox[{"StringMatchQ", "[", 
                       "Whitespace", "]"}]}], "]"}], "@", "\n", "\t\t", 
                 RowBox[{"StringSplit", "[", RowBox[{"s", ",", 
                     "\"\\n\\n\""}], "]"}]}]}]], "CodeInput"], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"markdownParsePostProcess1", 
                   "[", "postProcessor_", "]"}], "[", "s_", "]"}], ":=", 
               "\n", "\t", RowBox[{"Module", "[", RowBox[{RowBox[{"{", 
                     "withHashes", "}"}], ",", "\n", "\t\t", RowBox[
                    {RowBox[{"withHashes", "=", RowBox[{"StringReplace", "[", 
                         RowBox[{"s", ",", " ", "matchTempHashKey"}], 
                         "]"}]}], ";", "\n", "\t\t", RowBox[{"If", "[", 
                       RowBox[{RowBox[{"StringQ", "@", "withHashes"}], ",", 
                         "\n", "\t\t\t", RowBox[{"SplitBy", "[", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{RowBox[{RowBox[
                          {"recursiveParseMarkdown", "[", "postProcessor", 
                          "]"}], "/@", "\n", "\t\t\t\t\t", RowBox[
                          {"splitWhiteSpaceBlocks", "[", "withHashes", 
                          "]"}]}], "//", "Flatten"}], ",", "\n", "\t", 
                          "\t\t\t", RowBox[{"Replace", "[", "\n", "\t", 
                          "\t\t\t\t", RowBox[{"{", "\n", "\t", "\t\t\t\t\t", 
                          RowBox[{RowBox[{RowBox[{"XMLElement", "[", RowBox[
                          {RowBox[{"Alternatives", "@@", 
                          "$markdownParseNewLineElements"}], ",", " ", 
                          "__"}], "]"}], ":>", "\n", "\t", "\t", "\t", 
                          "\t\t\t\t", RowBox[{"RandomReal", "[", "]"}]}], 
                          ",", "\n", "\t", "\t", "\t", "\t\t\t", RowBox[{"_", 
                          "\[Rule]", "True"}]}], "\n", "\t", "\t", 
                          "\t\t\t\t", "}"}], "\n", "\t\t\t\t\t", "]"}]}], 
                          "\n", "\t\t\t\t", "]"}], ",", "\n", "\t\t\t", 
                         RowBox[{"Sequence", "@@", "\n", "\t\t\t\t", RowBox[
                          {"Map", "[", "\n", "\t\t\t\t\t", RowBox[{RowBox[
                          {RowBox[{"If", "[", RowBox[{RowBox[{"StringQ", "@", 
                          "#"}], ",", "\n", "\t\t\t\t\t\t", RowBox[{RowBox[
                          {"markdownParsePostProcess1", "[", "postProcessor", 
                          "]"}], "@", "#"}], ",", "\n", "\t\t\t\t\t\t", 
                          RowBox[{RowBox[{"markdownPostProcess", "[", 
                          "postProcessor", "]"}], "@@", "#"}]}], "\n", 
                          "\t\t\t\t\t\t", "]"}], "&"}], ",", "\n", 
                          "\t\t\t\t\t", RowBox[{"List", "@@", 
                          "withHashes"}]}], "\n", "\t\t\t\t\t", "]"}]}]}], 
                       "\n", "\t\t\t", "]"}]}]}], "\n", "\t\t", "]"}]}]], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]markdownParsePreProcess\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"markdownParsePreProcess", "[", 
                 "t_String", "]"}], ":=", "\n", "\t", RowBox[
                {"StringReplace", "[", RowBox[{"t", ",", RowBox[{"{", "\n", 
                     "\t\t", RowBox[{RowBox[{RowBox[{"(", RowBox[{"\"\\n\"", 
                          "~~", RowBox[{"Whitespace", "?", RowBox[{"(", 
                          RowBox[{"StringFreeQ", "[", "\"\\n\"", "]"}], 
                          ")"}]}], "~~", "EndOfLine"}], ")"}], "\[Rule]", 
                         "\"\\n\""}], ",", "\n", "\t\t", RowBox[
                        {"\"\[IndentingNewLine]\"", "\[Rule]", 
                         "\"\\n\\t\""}], ",", "\n", "\t\t", RowBox[
                        {"\"\\t\"", "\[Rule]", "\"    \""}], ",", "\n", 
                       "\t\t", RowBox[{"\"\[SpanFromLeft]\"", "\[Rule]", 
                         "\"\[Ellipsis]\""}]}], "\n", "\t\t", "}"}]}], 
                 "]"}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]MarkdownParse\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{"MarkdownParse", "//", "Clear"}]], 
            "CodeInput"], Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", 
                    "[", "MarkdownParse", "]"}], "=", "\n", "  ", 
                  RowBox[{"{", "\n", "    ", RowBox[{RowBox[
                       {"\"StripMetaInformation\"", "\[Rule]", "True"}], ",", 
                      "\n", "    ", RowBox[{"\"BlockRules\"", "\[Rule]", 
                        RowBox[{"{", "}"}]}], ",", "\n", "    ", RowBox[
                       {"\"ElementRules\"", "\[Rule]", RowBox[{"{", "}"}]}], 
                      ",", "\n", "    ", RowBox[{"\"PostProcessor\"", 
                        "\[Rule]", "MarkdownElement"}]}], "\n", "    ", 
                    "}"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"MarkdownParse", "[", "\n", "  ", RowBox[
                     {RowBox[{"_String", "?", RowBox[{"(", RowBox[{RowBox[
                          {RowBox[{"StringLength", "[", RowBox[{"StringTrim", 
                          "[", "#", "]"}], "]"}], "\[Equal]", "0"}], "&"}], 
                          ")"}]}], ",", "\n", "  ", RowBox[{"ops", ":", 
                        RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "  ", 
                    "]"}], ":=", RowBox[{"{", "}"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"MarkdownParse", "[", "\n", "  ", 
                    RowBox[{RowBox[{"s_String", "?", RowBox[{"(", RowBox[
                          {RowBox[{RowBox[{RowBox[{"StringLength", "[", 
                          RowBox[{"StringTrim", "[", "#", "]"}], "]"}], ">", 
                          "0"}], "&&", RowBox[{"Not", "@", RowBox[
                          {"FileExistsQ", "[", "#", "]"}]}]}], "&"}], 
                          ")"}]}], ",", "\n", "  ", RowBox[{"ops", ":", 
                        RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "  ", 
                    "]"}], ":=", "\n", "  ", RowBox[{"Block", "[", "\n", 
                    "    ", RowBox[{RowBox[{"{", "\n", "      ", RowBox[
                         {RowBox[{"$tmpMap", "=", RowBox[{"<|", "|>"}]}], 
                          ",", "\n", "      ", "$timings"}], "\n", "      ", 
                        "}"}], ",", "\n", "    ", RowBox[{"With", "[", "\n", 
                        "      ", RowBox[{RowBox[{"{", "\n", "        ", 
                          RowBox[{RowBox[{"sm", "=", RowBox[{"TrueQ", "@", 
                          RowBox[{"OptionValue", "[", 
                          "\"StripMetaInformation\"", "]"}]}]}], ",", "\n", 
                          "        ", RowBox[{"er", "=", RowBox[{"Replace", 
                          "[", RowBox[{RowBox[{"OptionValue", "[", 
                          "\"ElementRules\"", "]"}], ",", RowBox[{RowBox[
                          {"Except", "[", RowBox[{"_", "?", "OptionQ"}], 
                          "]"}], "\[RuleDelayed]", RowBox[{"{", "}"}]}]}], 
                          "]"}]}], ",", "\n", "  ", "  ", "    ", RowBox[
                          {"br", "=", RowBox[{"Replace", "[", RowBox[{RowBox[
                          {"OptionValue", "[", "\"BlockRules\"", "]"}], ",", 
                          RowBox[{RowBox[{"Except", "[", RowBox[{"_", "?", 
                          "OptionQ"}], "]"}], "\[RuleDelayed]", RowBox[{"{", 
                          "}"}]}]}], "]"}]}], ",", "\n", "        ", RowBox[
                          {"postProcessor", "=", RowBox[{"OptionValue", "[", 
                          "\"PostProcessor\"", "]"}]}]}], "\n", "        ", 
                          "}"}], ",", "\n", "      ", RowBox[
                          {"markdownParseReinsertRefs", "@", "\n", 
                          "        ", RowBox[{RowBox[{
                          "markdownParseReinsertXML", "[", "postProcessor", 
                          "]"}], "@", "\n", "          ", RowBox[{RowBox[
                          {"markdownParse", "[", "postProcessor", "]"}], "[", 
                          "\n", "            ", RowBox[{RowBox[
                          {"markdownParsePreProcess", "[", "s", "]"}], ",", 
                          "\n", "            ", "Automatic", ",", "\n", 
                          "            ", "br", ",", "\n", "            ", 
                          "er", ",", "\n", "            ", RowBox[{"If", "[", 
                          RowBox[{"sm", ",", " ", RowBox[{"{", 
                          "$markdownParseMeta", "}"}], ",", " ", RowBox[{"{", 
                          "}"}]}], "]"}], ",", "\n", "            ", RowBox[
                          {"{", "}"}]}], "\n", "            ", "]"}]}]}]}], 
                        "\n", "      ", "]"}]}], "\n", "    ", "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{"MarkdownParse", "[", 
                  RowBox[{RowBox[{"f", ":", RowBox[{"(", RowBox[{"_File", 
                          "|", RowBox[{"_String", "?", "FileExistsQ"}]}], 
                        ")"}]}], ",", " ", RowBox[{"ops", ":", RowBox[
                       {"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", "\n", 
                "  ", RowBox[{"MarkdownParse", "[", RowBox[{RowBox[{"Import", 
                      "[", RowBox[{"f", ",", " ", "\"Text\""}], "]"}], ",", 
                    " ", "ops"}], "]"}]}]}], "CodeInput"]}, Open]]}, Open]], 
     Cell[BoxData[RowBox[{RowBox[{"End", "[", "]"}], ";"}]], 
      "InputSection"]}, Open]], Cell["", "SectionSeparator"]}, 
 WindowSize -> {808, 755}, WindowMargins -> 
  {{Automatic, 92}, {Automatic, 6}}, TaggingRules -> 
  {"MyRule" -> 2, "UUIDButtons" -> 
    {"Active" -> {"Button-89ffd2c3-ec41-4179-a9b1-8e28670bca2c" -> False, 
       "Button-ca46e5e0-4fd1-47e8-8cf6-72998922b757" -> False, 
       "Button-a6d68254-3684-4d32-83fc-e5ef6f443930" -> False}}}, 
 FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
 StyleDefinitions -> FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
   CharacterEncoding -> "UTF-8"]]

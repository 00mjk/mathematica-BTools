(* ::Package:: *)

(* Autogenerated Package *)

MarkdownToXML::usage=
  "Converts markdown to XML";
MarkdownToNotebook::usage=
  "Converts markdown to Notebook";


Begin["`Private`"];


(* ::Subsection:: *)
(*Utils*)



mdPostWrap//Clear;
mdPostWrap[processor_, fallback_][args___]:=
  Replace[processor[args], 
    {
      Automatic|HoldPattern[_processor]:>
        fallback[args],
      (Automatic|processor)[a_, b_]:>
        fallback[a, Replace[b, Automatic[c_, d_]:>fallback[c, d], 1]]
      }
    ]


(* ::Subsection:: *)
(*MarkdownToXML*)



(* ::Subsubsection::Closed:: *)
(*markdownToXMLElement*)



(* ::Subsubsubsection::Closed:: *)
(*Meta*)



markdownToXMLElement["Meta", bits_]:=
  XMLElement["meta",
    Normal@
      AssociationThread[
        {"name", "content"},
        bits
        ],
    {}
    ];


(* ::Subsubsubsection::Closed:: *)
(*FenceBlock*)



markdownToXMLElement[
  "FenceBlock",
  {lang_, code_}
  ]:=
  XMLElement["pre",
    If[!StringMatchQ[lang, Whitespace],
      {
        "class"->
          TemplateApply[
            "lang-`lang` highlight-source-`lang`",
            <|
              "lang"->StringTrim[lang]
              |>
            ]
        },
      {}
      ],
    {
      XMLElement["code",
        {},
        {
          "\n"<>code
          }
        ]
      }
    ]


(* ::Subsubsubsection::Closed:: *)
(*CodeBlock*)



markdownToXMLElement["CodeBlock", text_]:=
  XMLElement["pre",
    {},
    {
      XMLElement["code", {}, {text}]
      }
    ]


(* ::Subsubsubsection::Closed:: *)
(*QuoteBlock*)



markdownToXMLElement["QuoteBlock", xml_]:=
  XMLElement["blockquote", {}, Flatten@List@xml]


(* ::Subsubsubsection::Closed:: *)
(*Header*)



markdownToXMLElement[{"Header", n_}, xml_]:=
  XMLElement["h"<>ToString[n], {}, Flatten@List@xml];


(* ::Subsubsubsection::Closed:: *)
(*Item*)



markdownToXMLElement["OrderedList", items_]:=
  XMLElement["ol", {}, Flatten@{items}];
markdownToXMLElement["UnorderedList", items_]:=
  XMLElement["ul", {}, Flatten@{items}];
markdownToXMLElement["UnorderedList", items_]:=
  XMLElement["ul", {}, Flatten@{items}];
 markdownToXMLElement["Item", item_]:=
  XMLElement["li", {}, Flatten@{item}]; 


(* ::Subsubsubsection::Closed:: *)
(*ItalBold*)



markdownToXMLElement["Italic", items_]:=
  XMLElement["em", {}, Flatten@{items}];
markdownToXMLElement["Bold", items_]:=
  XMLElement["strong", {}, Flatten@{items}];
markdownToXMLElement["ItalicBold", items_]:=
  XMLElement["em", {}, 
    {XMLElement["strong", {}, Flatten@{items}]}];


(* ::Subsubsubsection::Closed:: *)
(*Delimiter*)



markdownToXMLElement["Delimiter", _]:=
  XMLElement["hr", {}, {}]


(* ::Subsubsubsection::Closed:: *)
(*CodeLine*)



markdownToXMLElement["Code", text_]:=
  XMLElement["code",{}, {text}];


(* ::Subsubsubsection::Closed:: *)
(*XML*)



markdownToXMLElement["XML", xml_]:=
  xml;


(* ::Subsubsubsection::Closed:: *)
(*Hyperlink*)



markdownToXMLElement["Link", {link_, body_}]:=
  XMLElement["a", {"href"->link}, Flatten@{body}]


(* ::Subsubsubsection::Closed:: *)
(*Img*)



markdownToXMLElement["Image", {src_, alt_}]:=
  XMLElement["img", {"src"->src, "alt"->alt}, {}]


(* ::Subsubsubsection::Closed:: *)
(*TextForms*)



$MarkdownToXMLTextForms=
  {
    "MathLine"
    };


markdownToXMLElement[Alternatives@@$MarkdownToXMLTextForms, text_String]:=
  text;


(* ::Subsubsubsection::Closed:: *)
(*Text*)



markdownToXMLElement["Text", x_XMLElement]:=x;
markdownToXMLElement["Text", e_]:=XMLElement["p", {}, Flatten@{e}]


(* ::Subsubsubsection::Closed:: *)
(*Fallback*)



markdownToXMLElement[t_, text_String]:=
  XMLElement[t, {}, {text}]


(* ::Subsubsection::Closed:: *)
(*MarkdownToXML*)



MarkdownToXML//Clear


Options[MarkdownToXML]=
  DeleteDuplicatesBy[First]@
    Join[
      {
        "HeaderElements"->{"meta", "style", "link", "title"},
        "PostProcessor"->Automatic
        },
      Options[MarkdownParse]
      ];
MarkdownToXML[s_String, ops:OptionsPattern[]]:=
  With[{
      he=OptionValue["HeaderElements"]
      },
    Replace[
      GatherBy[
        MarkdownParse[
          s,
          FilterRules[
            {
              "PostProcessor"->
                mdPostWrap[OptionValue["PostProcessor"], markdownToXMLElement],
              ops,
              Options[MarkdownToXML]
              },
            Options[MarkdownParse]
            ]
          ],
        With[{base=StringMatchQ[Alternatives@@he]},
          Head[#]==XMLElement&&Length[#]>0&&base@First[#]&
          ]
        ],
      {
        {h_,b_}:>
          XMLElement["html",
            {},
            {
              XMLElement["head", {}, DeleteDuplicates@h],
              XMLElement["body", {}, b]
              }
            ],
        {b_}:>
          XMLElement["html",
            {},
            {
              XMLElement["body",{},b]
              }
            ]
        }]
    ];


(* ::Subsection:: *)
(*MarkdownToNotebook*)



(* ::Subsubsection::Closed:: *)
(*markdownToCell*)



(* ::Subsubsubsection::Closed:: *)
(*helpers*)



$textForms=_String|_StyleBox|_ButtonBox|_Cell|_TextData;


prepCellData//Clear
prepCellData[s_String]:=s;
prepCellData[{s_String}]:=s;
prepCellData[l:{$textForms...}]:=TextData[l];
prepCellData[l_List]:=prepCellData[prepCellData/@l];
prepCellData[b_BoxData]:=Cell[b];
prepCellData[e:$textForms]:=e;
prepCellData[e:Except[$textForms]]:=BoxData[e];


prepCell//Clear;
prepCell[{l:Except[_List]}]:=l;
prepCell[l:{$textForms..}]:=Cell[TextData[l]];
prepCell[l:_List]:=prepCell[prepCell/@l];
prepCell[e:$textForms]:=e;
prepCell[e:Except[_List]]:=Cell[BoxData@e];
prepCell[e_]:=e;


getCodeBoxes[code_]:=
  MathLink`CallFrontEnd[FrontEnd`ReparseBoxStructurePacket[code]];


(* ::Subsubsubsection::Closed:: *)
(*Meta*)



markdownToCell["Meta", {name_, content_}]:=
  Cell[prepCellData@content, "Metadata", "Markdown", TaggingRules->{"Field"->name}];


(* ::Subsubsubsection::Closed:: *)
(*FenceBlock*)



markdownToCell[
  "FenceBlock",
  {lang_, code_}
  ]:=
  Cell[BoxData@getCodeBoxes[code],
    "Code",
    "FencedCode",
    "Markdown",
    If[!StringMatchQ[lang, Whitespace],
      TaggingRules->{"Language"->lang},
      Sequence@@{}
      ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*CodeBlock*)



markdownToCell["CodeBlock", text_]:=
  Cell[BoxData@getCodeBoxes[text], "Code", "Markdown"]


(* ::Subsubsubsection::Closed:: *)
(*QuoteBlock*)



markdownToCell["QuoteBlock", text_]:=
  Cell[prepCellData[text], "Quote", "Text", "Markdown"]


(* ::Subsubsubsection::Closed:: *)
(*Header*)



markdownToCell[{"Header", n_}, text_]:=
  Cell[prepCellData[text], Nest[StringReplace["S"->"Subs"], "Section", n-1], "Markdown"];


(* ::Subsubsubsection::Closed:: *)
(*Item*)



markdownToCell["OrderedList", items_]:=
  Cell@CellGroupData@
    Flatten@{
      items/.Cell[a___, "Item", b___]:>Cell[a, "ItemNumbered", b]
      };
markdownToCell["UnorderedList", items_]:=
  Cell@CellGroupData@
    Flatten@{items};
 markdownToCell["Item", item_]:=
  Cell[prepCellData[item], "Item", "Markdown"]; 


(* ::Subsubsubsection::Closed:: *)
(*ItalBold*)



markdownToCell["Italic", items_]:=
  StyleBox[prepCell@items, FontSlant->"Italic"];
markdownToCell["Bold", items_]:=
  StyleBox[prepCell@items, FontWeight->"Bold"];
markdownToCell["ItalicBold", items_]:=
  StyleBox[prepCell@items, FontSlant->"Italic", FontWeight->"Bold"];


(* ::Subsubsubsection::Closed:: *)
(*Delimiter*)



markdownToCell["Delimiter", _]:=
  Cell["", "Delimiter", "PageBreak", "Markdown",
    PageBreakAbove->False,
    PageBreakBelow->False,
    PageBreakWithin->False
    ]


(* ::Subsubsubsection::Closed:: *)
(*CodeLine*)



markdownToCell["Code", text_]:=
  Cell[BoxData@getCodeBoxes[text], "Input", "Markdown"];


(* ::Subsubsubsection::Closed:: *)
(*XML*)



markdownToCell["XML", xml_]:=
  Cell[
    TextData@ExportString[xml, "HTMLFragment"], 
    "RawMarkdown", "Text", "Markdown"
    ];


(* ::Subsubsubsection::Closed:: *)
(*Hyperlink*)



markdownToCell["Link", {link_, body_}]:=
  ButtonBox[prepCell[body], 
    BaseStyle->"Hyperlink", 
    ButtonData->{URL[Quiet@StringTrim[link]], None}]


(* ::Subsubsubsection::Closed:: *)
(*Img*)



markdownToCell["Image", {src_, alt_}]:=
  TemplateBox[
    {src, alt, ToBoxes[alt]},
    "LinkedImage",
    DisplayFunction->
      Function[
        TooltipBox[
          DynamicBox[
            ToBoxes@Refresh[Import[StringTrim@#], None],
            SingleEvaluation->True
            ],
          #3
          ]
        ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*TextForms*)



markdownToCell["MathLine", text_String]:=
  ImportString[text, "LaTeX"][[1]]


(* ::Subsubsubsection::Closed:: *)
(*Text*)



markdownToCell["Text", e_String]:=
  Cell[prepCellData[StringTrim[e]], "Text", "Markdown"];
markdownToCell["Text", {a_String, r__, b_String}]:=
  Cell[prepCellData[{StringTrim[a], r, StringTrim[b]}], "Text", "Markdown"];
markdownToCell["Text", {a_String, r__}]:=
  Cell[prepCellData[{StringTrim[a], r}], "Text", "Markdown"];
markdownToCell["Text", {r__, b_String}]:=
  Cell[prepCellData[{r, StringTrim[b]}], "Text", "Markdown"];
markdownToCell["Text", e_]:=
  Cell[prepCellData@e, "Text", "Markdown"];


(* ::Subsubsubsection::Closed:: *)
(*Fallback*)



markdownToCell[t_, text_String]:=
  Cell[text, "Text", t, "Markdown"]


(* ::Subsubsection::Closed:: *)
(*MarkdownToNotebook*)



MarkdownToNotebook//Clear


Options[MarkdownToNotebook]=
  Join[
    Normal@
      ReplacePart[
        Association@Options[MarkdownParse],
        "PostProcessor"->Automatic
        ],
    Options[Notebook]
    ];
MarkdownToNotebook[s_String, ops:OptionsPattern[]]:=
  Notebook[
    Flatten@List@MarkdownParse[
      s,
      FilterRules[
        {
          "PostProcessor"->
            mdPostWrap[OptionValue["PostProcessor"], markdownToCell],
          ops
          },
        Options[MarkdownParse]
        ]
      ],
   FilterRules[{ops}, Options[Notebook]]
   ];


End[];




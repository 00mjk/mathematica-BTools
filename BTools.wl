(* ::Title:: *)
(*BTools`*)


(* ::Text::GrayLevel[0.5]:: *)
(* Autogenerated BTools loader file *)


BeginPackage["BTools`"];


(* ::Section:: *)
(* Package Functions *)


Begin["`Private`Package`"];
(* ::Subsection::Closed:: *)
(*Constants*)


$PackageDirectory=
	DirectoryName@$InputFileName;
$PackageName=
	"BTools";
`$Packages=<||>;
$Contexts={
	"BTools`"
	};
(* ::Subsection:: *)
(*Paths*)


appPath[p__]:=
	FileNameJoin[Flatten@{
		$PackageDirectory,
		p
		}];
appFEFile[p___,f_]:=
	FrontEnd`FileName[
		Evaluate@
		Flatten@{
			$PackageName,
			p
			},
		f
		];
(* ::Subsection::Closed:: *)
(*Loading*)


If[Not@AssociationQ@$DeclaredPackages,
	$DeclaredPackages=
		<||>
	];


If[Not@ListQ@$LoadedPackages,
	$LoadedPackages={}
	];


(* ::Subsubsection::Closed:: *)
(*fileContext*)


fileContextPath[f_String?DirectoryQ]:=
	FileNameSplit[FileNameDrop[f],FileNameDepth[$PackageDirectory]+1];
fileContextPath[f_String?FileExistsQ]:=
	fileContextPath[DirectoryName@f];


fileContext[f_String?DirectoryQ]:=
	With[{s=fileContextPath[f]},
		StringRiffle[Append[""]@Prepend[s,BTools],"`"]
		];


(* ::Subsubsection::Closed:: *)
(*packageExecute*)


packageExecute[expr_]:=
	(
		BeginPackage["BTools`"];
		$ContextPath=
			DeleteDuplicates[Join[$ContextPath,$Contexts]];
		(EndPackage[];#)&@CheckAbort[expr,EndPackage[]]
		);
packageExecute~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*pullDeclarations*)


pullDeclarations[pkgFile_]:=
	With[{f=OpenRead[pkgFile]},
		pkgFile->
		Cases[
			Reap[
				Do[
					Replace[ReadList[f,Hold[Expression],1],{
						{}->Return[EndOfFile],
						{Hold[_Begin|_BeginPackage|
							CompoundExpression[_Begin|_BeginPackage,___]]}:>
							Return[Begin],
						{e_}:>Sow[e]
						}],
					Infinity];
				Close@f;
				][[2,1]],
			s_Symbol?(
				Function[sym,
					Quiet[MemberQ[$Contexts,Context[sym]]],
					HoldFirst]):>
				HoldPattern[s],
			Infinity
			]
	];


(* ::Subsubsection::Closed:: *)
(*loadPackage*)


loadPackage[heldSym_,context_,pkgFile_->syms_]:=
	Block[{$loadingChain=
		If[ListQ@$loadingChain,$loadingChain,{}]
		},
		If[!MemberQ[$loadingChain,pkgFile],
			Replace[Thread[syms,HoldPattern],
				Verbatim[HoldPattern][{s__}]:>Clear[s]
				];
			appGet[context,pkgFile];
			AppendTo[$LoadedPackages,pkgFile];
			ReleaseHold[heldSym]
			]	
		];


(* ::Subsubsection::Closed:: *)
(*declarePackage*)


declarePackage[pkgFile_->syms_]:=
	With[{c=$Context},
		$DeclaredPackages[pkgFile]=syms;
		Map[
			If[True(*Not@MatchQ[Apply[OwnValues][#],{_:>_loadPackage}]*),
				#:=feHiddenBlock[loadPackage[#,c,pkgFile->syms]];
				Replace[#,
					Verbatim[HoldPattern][s_]:>(
						s/:HoldPattern[
							m:Except[
								Clear|ClearAll|OwnValues|
								HoldPattern|Hold|HoldComplete|
								Set|SetDelayed|
								RuleCondition|CompoundExpression
								][s,__]]:=
							RuleCondition[
								feHiddenBlock[loadPackage[#,c,pkgFile->syms]];
								m,
								True]	
						)]]&,
			syms
			]
		];


(* ::Subsubsection::Closed:: *)
(*loadDeclare*)


loadDeclare[pkgFile_String]:=
	If[!MemberQ[$LoadedPackages,pkgFile],
		feHiddenBlock[
			If[!KeyMemberQ[$DeclaredPackages,pkgFile],
				declarePackage@pullDeclarations[pkgFile],
				ReleaseHold@First@$DeclaredPackages[pkgFile]
				]
			],
		appGet[pkgFile]
		];


(* ::Subsubsection::Closed:: *)
(*appLoad*)


appLoad[dir_String?DirectoryQ]:=
	If[StringMatchQ[FileBaseName@dir,(WordCharacter|"$")..],
		Begin["`"<>FileBaseName[dir]<>"`"];
		AppendTo[$Contexts,$Context];
		appLoad[
			`$Packages[FileNameDrop[dir,FileNameDepth[$PackageDirectory]+1]]=
				Select[
					FileNames["*",dir],
					DirectoryQ@#||MatchQ[FileExtension[#],"m"|"wl"]&
					]
			];
		End[];
		];
appLoad[file_String?FileExistsQ]:=
	loadDeclare[file];
appLoad[]:=
	appLoad[
		`$Packages[$PackageName]=
			Select[
				FileNames["*",FileNameJoin@{$PackageDirectory,"Packages"}],
				DirectoryQ@#||MatchQ[FileExtension[#],"m"|"wl"]&
				]
			];
appLoad~SetAttributes~Listable;


(* ::Subsubsection::Closed:: *)
(*appGet*)


appGet[f_]:=
	packageExecute[
		feHiddenBlock[
			If[FileExistsQ@f,
				Get@f,
				Get@appPath[f<>".m"]
				]
			]
		];
appGet[c_,f_]:=
	packageExecute[
		Begin[c];
		(End[];#)&@
			feHiddenBlock[
				If[FileExistsQ@f,
					Get@f,
					Get@appPath[f<>".m"]
					]
				]
		];


(* ::Subsubsection::Closed:: *)
(*appNeeds*)


appNeeds[pkgFile_String?FileExistsQ]:=
	If[!MemberQ[$LoadedPackages,pkgFile],
		If[KeyMemberQ[$DeclaredPackages,pkgFile],
			loadDeclare[pkgFile],
			Do[loadDeclare[pkgFile],2]
			];
		];


appNeeds[pkg_String]:=
	If[FileExistsQ@appPath["Packages",pkg<>".m"],
		appNeeds[appPath["Packages",pkg<>".m"]],
		$Failed
		];
(* ::Subsection::Closed:: *)
(*Autocompletion*)


(* ::Subsubsection::Closed:: *)
(* $autoCompletionFormats *)


	$autoCompletionFormats=
		Alternatives@@Join@@{
			Range[9],
			{{__String}},
			{
				"codingNoteFontCom",
				"ConvertersPath",
				"ExternalDataCharacterEncoding",
				"MenuListCellTags",
				"MenuListConvertFormatTypes",
				"MenuListDisplayAsFormatTypes",
				"MenuListFonts",
				"MenuListGlobalEvaluators",
				"MenuListHelpWindows",
				"MenuListNotebookEvaluators",
				"MenuListNotebooksMenu",
				"MenuListPackageWindows",
				"MenuListPalettesMenu",
				"MenuListPaletteWindows",
				"MenuListPlayerWindows",
				"MenuListPrintingStyleEnvironments",
				"MenuListQuitEvaluators",
				"MenuListScreenStyleEnvironments",
				"MenuListStartEvaluators",
				"MenuListStyleDefinitions",
				"MenuListStyles",
				"MenuListStylesheetWindows",
				"MenuListTextWindows",
				"MenuListWindows",
				"PrintingStyleEnvironment",
				"ScreenStyleEnvironment",
				"Style"
				}
			};


(* ::Subsubsection::Closed:: *)
(* addAutocompletions Basic*)


addAutocompletions[pats:{(_String->{$autoCompletionFormats..})..}]:=
	If[$Notebooks&&
		Internal`CachedSystemInformation["FrontEnd","VersionNumber"]>10.0,
		Scan[
			FE`Evaluate[FEPrivate`AddSpecialArgCompletion[#]]&,
			pats
			];
		pats,
		$Failed
		];
addAutocompletions[pat:(_String->{$autoCompletionFormats..})]:=
	addAutocompletions[{pat}];


(* ::Subsubsection::Closed:: *)
(* $autocompletionTable *)


$autocompletionTable={
	f:$autoCompletionFormats:>f,
	None|Normal|"Standard"->0,
	AbsoluteFileName|"AbsoluteFileName"->2,
	FileName->3,
	"Color"->4,
	Package|"Package"->7,
	Directory|"Directory"->8,
	Interpreter|"InterpreterType"->9,
	s_String:>{s}
	};


(* ::Subsubsection::Closed:: *)
(* addAutocompletions Formatted *)


addAutocompletions[o:{__Rule}]/;(!TrueQ@$recursionProtect):=
	Block[{$recursionProtect=True},
		Replace[
			addAutocompletions@
				Replace[o,
					(s_->v_):>
						(Replace[s,_Symbol:>SymbolName[s]]->
							Replace[
								Flatten[{v},1],
								$autocompletionTable,
								1
								]),
					1
					],
			_addAutocompletions->$Failed
			]
		];
addAutocompletions[s:Except[_List],v_]:=
	addAutocompletions[{s->v}];
addAutocompletions[l_,v_]:=
	addAutocompletions@
		Flatten@{
			Quiet@
				Check[
					Thread[l->v],
					Map[l->#&,v]
					]
			};


(* ::Subsubsection::Closed:: *)
(* setAutocompletionData *)


setAutocompletionData[]:=
	If[DirectoryQ@
			FileNameJoin@{
					$PackageDirectory,
					"Resources",
					"FunctionalFrequency"
					},
		CurrentValue[
		$FrontEndSession,
			{PrivatePaths,"AutoCompletionData"}
			]=
			DeleteDuplicates@
				Append[
					CurrentValue[
						$FrontEndSession,
						{PrivatePaths,"AutoCompletionData"}
						],
					FileNameJoin@{
						$PackageDirectory,
						"Resources",
						"FunctionalFrequency"
						}
					]
		];
(* ::Subsection::Closed:: *)
(*SyntaxInformation*)


If[!AssociationQ@$SyntaxInformationSet,
	$SyntaxInformationSet=<|
		
		|>
	];


(* ::Subsubsection::Closed:: *)
(*getSyntaxInformation*)


getSyntaxInformation[Except[HoldPattern][pats___]]:=
	ReplaceRepeated[HoldPattern[#],{
		Verbatim[Pattern][_,b_]:>b,
		_Optional:>(_.),
		Verbatim[PatternTest][p_,_]:>p,
		Verbatim[Blank][s_]:>_,
		Verbatim[BlankSequence][s_]:>__,
		Verbatim[BlankNullSequence][s_]:>___,
		Verbatim[OptionsPattern][s__]:>OptionsPattern[]
		}]&/@Hold[pats]//Thread[List@@#,HoldPattern]&//ReleaseHold;
getSyntaxInformation[Verbatim[HoldPattern][pat_]]:=
	getSyntaxInformation[pat];
getSyntaxInformation[Verbatim[HoldPattern][pats___]]:=
	getSyntaxInformation[Hold[pats]];
getSyntaxInformation[pat_Symbol]:=
	Replace[DownValues[pat],
		(Verbatim[HoldPattern][p_]:>_):>
			getSyntaxInformation[p],
		1
		];
getSyntaxInformation~SetAttributes~HoldFirst;


(* ::Subsubsection::Closed:: *)
(*setSyntaxInformation*)


setSyntaxInformation[Verbatim[HoldPattern][f_Symbol[pats___]],o___]:=
	setSyntaxInformation[f[pats],o];
setSyntaxInformation[f_Symbol[pats___],o___]:=
	If[!Lookup[$SyntaxInformationSet,f,False],
		$SyntaxInformationSet[f]=True;
		SyntaxInformation[f]={
			"ArgumentsPattern"->getSyntaxInformation[f[pats]],
			o
			};
		];
setSyntaxInformation~SetAttributes~HoldFirst;


setSyntaxInformation[f_Symbol,o___]:=
	If[!Lookup[$SyntaxInformationSet,f,False],
		With[{d=
			First@
				MaximalBy[
					Length@Extract[#,1,Unevaluated]&
					]@
				MaximalBy[First/@DownValues[f],
					Length@Cases[#,_Optional|_Default|_OptionsPattern,\[Infinity]]&
					]},
			setSyntaxInformation[d,o]
			]
		];


(* ::Subsubsection::Closed:: *)
(*clearSyntaxInformation*)


clearSyntaxInformation[f_Symbol]:=
	(SyntaxInformation[f]=.;$SyntaxInformationSet[f]=False;);
clearSyntaxInformation[f_Symbol[pats___]]:=
	(SyntaxInformation[f]=.;$SyntaxInformationSet[f]=False;);
(* ::Subsection::Closed:: *)
(*Usage*)


addUsage[sym_Symbol,usage_String]:=
	(sym::usages=
		StringTrim@StringRiffle[{
			StringReplace[
				Replace[sym::usages,
					Except[_String]->""
					],
				usage->""
				],
			usage},
			"\n"]);
addUsage[pat:Except[_Missing],usage_String]:=
	addUsage[
		Evaluate@FirstCase[Hold[pat],
			s_Symbol?(
				Function[Null,
				Context[#]==("BTools`"),
				HoldFirst]):>s,
			Missing["NotFound"],
			Infinity,
			Heads->True
			],
		ToString[Unevaluated[pat]]<>" "<>usage
		];
addUsage[pat:Except[_Missing],usage_]:=
	addUsage[pat,ToString[usage]];
addUsage~SetAttributes~HoldFirst;
(* ::Subsection:: *)
(*FrontEnd*)


(* ::Subsubsection::Closed:: *)
(*feInstallStylesheets *)


feInstallStylesheets[]:=
	With[{
		base=
			FileNameJoin@{
				$PackageDirectory,
				"FrontEnd",
				"StyleSheets",
				$PackageName
				},
		target=
			FileNameJoin@{
					$UserBaseDirectory,
					"SystemFiles",
					"FrontEnd",
					"StyleSheets",
					$PackageName}
		},
		If[DirectoryQ@base,
			Do[
				Quiet@
					CreateFile[
						FileNameJoin@{
							target,
							FileNameDrop[f,FileNameDepth[base]]
							},
						CreateIntermediateDirectories->True
						];
				CopyFile[f,
					FileNameJoin@{
						target,
						FileNameDrop[f,FileNameDepth[base]]
						},
					OverwriteTarget->True],
				{f,FileNames["*.nb",base,\[Infinity]]}
				]
			]
		];


(* ::Subsubsection::Closed:: *)
(*feInstallPalettes *)


feInstallPalettes[]:=
	With[{
		base=
			FileNameJoin@{
				$PackageDirectory,
				"FrontEnd",
				"Palettes",
				$PackageName
				},
		target=
			FileNameJoin@{
					$UserBaseDirectory,
					"SystemFiles",
					"FrontEnd",
					"Palettes",
					$PackageName}
		},
		If[DirectoryQ@base,
			Do[
				Quiet@
					CreateFile[
						FileNameJoin@{
							target,
							FileNameDrop[f,FileNameDepth[base]]
							},
						CreateIntermediateDirectories->True
						];
				CopyFile[f,
					FileNameJoin@{
						target,
						FileNameDrop[f,FileNameDepth[base]]
						},
					OverwriteTarget->True],
				{f,FileNames["*.nb",base,\[Infinity]]}
				]
			]
		];


(* ::Subsubsection::Closed:: *)
(*feHiddenBlock*)


feHiddenBlock[expr_]:=
	(
		Internal`SymbolList[False];
		(Internal`SymbolList[True];#)&@expr
		);
feHiddenBlock~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*feUnhideSymbols*)


feUnhideSymbols[syms__Symbol,
	cpath:{__String}|Automatic:Automatic,
	mode:"Update"|"Set":"Update"
	]:=
	With[{stuff=
		Map[
			Function[Null,
				{Context@#,SymbolName@Unevaluated@#},
				HoldAllComplete],
			HoldComplete[syms]
			]//Apply[List]
		},
		KeyValueMap[
			FrontEndExecute@
			If[mode==="Update",
				FrontEnd`UpdateKernelSymbolContexts,
				FrontEnd`SetKernelSymbolContexts
				][
				#,
				Replace[cpath,Automatic->$ContextPath],
				{{#,{},{},#2,{}}}
				]&,
			GroupBy[stuff,First->Last]
			];
		];
feUnhideSymbols[names_String,mode:"Update"|"Set":"Update"]:=
	Replace[
		Thread[ToExpression[Names@names,StandardForm,Hold],Hold],
		Hold[{s__}]:>feUnhideSymbols[s,mode]
		];
feUnhideSymbols~SetAttributes~HoldAllComplete;


(* ::Subsubsection::Closed:: *)
(*feRehideSymbols*)


feRehideSymbols[syms__Symbol,
	cpath:{__String}|Automatic:Automatic,
	mode:"Update"|"Set":"Update"]:=
	With[{stuff=
		Map[
			Function[Null,
				{Context@#,SymbolName@Unevaluated@#},
				HoldAllComplete],
			HoldComplete[syms]
			]//Apply[List]
		},
		KeyValueMap[
			FrontEndExecute@
			If[mode==="Update",
				FrontEnd`UpdateKernelSymbolContexts,
				FrontEnd`SetKernelSymbolContexts
				][
				#,
				Replace[cpath,
					Automatic->$ContextPath
					],
				{{#,{},#2,{},{}}}
				]&,
			GroupBy[stuff,First->Last]
			];
		];
feRehideSymbols[names_String,mode:"Update"|"Set":"Update"]:=
	Replace[
		Thread[ToExpression[Names@names,StandardForm,Hold],Hold],
		Hold[{s__}]:>feRehideSymbols[s,mode]
		];
feRehideSymbols~SetAttributes~HoldAllComplete;


(* ::Subsubsection::Closed:: *)
(*feUnhidePackage*)


feUnhidePackage[package_String?FileExistsQ,a___]:=
	Replace[Thread[Lookup[$DeclaredPackages,package,{}],HoldPattern],
		Verbatim[HoldPattern][{syms__}]:>
			feUnhideSymbols[syms,a]
		];
feUnhidePackage[spec:_String|_List,a___]:=
	feUnhidePackage[appPath@Flatten@{"Packages",spec},a];


(* ::Subsubsection::Closed:: *)
(*feRehidePackage*)


feRehidePackage[package_String?FileExistsQ,a___]:=
	Replace[Thread[Lookup[$DeclaredPackages,package,{}],HoldPattern],
		Verbatim[HoldPattern][{syms__}]:>
			feRehideSymbols[syms,a]
		];
feRehidePackage[spec:_String|_List,a___]:=
	feRehidePackage[appPath@Flatten@{"Packages",spec},a];
(* ::Subsection:: *)
(*Objects*)


(* ::Subsubsection::Closed:: *)
(*$objectBase*)


$objectBase=appPath["Objects"];


(* ::Subsubsection::Closed:: *)
(*localObject*)


localObject[name_]:=
	LocalObject[name,$objectBase];


(* ::Subsubsection::Closed:: *)
(*localFile*)


localFile[name_,path_]:=
	FileNameJoin@{
		$objectBase,
		name,
		path
		};


localFile[name_]:=
	localFile[
		name,
		Key["ExternalData"]@
			Get@localFile["object.wl"]
		];


(* ::Subsubsection::Closed:: *)
(*localPut*)


localPut[expr__,name_]:=
	Put[
		Unevaluated@expr,
		localObject[name]
		];


(* ::Subsubsection::Closed:: *)
(*localExport*)


localExport[name_,e__]:=
	Export[
		localObject[name],
		e
		];


(* ::Subsubsection::Closed:: *)
(*localEncode*)


localEncode[name_]:=
	(
		Put[
			ReplacePart[Get@localFile[name,"object.wl"],
				"ExternalData"->"encoded.mx"
				],
			localFile[name,"object.wl"]
			];
		Encode[
			localFile[name],
			localFile[name,"encoded.mx"]
			];
		localObject[name]
		);


localEncode[name_,key_]:=
	(
		Put[
			ReplacePart[Get@localFile[name,"object.wl"],
				"ExternalData"->"encoded.mx"
				],
			localFile[name,"object.wl"]
			];
		Encode[
			localFile[name],
			localFile[name,"encoded.mx"],
			key
			];
		localObject[name]
		);


(* ::Subsubsection::Closed:: *)
(*localGet*)


localGet[name_]:=
	Get@localObject[name];


localGet[name_,key_]:=
	Get[localObject[name],key];


(* ::Subsubsection::Closed:: *)
(*localImport*)


localImport[name_,e___]:=
	Import[
		localObject[name],
		e
		];


(* ::Subsection::Closed:: *)
(* End[] *)


End[];


(* ::Section:: *)
(* Load *)


`Private`Package`$loadAbort=False;
CheckAbort[
	`Private`Package`feHiddenBlock[
		`Private`Package`appLoad[]
		],
	`Private`Package`$loadAbort=True;
	EndPackage[]
	];
If[(Clear@`Private`Package`$loadAbort;!#)&@`Private`Package`$loadAbort,
	If[$Notebooks,
		If[FileExistsQ@`Private`Package`appPath["LoadInfo.m"],
			Replace[Quiet[Import@`Private`Package`appPath["LoadInfo.m"],Import::nffil],
				`Private`Package`specs:{__Rule}|_Association:>
					With[{
						`Private`Package`preloads=
							Replace[
								Lookup[`Private`Package`specs,"PreLoad"],
								Except[{__String}]->{}
								],
						`Private`Package`hide=
							Replace[
								Lookup[`Private`Package`specs,"Hidden"],
								Except[{__String}]->{}
								]
						},
						`Private`Package`appGet/@`Private`Package`preloads;
						If[
							!MemberQ[`Private`Package`hide,
								Replace[
									FileNameSplit@
										FileNameDrop[#,
											FileNameDepth@
												`Private`Package`appPath["Packages"]
											],{
									{`Private`Package`f_}:>{
										StringTrim[`Private`Package`f,".m"|".wl"]}|
										StringTrim[`Private`Package`f,".m"|".wl"],
									{`Private`Package`p__,`Private`Package`f_}:>
										{`Private`Package`p,
											StringTrim[`Private`Package`f,".m"|".wl"]}
									}]
								],
							`Private`Package`feUnhidePackage@#
							]&/@Keys@`Private`Package`$DeclaredPackages
						]
				],
			`Private`Package`feUnhidePackage/@
				Keys@`Private`Package`$DeclaredPackages
			];
		];
	EndPackage[];
	];
(* ::Package:: *)

(* ::Title:: *)
(*$Name`*)


(* ::Text::GrayLevel[0.5]:: *)
(* Autogenerated $Name loader file *)


BeginPackage["$Name`"];


(* ::Subsubsection::Closed:: *)
(*$ContextPath*)


$ContextPath=
	Join[$ContextPath,
		"$Name`"<>
			StringReplace[
				FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
				$PathnameSeparator->"`"
				]&/@
			Select[
				DirectoryQ@#&&
					StringMatchQ[
						StringReplace[
							FileNameDrop[#,FileNameDepth@DirectoryName@$InputFileName],
							$PathnameSeparator->"`"
							],
						("$"|WordCharacter)..
						]
				&]@
			FileNames["*",
				FileNameJoin@{
					DirectoryName@$InputFileName,
					"Packages"
					},
				Infinity
				]
		]


(* ::Section:: *)
(* Package Functions *)


Unprotect["`Private`Package`*"];
Begin["`Private`Package`"];


$InitCode


(* ::Subsection:: *)
(*Post-Processing*)


(* ::Subsubsection::Closed:: *)
(*PrepFileName*)


PackagePostProcessFileNamePrep[fn_]:=
		Replace[
			FileNameSplit@
				FileNameDrop[fn,
					FileNameDepth@
						PackageFilePath["Packages"]
					],{
			{f_}:>
				f|fn|StringTrim[f,".m"|".wl"],
			{p__,f_}:>
				FileNameJoin@{p,f}|fn|{p,StringTrim[f,".m"|".wl"]}
			}]


(* ::Subsubsection::Closed:: *)
(*PrepSpecs*)


PackagePostProcessPrepSpecs[]:=
	(
		Unprotect[
			$PackagePreloadedPackages,
			$PackageHiddenPackages,
			$PackageHiddenContexts,
			$PackageDecontextedPackages
			];
		If[FileExistsQ@PackageFilePath["LoadInfo.m"],
			Replace[
				Quiet[
					Import@PackageFilePath["LoadInfo.m"],
					Import::nffil
					],
				specs:{__Rule}|_Association:>
					CompoundExpression[
						$PackagePreloadedPackages=
							Replace[
								Lookup[specs,"PreLoad"],
								Except[{__String}]->{}
								],
						$PackageHiddenPackages=
							Replace[
								Lookup[specs,"FEHidden"],
								Except[{__String}]->{}
								],
						$PackageDecontextedPackages=
							Replace[
								Lookup[specs,"PackageScope"],
								Except[{__String}]->{}
								]
						]
				]
			]
		);


(* ::Subsubsection::Closed:: *)
(*ExposePackages*)


PackagePostProcessExposePackages[]:=
	(
		PackageAppGet/@
			$PackagePreloadedPackages;
		If[$Notebooks&&
			!MemberQ[$PackageHiddenPackages,
				PackagePostProcessFileNamePrep[#]
				],
			PackageFEUnhidePackage@#
			]&/@Keys@$DeclaredPackages;
		)


(* ::Subsubsection::Closed:: *)
(*Rehide Packages*)


PackagePostProcessRehidePackages[]:=
If[
	MemberQ[$PackageHiddenPackages,
		PackagePostProcessFileNamePrep[#]
		],
	PackageFERehidePackage@#
	]&/@Keys@$DeclaredPackages


(* ::Subsubsection::Closed:: *)
(*Decontext*)


PackagePostProcessDecontextPackages[]:=
If[
	MemberQ[$PackageDecontextedPackages,
		PackagePostProcessFileNamePrep[#]
		],
	PackageFERehidePackage@#;
	PackageDecontext@#
	]&/@Keys@$DeclaredPackages;


(* ::Subsubsection::Closed:: *)
(*ContextPathReassign*)


PackagePostProcessContextPathReassign[]:=
(
	$ContextPath=
		Join[
			DeleteCases[
				Alternatives@@
					Join[
						Replace[
							Flatten@{$HiddenContexts},
							Except[_String?(StringEndsQ["`"])]->Nothing,
							1
							],
						$ContextPath
						]
					]@
					Select[
						$PackageContexts,
						Not@*StringContainsQ["Private"]
						],
			$ContextPath
			];
	FrontEnd`Private`GetUpdatedSymbolContexts[];
	)


(* ::Subsection:: *)
(* End[] *)


End[];


(* ::Section:: *)
(* Load *)


(* ::Subsubsection:: *)
(*Basic Load*)


`Private`Package`$loadAbort=False;
CheckAbort[
	`Private`Package`PackageFEHiddenBlock[
		`Private`Package`PackageAppLoad[];
		],
	`Private`Package`$loadAbort=True;
	EndPackage[]
	];
Protect["`Private`Package`*"];
Unprotect[`Private`Package`$loadAbort];


If[!`Private`Package`$loadAbort,
	`Private`Package`PackagePostProcessPrepSpecs[];
	`Private`Package`PackagePostProcessExposePackages[];
	`Private`Package`PackagePostProcessRehidePackages[];
	`Private`Package`PackagePostProcessDecontextPackages[];
	]


EndPackage[];


If[(Clear@$Name`Private`Package`$loadAbort;!#)&@$Name`Private`Package`$loadAbort,
	$Name`Private`Package`PackagePostProcessContextPathReassign[]
	]
